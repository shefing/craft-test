{"version":3,"file":"useNode.js","sourceRoot":"","sources":["../../src/hooks/useNode.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,MAAM,gBAAgB,CAAC;AAGpD,OAAO,EAAE,eAAe,EAAE,MAAM,0BAA0B,CAAC;AAE3D;;;GAGG;AACH,MAAM,UAAU,OAAO,CAAW,OAA2B;IAC3D,MAAM,EACJ,EAAE,EACF,OAAO,EACP,OAAO,EACP,aAAa,EACb,UAAU,EACV,GAAG,SAAS,EACb,GAAG,eAAe,CAAC,OAAO,CAAC,CAAC;IAE7B,OAAO;QACL,GAAG,SAAS;QACZ,OAAO;QACP,EAAE;QACF,OAAO;QACP,OAAO,EAAE,CACP,EAAwC,EACxC,YAAqB,EACrB,EAAE;YACF,kBAAkB,CAAC,qBAAqB,EAAE;gBACxC,OAAO,EAAE,6BAA6B;aACvC,CAAC,CAAC;YACH,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,EAAE,YAAY,CAAC,CAAC;QAC3C,CAAC;QACD,aAAa;QACb,UAAU;KACX,CAAC;AACJ,CAAC","sourcesContent":["import { deprecationWarning } from '@craftjs/utils';\n\nimport { Node } from '../interfaces';\nimport { useInternalNode } from '../nodes/useInternalNode';\n\n/**\n * A Hook to that provides methods and state information related to the corresponding Node that manages the current component.\n * @param collect - Collector function to consume values from the corresponding Node's state\n */\nexport function useNode<S = null>(collect?: (node: Node) => S) {\n  const {\n    id,\n    related,\n    actions,\n    inNodeContext,\n    connectors,\n    ...collected\n  } = useInternalNode(collect);\n\n  return {\n    ...collected,\n    actions,\n    id,\n    related,\n    setProp: (\n      cb: (props: Record<string, any>) => void,\n      throttleRate?: number\n    ) => {\n      deprecationWarning('useNode().setProp()', {\n        suggest: 'useNode().actions.setProp()',\n      });\n      return actions.setProp(cb, throttleRate);\n    },\n    inNodeContext,\n    connectors,\n  };\n}\n"]}