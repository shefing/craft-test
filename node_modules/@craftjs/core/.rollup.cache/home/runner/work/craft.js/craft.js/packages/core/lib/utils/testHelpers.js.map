{"version":3,"file":"testHelpers.js","sourceRoot":"","sources":["../../src/utils/testHelpers.ts"],"names":[],"mappings":"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","sourcesContent":["import cloneDeep from 'lodash/cloneDeep';\n\nimport { createNode } from './createNode';\n\nimport { editorInitialState } from '../editor/store';\nimport { Nodes } from '../interfaces';\n\nconst getTestNode = (parentNode) => {\n  const {\n    events,\n    data: { nodes: childNodes, linkedNodes },\n    ...restParentNode\n  } = parentNode;\n  const validParentNode = createNode(cloneDeep(parentNode));\n  parentNode = {\n    ...validParentNode,\n    ...restParentNode,\n    events: {\n      ...validParentNode.events,\n      ...events,\n    },\n    dom: parentNode.dom || validParentNode.dom,\n  };\n\n  return {\n    node: parentNode,\n    childNodes,\n    linkedNodes,\n  };\n};\n\nexport const expectEditorState = (lhs, rhs) => {\n  const { nodes: nodesRhs, ...restRhs } = rhs;\n  const { nodes: nodesLhs, ...restLhs } = lhs;\n  expect(restLhs).toEqual(restRhs);\n\n  const nodesRhsSimplified = Object.keys(nodesRhs).reduce((accum, id) => {\n    const { _hydrationTimestamp, rules, ...node } = nodesRhs[id];\n    accum[id] = node;\n    return accum;\n  }, {});\n\n  const nodesLhsSimplified = Object.keys(nodesLhs).reduce((accum, id) => {\n    const { _hydrationTimestamp, rules, ...node } = nodesLhs[id];\n    accum[id] = node;\n    return accum;\n  }, {});\n\n  expect(nodesLhsSimplified).toEqual(nodesRhsSimplified);\n};\n\nexport const createTestNodes = (rootNode): Nodes => {\n  const nodes = {};\n  const iterateNodes = (testNode) => {\n    const { node: parentNode, childNodes, linkedNodes } = getTestNode(testNode);\n    nodes[parentNode.id] = parentNode;\n\n    if (childNodes) {\n      childNodes.forEach((childTestNode, i) => {\n        const {\n          node: childNode,\n          childNodes: grandChildNodes,\n          linkedNodes: grandChildLinkedNodes,\n        } = getTestNode(childTestNode);\n        childNode.data.parent = parentNode.id;\n        nodes[childNode.id] = childNode;\n        parentNode.data.nodes[i] = childNode.id;\n        iterateNodes({\n          ...childNode,\n          data: {\n            ...childNode.data,\n            nodes: grandChildNodes || [],\n            linkedNodes: grandChildLinkedNodes || {},\n          },\n        });\n      });\n    }\n\n    if (linkedNodes) {\n      Object.keys(linkedNodes).forEach((linkedId) => {\n        const {\n          node: childNode,\n          childNodes: grandChildNodes,\n          linkedNodes: grandChildLinkedNodes,\n        } = getTestNode(linkedNodes[linkedId]);\n        parentNode.data.linkedNodes[linkedId] = childNode.id;\n\n        childNode.data.parent = parentNode.id;\n        nodes[childNode.id] = childNode;\n        iterateNodes({\n          ...childNode,\n          data: {\n            ...childNode.data,\n            nodes: grandChildNodes || [],\n            linkedNodes: grandChildLinkedNodes || {},\n          },\n        });\n      });\n    }\n  };\n\n  iterateNodes(rootNode);\n\n  return nodes;\n};\n\nexport const createTestState = (state = {} as any) => {\n  const { nodes: rootNode, events } = state;\n\n  return {\n    ...editorInitialState,\n    ...state,\n    nodes: rootNode ? createTestNodes(rootNode) : {},\n    events: {\n      ...editorInitialState.events,\n      ...(events || {}),\n    },\n  };\n};\n"]}