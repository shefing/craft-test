{"version":3,"file":"Element.js","sourceRoot":"","sources":["../../src/nodes/Element.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,6BAA6B,EAAE,aAAa,EAAE,MAAM,gBAAgB,CAAC;AAC9E,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AACxC,OAAO,SAAS,MAAM,gBAAgB,CAAC;AAEvC,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AAC5C,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AAEpD,OAAO,EAAE,iBAAiB,EAAE,MAAM,6BAA6B,CAAC;AAGhE,MAAM,CAAC,MAAM,mBAAmB,GAAG;IACjC,EAAE,EAAE,KAAK;IACT,MAAM,EAAE,KAAK;IACb,MAAM,EAAE,EAAE;IACV,MAAM,EAAE,KAAK;CACd,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAAG;IACnC,EAAE,EAAE,MAAM;IACV,MAAM,EAAE,UAAU;CACnB,CAAC;AAUF,MAAM,UAAU,OAAO,CAA8B,EACnD,EAAE,EACF,QAAQ,EACR,GAAG,YAAY,EACC;IAChB,MAAM,EAAE,EAAE,EAAE,GAAG;QACb,GAAG,mBAAmB;QACtB,GAAG,YAAY;KAChB,CAAC;IAEF,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,iBAAiB,EAAE,CAAC;IAC/C,MAAM,EAAE,IAAI,EAAE,aAAa,EAAE,GAAG,eAAe,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QACzD,IAAI,EAAE;YACJ,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,IAAI,EAAE,IAAI,CAAC,IAAI;SAChB;KACF,CAAC,CAAC,CAAC;IAEJ,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,QAAQ,CAAgB,IAAI,CAAC,CAAC;IAEtE,aAAa,CAAC,GAAG,EAAE;QACjB,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,6BAA6B,CAAC,CAAC;QAC/C,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC;QAElC,IAAI,aAAa,EAAE;YACjB,IAAI,YAAY,CAAC;YAEjB,MAAM,YAAY,GAChB,IAAI,CAAC,WAAW;gBAChB,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;gBACpB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;YAEzC,qFAAqF;YACrF,IAAI,YAAY,IAAI,YAAY,CAAC,IAAI,CAAC,IAAI,KAAK,EAAE,EAAE;gBACjD,YAAY,GAAG,YAAY,CAAC,EAAE,CAAC;aAChC;iBAAM;gBACL,iDAAiD;gBACjD,MAAM,aAAa,GAAG,KAAK,CAAC,aAAa,CACvC,OAAO,EACP,YAAY,EACZ,QAAQ,CACT,CAAC;gBAEF,MAAM,IAAI,GAAG,KAAK,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC,UAAU,EAAE,CAAC;gBAEjE,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC;gBAC/B,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,qBAAqB,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;aAClE;YAED,eAAe,CAAC,YAAY,CAAC,CAAC;SAC/B;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,YAAY,CAAC,CAAC,CAAC,oBAAC,WAAW,IAAC,EAAE,EAAE,YAAY,GAAI,CAAC,CAAC,CAAC,IAAI,CAAC;AACjE,CAAC","sourcesContent":["import { ERROR_TOP_LEVEL_ELEMENT_NO_ID, useEffectOnce } from '@craftjs/utils';\nimport React, { useState } from 'react';\nimport invariant from 'tiny-invariant';\n\nimport { NodeElement } from './NodeElement';\nimport { useInternalNode } from './useInternalNode';\n\nimport { useInternalEditor } from '../editor/useInternalEditor';\nimport { NodeId } from '../interfaces';\n\nexport const defaultElementProps = {\n  is: 'div',\n  canvas: false,\n  custom: {},\n  hidden: false,\n};\n\nexport const elementPropToNodeData = {\n  is: 'type',\n  canvas: 'isCanvas',\n};\n\nexport type ElementProps<T extends React.ElementType> = {\n  id?: NodeId;\n  is?: T;\n  custom?: Record<string, any>;\n  children?: React.ReactNode;\n  canvas?: boolean;\n} & React.ComponentProps<T>;\n\nexport function Element<T extends React.ElementType>({\n  id,\n  children,\n  ...elementProps\n}: ElementProps<T>) {\n  const { is } = {\n    ...defaultElementProps,\n    ...elementProps,\n  };\n\n  const { query, actions } = useInternalEditor();\n  const { node, inNodeContext } = useInternalNode((node) => ({\n    node: {\n      id: node.id,\n      data: node.data,\n    },\n  }));\n\n  const [linkedNodeId, setLinkedNodeId] = useState<NodeId | null>(null);\n\n  useEffectOnce(() => {\n    invariant(!!id, ERROR_TOP_LEVEL_ELEMENT_NO_ID);\n    const { id: nodeId, data } = node;\n\n    if (inNodeContext) {\n      let linkedNodeId;\n\n      const existingNode =\n        data.linkedNodes &&\n        data.linkedNodes[id] &&\n        query.node(data.linkedNodes[id]).get();\n\n      // Render existing linked Node if it already exists (and is the same type as the JSX)\n      if (existingNode && existingNode.data.type === is) {\n        linkedNodeId = existingNode.id;\n      } else {\n        // otherwise, create and render a new linked Node\n        const linkedElement = React.createElement(\n          Element,\n          elementProps,\n          children\n        );\n\n        const tree = query.parseReactElement(linkedElement).toNodeTree();\n\n        linkedNodeId = tree.rootNodeId;\n        actions.history.ignore().addLinkedNodeFromTree(tree, nodeId, id);\n      }\n\n      setLinkedNodeId(linkedNodeId);\n    }\n  });\n\n  return linkedNodeId ? <NodeElement id={linkedNodeId} /> : null;\n}\n"]}