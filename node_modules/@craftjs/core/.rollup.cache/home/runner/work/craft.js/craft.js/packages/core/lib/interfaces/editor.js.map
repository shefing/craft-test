{"version":3,"file":"editor.js","sourceRoot":"","sources":["../../src/interfaces/editor.ts"],"names":[],"mappings":"","sourcesContent":["import { QueryCallbacksFor, Delete, PatchListenerAction } from '@craftjs/utils';\n\nimport { Placement } from './events';\nimport { Nodes, NodeEventTypes, NodeId, Node } from './nodes';\n\nimport { QueryMethods } from '../editor/query';\nimport { EditorStore, ActionMethodsWithConfig } from '../editor/store';\nimport { useInternalEditorReturnType } from '../editor/useInternalEditor';\nimport { CoreEventHandlers } from '../events';\n\nexport type Options = {\n  onRender: React.ComponentType<{ render: React.ReactElement }>;\n  onBeforeMoveEnd: (\n    targetNode: Node,\n    newParentNode: Node,\n    existingParentNode: Node\n  ) => void;\n  onNodesChange: (query: QueryCallbacksFor<typeof QueryMethods>) => void;\n  resolver: Resolver;\n  enabled: boolean;\n  indicator: Partial<{\n    success: string;\n    error: string;\n    transition: string;\n    thickness: number;\n  }>;\n  handlers: (store: EditorStore) => CoreEventHandlers;\n  normalizeNodes: (\n    state: EditorState,\n    previousState: EditorState,\n    actionPerformed: Delete<\n      PatchListenerAction<typeof ActionMethodsWithConfig>,\n      'patches'\n    >,\n    query: QueryCallbacksFor<typeof QueryMethods>\n  ) => void;\n};\n\nexport type Resolver = Record<string, string | React.ElementType>;\n\nexport interface Indicator {\n  placement: Placement;\n  error: string | null;\n}\n\nexport type EditorEvents = Record<NodeEventTypes, Set<NodeId>>;\n\nexport type EditorState = {\n  nodes: Nodes;\n  events: EditorEvents;\n  options: Options;\n  indicator: Indicator;\n};\n\nexport type ConnectedEditor<S = null> = useInternalEditorReturnType<S>;\n"]}