{"version":3,"file":"RenderEditorIndicator.js","sourceRoot":"","sources":["../../src/events/RenderEditorIndicator.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAC7D,OAAO,KAAK,EAAE,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAEzC,OAAO,EAAE,eAAe,EAAE,MAAM,gBAAgB,CAAC;AACjD,OAAO,eAAe,MAAM,mBAAmB,CAAC;AAEhD,OAAO,EAAE,iBAAiB,EAAE,MAAM,6BAA6B,CAAC;AAEhE,MAAM,CAAC,MAAM,qBAAqB,GAAG,GAAG,EAAE;IACxC,MAAM,EAAE,SAAS,EAAE,gBAAgB,EAAE,OAAO,EAAE,GAAG,iBAAiB,CAChE,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QACV,SAAS,EAAE,KAAK,CAAC,SAAS;QAC1B,gBAAgB,EAAE,KAAK,CAAC,OAAO,CAAC,SAAS;QACzC,OAAO,EAAE,KAAK,CAAC,OAAO,CAAC,OAAO;KAC/B,CAAC,CACH,CAAC;IAEF,MAAM,OAAO,GAAG,eAAe,EAAE,CAAC;IAElC,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO;SACR;QAED,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,CAAC,OAAO,EAAE,CAAC;YAClB,OAAO;SACR;QAED,OAAO,CAAC,MAAM,EAAE,CAAC;IACnB,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;IAEvB,IAAI,CAAC,SAAS,EAAE;QACd,OAAO,IAAI,CAAC;KACb;IAED,OAAO,KAAK,CAAC,aAAa,CAAC,eAAe,EAAE;QAC1C,KAAK,EAAE;YACL,GAAG,eAAe,CAChB,SAAS,CAAC,SAAS,EACnB,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,EAC1C,SAAS,CAAC,SAAS,CAAC,WAAW;gBAC7B,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC,WAAW,CAAC,GAAG,CAAC,EACjD,gBAAgB,CAAC,SAAS,CAC3B;YACD,eAAe,EAAE,SAAS,CAAC,KAAK;gBAC9B,CAAC,CAAC,gBAAgB,CAAC,KAAK;gBACxB,CAAC,CAAC,gBAAgB,CAAC,OAAO;YAC5B,UAAU,EAAE,gBAAgB,CAAC,UAAU,IAAI,cAAc;SAC1D;QACD,SAAS,EAAE,SAAS,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG;KAC1C,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import { RenderIndicator, getDOMInfo } from '@craftjs/utils';\nimport React, { useEffect } from 'react';\n\nimport { useEventHandler } from './EventContext';\nimport movePlaceholder from './movePlaceholder';\n\nimport { useInternalEditor } from '../editor/useInternalEditor';\n\nexport const RenderEditorIndicator = () => {\n  const { indicator, indicatorOptions, enabled } = useInternalEditor(\n    (state) => ({\n      indicator: state.indicator,\n      indicatorOptions: state.options.indicator,\n      enabled: state.options.enabled,\n    })\n  );\n\n  const handler = useEventHandler();\n\n  useEffect(() => {\n    if (!handler) {\n      return;\n    }\n\n    if (!enabled) {\n      handler.disable();\n      return;\n    }\n\n    handler.enable();\n  }, [enabled, handler]);\n\n  if (!indicator) {\n    return null;\n  }\n\n  return React.createElement(RenderIndicator, {\n    style: {\n      ...movePlaceholder(\n        indicator.placement,\n        getDOMInfo(indicator.placement.parent.dom),\n        indicator.placement.currentNode &&\n          getDOMInfo(indicator.placement.currentNode.dom),\n        indicatorOptions.thickness\n      ),\n      backgroundColor: indicator.error\n        ? indicatorOptions.error\n        : indicatorOptions.success,\n      transition: indicatorOptions.transition || '0.2s ease-in',\n    },\n    parentDom: indicator.placement.parent.dom,\n  });\n};\n"]}