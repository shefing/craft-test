{"version":3,"file":"parseNodeFromJSX.js","sourceRoot":"","sources":["../../src/utils/parseNodeFromJSX.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAExC,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAI1C,MAAM,UAAU,gBAAgB,CAC9B,GAAgC,EAChC,SAAyD;IAEzD,IAAI,OAAO,GAAG,GAAyB,CAAC;IAExC,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;QAC/B,OAAO,GAAG,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,EAAE,OAAO,CAAuB,CAAC;KAC5E;IAED,IAAI,UAAU,GAAG,OAAO,CAAC,IAAW,CAAC;IAErC,OAAO,UAAU,CACf;QACE,IAAI,EAAE;YACJ,IAAI,EAAE,UAAU;YAChB,KAAK,EAAE,EAAE,GAAG,OAAO,CAAC,KAAK,EAAE;SAC5B;KACF,EACD,CAAC,IAAI,EAAE,EAAE;QACP,IAAI,SAAS,EAAE;YACb,SAAS,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;SAC1B;IACH,CAAC,CACF,CAAC;AACJ,CAAC","sourcesContent":["import React, { Fragment } from 'react';\n\nimport { createNode } from './createNode';\n\nimport { Node } from '../interfaces';\n\nexport function parseNodeFromJSX(\n  jsx: React.ReactElement | string,\n  normalize?: (node: Node, jsx: React.ReactElement) => void\n) {\n  let element = jsx as React.ReactElement;\n\n  if (typeof element === 'string') {\n    element = React.createElement(Fragment, {}, element) as React.ReactElement;\n  }\n\n  let actualType = element.type as any;\n\n  return createNode(\n    {\n      data: {\n        type: actualType,\n        props: { ...element.props },\n      },\n    },\n    (node) => {\n      if (normalize) {\n        normalize(node, element);\n      }\n    }\n  );\n}\n"]}