{"version":3,"file":"query.js","sourceRoot":"","sources":["../../src/editor/query.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  QueryCallbacksFor,\n  ERROR_NOT_IN_RESOLVER,\n  getDOMInfo,\n  deprecationWarning,\n  DEPRECATED_ROOT_NODE,\n  ROOT_NODE,\n} from '@craftjs/utils';\nimport React from 'react';\nimport invariant from 'tiny-invariant';\n\nimport { EventHelpers } from './EventHelpers';\nimport { NodeHelpers } from './NodeHelpers';\n\nimport findPosition from '../events/findPosition';\nimport {\n  NodeId,\n  EditorState,\n  Indicator,\n  Node,\n  Options,\n  NodeEventTypes,\n  NodeInfo,\n  NodeSelector,\n  NodeTree,\n  SerializedNodes,\n  SerializedNode,\n  FreshNode,\n} from '../interfaces';\nimport { createNode } from '../utils/createNode';\nimport { deserializeNode } from '../utils/deserializeNode';\nimport { fromEntries } from '../utils/fromEntries';\nimport { getNodesFromSelector } from '../utils/getNodesFromSelector';\nimport { mergeTrees } from '../utils/mergeTrees';\nimport { parseNodeFromJSX } from '../utils/parseNodeFromJSX';\nimport { resolveComponent } from '../utils/resolveComponent';\n\nexport function QueryMethods(state: EditorState) {\n  const options = state && state.options;\n\n  const _: () => QueryCallbacksFor<typeof QueryMethods> = () =>\n    QueryMethods(state) as any;\n\n  return {\n    /**\n     * Determine the best possible location to drop the source Node relative to the target Node\n     *\n     * TODO: replace with Positioner.computeIndicator();\n     */\n    getDropPlaceholder: (\n      source: NodeSelector,\n      target: NodeId,\n      pos: { x: number; y: number },\n      nodesToDOM: (node: Node) => HTMLElement = (node) =>\n        state.nodes[node.id].dom\n    ) => {\n      const targetNode = state.nodes[target],\n        isTargetCanvas = _().node(targetNode.id).isCanvas();\n\n      const targetParent = isTargetCanvas\n        ? targetNode\n        : state.nodes[targetNode.data.parent];\n\n      if (!targetParent) return;\n\n      const targetParentNodes = targetParent.data.nodes || [];\n\n      const dimensionsInContainer = targetParentNodes\n        ? targetParentNodes.reduce((result, id: NodeId) => {\n            const dom = nodesToDOM(state.nodes[id]);\n            if (dom) {\n              const info: NodeInfo = {\n                id,\n                ...getDOMInfo(dom),\n              };\n\n              result.push(info);\n            }\n            return result;\n          }, [] as NodeInfo[])\n        : [];\n\n      const dropAction = findPosition(\n        targetParent,\n        dimensionsInContainer,\n        pos.x,\n        pos.y\n      );\n      const currentNode =\n        targetParentNodes.length &&\n        state.nodes[targetParentNodes[dropAction.index]];\n\n      const output: Indicator = {\n        placement: {\n          ...dropAction,\n          currentNode,\n        },\n        error: null,\n      };\n\n      const sourceNodes = getNodesFromSelector(state.nodes, source);\n\n      sourceNodes.forEach(({ node, exists }) => {\n        // If source Node is already in the editor, check if it's draggable\n        if (exists) {\n          _()\n            .node(node.id)\n            .isDraggable((err) => (output.error = err));\n        }\n      });\n\n      // Check if source Node is droppable in target\n      _()\n        .node(targetParent.id)\n        .isDroppable(source, (err) => (output.error = err));\n\n      return output;\n    },\n\n    /**\n     * Get the current Editor options\n     */\n    getOptions(): Options {\n      return options;\n    },\n\n    getNodes() {\n      return state.nodes;\n    },\n\n    /**\n     * Helper methods to describe the specified Node\n     * @param id\n     */\n    node(id: NodeId) {\n      return NodeHelpers(state, id);\n    },\n\n    /**\n     * Returns all the `nodes` in a serialized format\n     */\n    getSerializedNodes(): SerializedNodes {\n      const nodePairs = Object.keys(state.nodes).map((id: NodeId) => [\n        id,\n        this.node(id).toSerializedNode(),\n      ]);\n      return fromEntries(nodePairs);\n    },\n\n    getEvent(eventType: NodeEventTypes) {\n      return EventHelpers(state, eventType);\n    },\n\n    /**\n     * Retrieve the JSON representation of the editor's Nodes\n     */\n    serialize(): string {\n      return JSON.stringify(this.getSerializedNodes());\n    },\n\n    parseReactElement: (reactElement: React.ReactElement) => ({\n      toNodeTree(\n        normalize?: (node: Node, jsx: React.ReactElement) => void\n      ): NodeTree {\n        let node = parseNodeFromJSX(reactElement, (node, jsx) => {\n          const name = resolveComponent(state.options.resolver, node.data.type);\n\n          node.data.displayName = node.data.displayName || name;\n          node.data.name = name;\n\n          if (normalize) {\n            normalize(node, jsx);\n          }\n        });\n\n        let childrenNodes: NodeTree[] = [];\n\n        if (reactElement.props && reactElement.props.children) {\n          childrenNodes = React.Children.toArray(\n            reactElement.props.children\n          ).reduce<NodeTree[]>((accum, child: any) => {\n            if (React.isValidElement(child)) {\n              accum.push(_().parseReactElement(child).toNodeTree(normalize));\n            }\n            return accum;\n          }, []);\n        }\n\n        return mergeTrees(node, childrenNodes);\n      },\n    }),\n\n    parseSerializedNode: (serializedNode: SerializedNode) => ({\n      toNode(normalize?: (node: Node) => void): Node {\n        const data = deserializeNode(serializedNode, state.options.resolver);\n        invariant(data.type, ERROR_NOT_IN_RESOLVER);\n\n        const id = typeof normalize === 'string' && normalize;\n\n        if (id) {\n          deprecationWarning(`query.parseSerializedNode(...).toNode(id)`, {\n            suggest: `query.parseSerializedNode(...).toNode(node => node.id = id)`,\n          });\n        }\n\n        return _()\n          .parseFreshNode({\n            ...(id ? { id } : {}),\n            data,\n          })\n          .toNode(!id && normalize);\n      },\n    }),\n\n    parseFreshNode: (node: FreshNode) => ({\n      toNode(normalize?: (node: Node) => void): Node {\n        return createNode(node, (node) => {\n          if (node.data.parent === DEPRECATED_ROOT_NODE) {\n            node.data.parent = ROOT_NODE;\n          }\n\n          const name = resolveComponent(state.options.resolver, node.data.type);\n          invariant(name !== null, ERROR_NOT_IN_RESOLVER);\n          node.data.displayName = node.data.displayName || name;\n          node.data.name = name;\n\n          if (normalize) {\n            normalize(node);\n          }\n        });\n      },\n    }),\n\n    createNode(reactElement: React.ReactElement, extras?: any) {\n      deprecationWarning(`query.createNode(${reactElement})`, {\n        suggest: `query.parseReactElement(${reactElement}).toNodeTree()`,\n      });\n\n      const tree = this.parseReactElement(reactElement).toNodeTree();\n\n      const node = tree.nodes[tree.rootNodeId];\n\n      if (!extras) {\n        return node;\n      }\n\n      if (extras.id) {\n        node.id = extras.id;\n      }\n\n      if (extras.data) {\n        node.data = {\n          ...node.data,\n          ...extras.data,\n        };\n      }\n\n      return node;\n    },\n\n    getState() {\n      return state;\n    },\n  };\n}\n"]}