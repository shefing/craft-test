{
  "version": 3,
  "sources": ["../../@egjs/agent/src/utils.ts", "../../@egjs/agent/src/presets.ts", "../../@egjs/agent/src/userAgent.ts", "../../@egjs/agent/src/userAgentData.ts", "../../@egjs/agent/src/agent.ts", "../../react-css-styled/src/react-css-styled/StyledElement.tsx", "../../react-css-styled/src/react-css-styled/styled.tsx", "../../react-moveable/src/ables/AbleManager.ts", "../../react-moveable/src/consts.ts", "../../react-moveable/src/gesto/CustomGesto.ts", "../../react-moveable/src/utils/calculateElementPosition.ts", "../../react-moveable/src/gesto/GestoUtils.ts", "../../react-moveable/src/gesto/GestoData.ts", "../../react-moveable/src/utils/getMatrixStackInfo.ts", "../../react-moveable/src/store/Store.ts", "../../react-moveable/src/groupUtils.ts", "../../react-moveable/src/renderDirections.tsx", "../../react-moveable/src/ables/snappable/bounds.ts", "../../react-moveable/src/ables/snappable/utils.ts", "../../react-moveable/src/ables/snappable/snap.ts", "../../react-moveable/src/ables/snappable/innerBounds.ts", "../../react-moveable/src/ables/snappable/snapBounds.ts", "../../react-moveable/src/ables/Draggable.tsx", "../../react-moveable/src/utils/getFixedDirection.ts", "../../react-moveable/src/ables/Resizable.ts", "../../react-moveable/src/ables/Rotatable.tsx", "../../react-moveable/src/ables/snappable/render.tsx", "../../react-moveable/src/ables/snappable/getTotalGuidelines.ts", "../../react-moveable/src/ables/Snappable.tsx", "../../react-moveable/src/utils.tsx", "../../react-moveable/src/ables/Pinchable.ts", "../../react-moveable/src/ables/Scalable.ts", "../../react-moveable/src/ables/Warpable.tsx", "../../react-moveable/src/classNames.ts", "../../react-moveable/src/ables/DragArea.tsx", "../../react-moveable/src/ables/Origin.tsx", "../../react-moveable/src/ables/Scrollable.ts", "../../react-moveable/src/ables/Default.ts", "../../react-moveable/src/ables/Padding.tsx", "../../react-moveable/src/ables/roundable/borderRadius.tsx", "../../react-moveable/src/ables/clippable/utils.tsx", "../../react-moveable/src/ables/Clippable.tsx", "../../react-moveable/src/ables/OriginDraggable.tsx", "../../react-moveable/src/ables/Roundable.tsx", "../../react-moveable/src/ables/BeforeRenderable.ts", "../../react-moveable/src/ables/Renderable.ts", "../../react-moveable/src/gesto/getAbleGesto.ts", "../../react-moveable/src/EventManager.ts", "../../react-moveable/src/utils/calculateMatrixStack.ts", "../../react-moveable/src/utils/getElementInfo.ts", "../../react-moveable/src/utils/getMoveableTargetInfo.ts", "../../react-moveable/src/utils/persist.ts", "../../react-moveable/src/MoveableManager.tsx", "../../react-moveable/src/ables/Groupable.tsx", "../../react-moveable/src/ables/Clickable.ts", "../../react-moveable/src/ables/edgeDraggable.tsx", "../../react-moveable/src/ables/IndividualGroupable.tsx", "../../react-moveable/src/ables/consts.ts", "../../react-moveable/src/Snappable/utils.ts", "../../react-moveable/src/MoveableGroup.tsx", "../../react-moveable/src/MoveableIndividualGroup.tsx", "../../react-moveable/src/InitialMoveable.tsx", "../../react-moveable/src/Moveable.tsx", "../../react-moveable/src/makeMoveable.ts"],
  "sourcesContent": ["import { PresetInfo, PresetResult, NavigatorUABrandVersion } from \"./types\";\n\nexport function some<T>(arr: T[], callback: (value: T, index: number) => any): boolean {\n    const length = arr.length;\n\n    for (let i = 0; i < length; ++i) {\n        if (callback(arr[i], i)) {\n            return true;\n        }\n    }\n\n    return false;\n}\nexport function find<T>(arr: T[], callback: (value: T, index: number) => any): T | null {\n    const length = arr.length;\n\n    for (let i = 0; i < length; ++i) {\n        if (callback(arr[i], i)) {\n            return arr[i];\n        }\n    }\n    return null;\n}\nexport function getUserAgentString(agent?: string): string {\n    let userAgent = agent;\n    if (typeof userAgent === \"undefined\") {\n        if (typeof navigator === \"undefined\" || !navigator) {\n            return \"\";\n        }\n\n        userAgent = navigator.userAgent || \"\";\n    }\n    return userAgent!.toLowerCase();\n}\nexport function execRegExp(pattern: string, text: string): RegExpExecArray | null {\n    try {\n        return new RegExp(pattern, \"g\").exec(text);\n    } catch (e) {\n        return null;\n    }\n}\nexport function hasUserAgentData(): boolean {\n    if (typeof navigator === \"undefined\" || !navigator || !navigator.userAgentData) {\n        return false;\n    }\n    const userAgentData = navigator.userAgentData;\n    const brands = (userAgentData.brands || userAgentData.uaList);\n\n    return !!(brands && brands.length);\n}\nexport function findVersion(versionTest: string, userAgent: string): string {\n    const result = execRegExp(`(${versionTest})((?:\\\\/|\\\\s|:)([0-9|\\\\.|_]+))`, userAgent);\n\n    return result ? result[3] : \"\";\n}\nexport function convertVersion(text: string): string {\n    return text.replace(/_/g, \".\");\n}\nexport function findPreset(presets: PresetInfo[], userAgent: string): PresetResult {\n    let userPreset: PresetInfo | null = null;\n    let version = \"-1\";\n\n    some(presets, preset => {\n        const result = execRegExp(`(${preset.test})((?:\\\\/|\\\\s|:)([0-9|\\\\.|_]+))?`, userAgent);\n\n        if (!result || preset.brand) {\n            return false;\n        }\n        userPreset = preset;\n        version = result[3] || \"-1\";\n\n        if (preset.versionAlias) {\n            version = preset.versionAlias;\n        } else if (preset.versionTest) {\n            version = findVersion(preset.versionTest.toLowerCase(), userAgent) || version;\n        }\n        version = convertVersion(version);\n        return true;\n    });\n\n    return {\n        preset: userPreset,\n        version,\n    };\n}\nexport function findPresetBrand(presets: PresetInfo[], brands: NavigatorUABrandVersion[]): NavigatorUABrandVersion {\n    const brandInfo = {\n        brand: \"\",\n        version: \"-1\",\n    };\n    some(presets, preset => {\n        const result = findBrand(brands, preset);\n\n        if (!result) {\n            return false;\n        }\n\n        brandInfo.brand = preset.id;\n        brandInfo.version = preset.versionAlias || result.version;\n\n        return brandInfo.version !== \"-1\";\n    });\n\n    return brandInfo;\n}\nexport function findBrand(brands: NavigatorUABrandVersion[], preset: PresetInfo): NavigatorUABrandVersion | null {\n    return find(brands, ({ brand }) => {\n        return execRegExp(`${preset.test}`, brand.toLowerCase());\n    });\n}\n", "import { PresetInfo } from \"./types\";\n\nexport const BROWSER_PRESETS: PresetInfo[] = [\n    {\n        test: \"phantomjs\",\n        id: \"phantomjs\",\n    },\n    {\n        test: \"whale\",\n        id: \"whale\",\n    }, {\n        test: \"edgios|edge|edg\",\n        id: \"edge\",\n    },\n    {\n        test: \"msie|trident|windows phone\",\n        id: \"ie\",\n        versionTest: \"iemobile|msie|rv\",\n    },\n    {\n        test: \"miuibrowser\",\n        id: \"miui browser\",\n    },\n    {\n        test: \"samsungbrowser\",\n        id: \"samsung internet\",\n    },\n    {\n        test: \"samsung\",\n        id: \"samsung internet\",\n        versionTest: \"version\",\n    },\n    {\n        test: \"chrome|crios\",\n        id: \"chrome\",\n    },\n    {\n        test: \"firefox|fxios\",\n        id: \"firefox\",\n    },\n    {\n        test: \"android\",\n        id: \"android browser\",\n        versionTest: \"version\",\n    },\n    {\n        test: \"safari|iphone|ipad|ipod\",\n        id: \"safari\",\n        versionTest: \"version\",\n    },\n];\n\n// chromium's engine(blink) is based on applewebkit 537.36.\nexport const CHROMIUM_PRESETS: PresetInfo[] = [\n    {\n        test: \"(?=.*applewebkit/(53[0-7]|5[0-2]|[0-4]))(?=.*\\\\schrome)\",\n        id: \"chrome\",\n        versionTest: \"chrome\",\n    },\n    {\n        test: \"chromium\",\n        id: \"chrome\",\n    },\n    {\n        test: \"whale\",\n        id: \"chrome\",\n        versionAlias: \"-1\",\n        brand: true,\n    },\n];\nexport const WEBKIT_PRESETS: PresetInfo[] = [\n    {\n        test: \"applewebkit\",\n        id: \"webkit\",\n        versionTest: \"applewebkit|safari\",\n    },\n];\nexport const WEBVIEW_PRESETS: PresetInfo[] = [\n    {\n        test: \"(?=(iphone|ipad))(?!(.*version))\",\n        id: \"webview\",\n    },\n    {\n        test: \"(?=(android|iphone|ipad))(?=.*(naver|daum|; wv))\",\n        id: \"webview\",\n    },\n    {\n        // test webview\n        test: \"webview\",\n        id: \"webview\",\n    },\n];\nexport const OS_PRESETS: PresetInfo[] = [\n    {\n        test: \"windows phone\",\n        id: \"windows phone\",\n    },\n    {\n        test: \"windows 2000\",\n        id: \"window\",\n        versionAlias: \"5.0\",\n    },\n    {\n        test: \"windows nt\",\n        id: \"window\",\n    },\n    {\n        test: \"win32|windows\",\n        id: \"window\",\n    },\n    {\n        test: \"iphone|ipad|ipod\",\n        id: \"ios\",\n        versionTest: \"iphone os|cpu os\",\n    },\n    {\n        test: \"macos|macintel|mac os x\",\n        id: \"mac\",\n    },\n    {\n        test: \"android|linux armv81\",\n        id: \"android\",\n    },\n    {\n        test: \"tizen\",\n        id: \"tizen\",\n    },\n    {\n        test: \"webos|web0s\",\n        id: \"webos\",\n    },\n    // {\n    //     test: \"linux|ubuntu|debian\",\n    //     id: \"linux\",\n    //     versionAlias: \"-1\",\n    // },\n];\n", "import { AgentInfo } from \"./types\";\nimport { getUserAgentString, findPreset } from \"./utils\";\nimport { WEBVIEW_PRESETS, CHROMIUM_PRESETS, BROWSER_PRESETS, OS_PRESETS, WEBKIT_PRESETS } from \"./presets\";\n\nexport function isWebView(userAgent: string): boolean {\n    return !!findPreset(WEBVIEW_PRESETS, userAgent).preset;\n}\n\nexport function getLegacyAgent(userAgent?: string): AgentInfo {\n    const nextAgent = getUserAgentString(userAgent);\n    const isMobile = !!/mobi/g.exec(nextAgent);\n    const browser = {\n        name: \"unknown\",\n        version: \"-1\",\n        majorVersion: -1,\n        webview: isWebView(nextAgent),\n        chromium: false,\n        chromiumVersion: \"-1\",\n        webkit: false,\n        webkitVersion: \"-1\",\n    };\n    const os = {\n        name: \"unknown\",\n        version: \"-1\",\n        majorVersion: -1,\n    };\n    const {\n        preset: browserPreset,\n        version: browserVersion,\n    } = findPreset(BROWSER_PRESETS, nextAgent);\n\n    const {\n        preset: osPreset,\n        version: osVersion,\n    } = findPreset(OS_PRESETS, nextAgent);\n\n    const chromiumPreset = findPreset(CHROMIUM_PRESETS, nextAgent);\n\n    browser.chromium = !!chromiumPreset.preset;\n    browser.chromiumVersion = chromiumPreset.version;\n    if (!browser.chromium) {\n        const webkitPreset = findPreset(WEBKIT_PRESETS, nextAgent);\n\n        browser.webkit = !!webkitPreset.preset;\n        browser.webkitVersion = webkitPreset.version;\n    }\n\n    if (osPreset) {\n        os.name = osPreset.id;\n        os.version = osVersion;\n        os.majorVersion = parseInt(osVersion, 10);\n    }\n    if (browserPreset) {\n        browser.name = browserPreset.id;\n        browser.version = browserVersion;\n\n        // Early whale bugs\n        if (browser.webview && os.name === \"ios\" && browser.name !== \"safari\") {\n            browser.webview = false;\n        }\n    }\n    browser.majorVersion = parseInt(browser.version, 10);\n\n    return {\n        browser,\n        os,\n        isMobile,\n        isHints: false,\n    };\n}\n", "import { UADataValues, AgentInfo, AgentBrowserInfo, AgentOSInfo } from \"./types\";\nimport { some, find, findBrand, convertVersion, findPresetBrand, getUserAgentString } from \"./utils\";\nimport { BROWSER_PRESETS, OS_PRESETS, CHROMIUM_PRESETS, WEBKIT_PRESETS, WEBVIEW_PRESETS } from \"./presets\";\nimport { isWebView } from \"./userAgent\";\n\nexport function getClientHintsAgent(osData?: UADataValues): AgentInfo {\n    const userAgentData = navigator.userAgentData;\n    const brands = [...(userAgentData.uaList || userAgentData.brands)!];\n    const fullVersionList = osData && osData.fullVersionList;\n    const isMobile = userAgentData.mobile || false;\n    const firstBrand = brands[0];\n    const platform = (osData && osData.platform || userAgentData.platform || navigator.platform).toLowerCase();\n    const browser: AgentBrowserInfo = {\n        name: firstBrand.brand,\n        version: firstBrand.version,\n        majorVersion: -1,\n        webkit: false,\n        webkitVersion: \"-1\",\n        chromium: false,\n        chromiumVersion: \"-1\",\n        webview: !!findPresetBrand(WEBVIEW_PRESETS, brands).brand || isWebView(getUserAgentString()),\n    };\n    const os: AgentOSInfo = {\n        name: \"unknown\",\n        version: \"-1\",\n        majorVersion: -1,\n    };\n    browser.webkit = !browser.chromium && some(WEBKIT_PRESETS, preset => findBrand(brands, preset));\n\n    const chromiumBrand = findPresetBrand(CHROMIUM_PRESETS, brands);\n\n    browser.chromium = !!chromiumBrand.brand;\n    browser.chromiumVersion = chromiumBrand.version;\n    if (!browser.chromium) {\n        const webkitBrand = findPresetBrand(WEBKIT_PRESETS, brands);\n\n        browser.webkit = !!webkitBrand.brand;\n        browser.webkitVersion = webkitBrand.version;\n    }\n\n    const platfomResult = find(OS_PRESETS, preset => {\n        return new RegExp(`${preset.test}`, \"g\").exec(platform);\n    });\n    os.name = platfomResult ? platfomResult.id : \"\";\n\n    if (osData) {\n        os.version = osData.platformVersion;\n    }\n    if (fullVersionList && fullVersionList.length) {\n        const browserBrandByFullVersionList = findPresetBrand(BROWSER_PRESETS, fullVersionList);\n\n        browser.name = browserBrandByFullVersionList.brand || browser.name;\n        browser.version = browserBrandByFullVersionList.version || browser.version;\n    } else {\n        const browserBrand = findPresetBrand(BROWSER_PRESETS, brands);\n\n        browser.name = browserBrand.brand || browser.name;\n        browser.version = browserBrand.brand && osData ? osData.uaFullVersion : browserBrand.version;\n    }\n    if (browser.webkit) {\n        os.name = isMobile ? \"ios\" : \"mac\";\n    }\n    if (os.name === \"ios\" && browser.webview) {\n        browser.version = \"-1\";\n    }\n\n    os.version = convertVersion(os.version);\n    browser.version = convertVersion(browser.version);\n    os.majorVersion = parseInt(os.version, 10);\n    browser.majorVersion = parseInt(browser.version, 10);\n\n    return {\n        browser,\n        os,\n        isMobile,\n        isHints: true,\n    };\n}\n", "import { AgentInfo } from \"./types\";\nimport { hasUserAgentData } from \"./utils\";\nimport { getClientHintsAgent } from \"./userAgentData\";\nimport { getLegacyAgent } from \"./userAgent\";\n\n/**\n * @namespace eg.agent\n */\n\n/**\n* Extracts accuate browser and operating system information from the user agent string or client hints.\n* @ko 유저 에이전트 문자열 또는 client hints에서 정확한 브라우저와 운영체제 정보를 추출한다.\n* @function eg.agent#getAccurateAgent\n* @param - Callback function to get the accuate agent <ko>정확한 에이전트를 가져오기 위한 callback 함수</ko>\n* @return - get the accuate agent promise. If Promise are not supported, null is returned. <ko> 정확한 에이전트 promise를 가져온다. Promise를 지원 하지 않는 경우, null을 반환한다. </ko>\n* @example\nimport { getAccurateAgent } from \"@egjs/agent\";\n// eg.agent.getAccurateAgent()\ngetAccurateAgent().then(agent => {\n   const { os, browser, isMobile } = agent;\n});\ngetAccurateAgent(agent => {\n    const { os, browser, isMobile } = agent;\n});\n*/\nexport function getAccurateAgent(callback?: (result: AgentInfo) => void): Promise<AgentInfo> | null {\n    if (hasUserAgentData()) {\n        return navigator.userAgentData.getHighEntropyValues([\n            \"architecture\",\n            \"model\",\n            \"platform\",\n            \"platformVersion\",\n            \"uaFullVersion\",\n            \"fullVersionList\",\n        ]).then(info => {\n            const agentInfo = getClientHintsAgent(info);\n\n            callback && callback(agentInfo);\n            return agentInfo;\n        });\n    }\n    callback && callback(agent());\n    if (typeof Promise === \"undefined\" || !Promise) {\n        return null;\n    }\n    return Promise.resolve(agent());\n}\n\n\n\n/**\n * Extracts browser and operating system information from the user agent string.\n * @ko 유저 에이전트 문자열에서 브라우저와 운영체제 정보를 추출한다.\n * @function eg.agent#agent\n * @param - user agent string to parse <ko>파싱할 유저에이전트 문자열</ko>\n * @return - agent Info <ko> 에이전트 정보 </ko>\n * @example\nimport agent from \"@egjs/agent\";\n// eg.agent();\nconst { os, browser, isMobile } = agent();\n */\nfunction agent(userAgent?: string): AgentInfo {\n    if (typeof userAgent === \"undefined\" && hasUserAgentData()) {\n        return getClientHintsAgent();\n    } else {\n        return getLegacyAgent(userAgent);\n    }\n}\nexport { getLegacyAgent };\n\nexport default agent;\n\nexport * from \"./types\";\n", "import { Component, createElement, version } from \"react\";\nimport { IObject } from \"@daybrush/utils\";\nimport { StyledInjector, InjectResult } from \"css-styled\";\nimport { ref } from \"framework-utils\";\n\nexport class StyledElement<T extends HTMLElement | SVGElement = HTMLElement> extends Component<IObject<any>> {\n    public injector!: StyledInjector;\n    public element!: T;\n    public injectResult: InjectResult | null = null;\n    public tag: string = \"div\";\n    public render(): any {\n        const {\n            className = \"\",\n            cspNonce,\n            portalContainer,\n            ...attributes\n        } = this.props;\n        const cssId = this.injector!.className;\n        const Tag = this.tag;\n        let portalAttributes: Record<string, any> = {};\n\n        if ((version || \"\").indexOf(\"simple\") > -1 && portalContainer) {\n            portalAttributes = { portalContainer };\n        }\n\n        return createElement(Tag, {\n            \"ref\": ref(this, \"element\"),\n            \"data-styled-id\": cssId,\n            \"className\": `${className} ${cssId}`,\n            ...portalAttributes,\n            ...attributes,\n        });\n    }\n    public componentDidMount() {\n        this.injectResult = this.injector!.inject(this.element!, {\n            nonce: this.props.cspNonce,\n        });\n    }\n    public componentWillUnmount() {\n        this.injectResult!.destroy();\n        this.injectResult = null;\n    }\n    public getElement() {\n        return this.element;\n    }\n}\n", "import cssStyled from \"css-styled\";\nimport {\n    createElement, forwardRef,\n    ForwardRefExoticComponent,\n    PropsWithoutRef,\n    useEffect,\n    useImperativeHandle,\n    useRef,\n} from \"react\";\nimport { StyledElement } from \"./StyledElement\";\n\nexport default function defaultStyled<T extends HTMLElement | SVGElement = HTMLElement>(\n    tag: string, css: string): typeof StyledElement & (new (...args: any[]) => StyledElement<T>) {\n    const injector = cssStyled(css);\n\n    return class Styled extends StyledElement<T> {\n        public injector = injector;\n        public tag = tag;\n    };\n}\n\n\nexport function styled<\n    Target extends HTMLElement | SVGElement = HTMLElement,\n    Props extends Record<string, any> = Record<string, any>,\n>(\n    Tag: string,\n    css: string\n): ForwardRefExoticComponent<PropsWithoutRef<Props> & React.RefAttributes<Target>> {\n    const injector = cssStyled(css);\n    const cssId = injector!.className;\n\n    return forwardRef<Target, Props>((props, ref) => {\n        const {\n            className = \"\",\n            cspNonce,\n            ...attributes\n        } = props;\n        const targetRef = useRef<Target>();\n\n        useImperativeHandle(ref, () => targetRef.current!, []);\n        useEffect(() => {\n            const injectResult = injector.inject(targetRef.current!, {\n                nonce: props.cspNonce,\n            });\n\n            return () => {\n                injectResult.destroy();\n            };\n        }, []);\n        return createElement(Tag, {\n            \"ref\": targetRef,\n            \"data-styled-id\": cssId,\n            \"className\": `${className} ${cssId}`,\n            ...attributes,\n        });\n    });\n}\n", "import { Able } from \"../types\";\n\nexport function makeAble<\n    Name extends string,\n    AbleObject extends Partial<Able<any, any>>,\n>(name: Name, able: AbleObject) {\n    return {\n        events: [] as AbleObject[\"events\"] extends readonly any[] ? AbleObject[\"events\"] : readonly [],\n        props: [] as AbleObject[\"props\"] extends readonly any[] ? AbleObject[\"props\"] : readonly [],\n        name,\n        ...able,\n    } as const;\n}\n", "import getAgent from \"@egjs/agent\";\nimport { IObject } from \"@daybrush/utils\";\nimport { MoveableInterface } from \"./types\";\n\n\nexport const DIRECTIONS4 = [\"n\", \"w\", \"s\", \"e\"];\nexport const DIRECTIONS = [\"n\", \"w\", \"s\", \"e\", \"nw\", \"ne\", \"sw\", \"se\"];\n\n\nfunction getSVGCursor(scale: number, degree: number) {\n    return `data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${32 * scale}px\" height=\"${32 * scale}px\" viewBox=\"0 0 32 32\" ><path d=\"M 16,5 L 12,10 L 14.5,10 L 14.5,22 L 12,22 L 16,27 L 20,22 L 17.5,22 L 17.5,10 L 20, 10 L 16,5 Z\" stroke-linejoin=\"round\" stroke-width=\"1.2\" fill=\"black\" stroke=\"white\" style=\"transform:rotate(${degree}deg);transform-origin: 16px 16px\"></path></svg>`;\n}\nfunction getCursorCSS(degree: number) {\n    const x1 = getSVGCursor(1, degree);\n    // const x2 = getSVGCursor(2, degree);\n    const degree45 = (Math.round(degree / 45) * 45) % 180;\n    let defaultCursor = \"ns-resize\";\n\n    if (degree45 === 135) {\n        defaultCursor = \"nwse-resize\";\n    } else if (degree45 === 45) {\n        defaultCursor = \"nesw-resize\";\n    } else if (degree45 === 90) {\n        defaultCursor = \"ew-resize\";\n    }\n\n    // tslint:disable-next-line: max-line-length\n    return `cursor:${defaultCursor};cursor: url('${x1}') 16 16, ${defaultCursor};`;\n}\n\nexport const agent = getAgent();\nexport const IS_WEBKIT = agent.browser.webkit;\nexport const IS_WEBKIT605 = IS_WEBKIT && (() => {\n    const navi = typeof window === \"undefined\" ? { userAgent: \"\" } : window.navigator;\n    const res = /applewebkit\\/([^\\s]+)/g.exec(navi.userAgent.toLowerCase());\n\n    return res ? parseFloat(res[1]) < 605 : false;\n})();\n\nconst browserName = agent.browser.name;\nconst browserVersion = parseInt(agent.browser.version, 10);\nconst IS_CHROME = browserName === \"chrome\";\nconst IS_CHROMIUM = agent.browser.chromium;\nconst chromiumVersion = parseInt(agent.browser.chromiumVersion, 10) || 0;\n\nexport const IS_CHROMIUM109 = (IS_CHROME && browserVersion >= 109)\n    || (IS_CHROMIUM && chromiumVersion >= 109);\nexport const IS_FIREFOX = browserName === \"firefox\";\nexport const IS_SAFARI_ABOVE15\n    = parseInt(agent.browser.webkitVersion, 10) >= 612\n    || browserVersion >= 15;\n\nexport const PREFIX = \"moveable-\";\n\n\nconst directionCSS = DIRECTIONS.map(dir => {\n    let top = \"\";\n    let left = \"\";\n    let originX = \"center\";\n    let originY = \"center\";\n    const offset =  `calc(var(--moveable-control-padding, 20) * -1px)`;\n\n    if (dir.indexOf(\"n\") > -1) {\n        top = `top: ${offset};`;\n        originY = `bottom`;\n    }\n    if (dir.indexOf(`s`) > -1) {\n        top = `top: 0px;`;\n        originY = `top`;\n    }\n    if (dir.indexOf(`w`) > -1) {\n        left = `left: ${offset};`;\n        originX = `right`;\n    }\n    if (dir.indexOf(`e`) > -1) {\n        left = `left: 0px;`;\n        originX = `left`;\n    }\n    return `.around-control[data-direction*=\"${dir}\"] {\n        ${left}${top}\n        transform-origin: ${originX} ${originY};\n    }`;\n}).join(\"\\n\");\n\nexport const MOVEABLE_CSS = `\n{\nposition: absolute;\nwidth: 1px;\nheight: 1px;\nleft: 0;\ntop: 0;\nz-index: 3000;\n--moveable-color: #4af;\n--zoom: 1;\n--zoompx: 1px;\n--moveable-line-padding: 0;\n--moveable-control-padding: 0;\nwill-change: transform;\noutline: 1px solid transparent;\n}\n.control-box {\nz-index: 0;\n}\n.line, .control {\nposition: absolute;\nleft: 0;\ntop: 0;\nwill-change: transform;\n}\n.control {\nwidth: 14px;\nheight: 14px;\nborder-radius: 50%;\nborder: 2px solid #fff;\nbox-sizing: border-box;\nbackground: #4af;\nbackground: var(--moveable-color);\nmargin-top: -7px;\nmargin-left: -7px;\nborder: 2px solid #fff;\nz-index: 10;\n}\n.around-control {\nposition: absolute;\nwill-change: transform;\nwidth: calc(var(--moveable-control-padding, 20) * 1px);\nheight: calc(var(--moveable-control-padding, 20) * 1px);\nleft: calc(var(--moveable-control-padding, 20) * -0.5px);\ntop: calc(var(--moveable-control-padding, 20) * -0.5px);\nbox-sizing: border-box;\nbackground: transparent;\nz-index: 8;\ncursor: alias;\ntransform-origin: center center;\n}\n${directionCSS}\n.padding {\nposition: absolute;\ntop: 0px;\nleft: 0px;\nwidth: 100px;\nheight: 100px;\ntransform-origin: 0 0;\n}\n.line {\nwidth: 1px;\nheight: 1px;\nbackground: #4af;\nbackground: var(--moveable-color);\ntransform-origin: 0px 50%;\n}\n.line.edge {\nz-index: 1;\nbackground: transparent;\n}\n.line.dashed {\nbox-sizing: border-box;\nbackground: transparent;\n}\n.line.dashed.horizontal {\nborder-top: 1px dashed #4af;\nborder-top-color: #4af;\nborder-top-color: var(--moveable-color);\n}\n.line.dashed.vertical {\nborder-left: 1px dashed #4af;\nborder-left-color: #4af;\nborder-left-color: var(--moveable-color);\n}\n.line.vertical {\ntransform: translateX(-50%);\n}\n.line.horizontal {\ntransform: translateY(-50%);\n}\n.line.vertical.bold {\nwidth: 2px;\n}\n.line.horizontal.bold {\nheight: 2px;\n}\n\n.control.origin {\nborder-color: #f55;\nbackground: #fff;\nwidth: 12px;\nheight: 12px;\nmargin-top: -6px;\nmargin-left: -6px;\npointer-events: none;\n}\n${[0, 15, 30, 45, 60, 75, 90, 105, 120, 135, 150, 165].map(degree => `\n.direction[data-rotation=\"${degree}\"], :global .view-control-rotation${degree} {\n${getCursorCSS(degree)}\n}\n`).join(\"\\n\")}\n\n.line.direction:before {\ncontent: \"\";\nposition: absolute;\nwidth: 100%;\nheight: calc(var(--moveable-line-padding, 0) * 1px);\nbottom: 0;\nleft: 0;\n}\n.group {\nz-index: -1;\n}\n.area {\nposition: absolute;\n}\n.area-pieces {\nposition: absolute;\ntop: 0;\nleft: 0;\ndisplay: none;\n}\n.area.avoid, .area.pass {\npointer-events: none;\n}\n.area.avoid+.area-pieces {\ndisplay: block;\n}\n.area-piece {\nposition: absolute;\n}\n\n${IS_WEBKIT605 ? `:global svg *:before {\ncontent:\"\";\ntransform-origin: inherit;\n}` : \"\"}\n`;\n\nexport const NEARBY_POS = [\n    [0, 1, 2],\n    [1, 0, 3],\n    [2, 0, 3],\n    [3, 1, 2],\n];\n\nexport const FLOAT_POINT_NUM = 0.0001;\nexport const TINY_NUM = 0.0000001;\nexport const MIN_SCALE = 0.000000001;\nexport const MAX_NUM = Math.pow(10, 10);\nexport const MIN_NUM = -MAX_NUM;\n\nexport const DIRECTION_REGION_TO_DIRECTION: Record<string, number[]> = {\n    n: [0, -1],\n    e: [1, 0],\n    s: [0, 1],\n    w: [-1, 0],\n    nw: [-1, -1],\n    ne: [1, -1],\n    sw: [-1, 1],\n    se: [1, 1],\n};\n\nexport const DIRECTION_INDEXES: IObject<number[]> = {\n    n: [0, 1],\n    e: [1, 3],\n    s: [3, 2],\n    w: [2, 0],\n    nw: [0],\n    ne: [1],\n    sw: [2],\n    se: [3],\n};\nexport const DIRECTION_ROTATIONS: IObject<number> = {\n    n: 0,\n    s: 180,\n    w: 270,\n    e: 90,\n    nw: 315,\n    ne: 45,\n    sw: 225,\n    se: 135,\n};\n\nexport const MOVEABLE_METHODS: Array<keyof MoveableInterface> = [\n    \"isMoveableElement\",\n    \"updateRect\",\n    \"updateTarget\",\n    \"destroy\",\n    \"dragStart\",\n    \"isInside\",\n    \"hitTest\",\n    \"setState\",\n    \"getRect\",\n    \"request\",\n    \"isDragging\",\n    \"getManager\",\n    \"forceUpdate\",\n    \"waitToChangeTarget\",\n    \"updateSelectors\",\n    \"getTargets\",\n    \"stopDrag\",\n    \"getControlBoxElement\",\n    \"getMoveables\",\n    \"getDragElement\",\n];\n", "import { MoveableManagerState, OnCustomDrag } from \"../types\";\nimport { convertDragDist } from \"../utils\";\n\nexport function setCustomDrag(\n    e: any,\n    state: MoveableManagerState<any>,\n    delta: number[],\n    isPinch: boolean,\n    isConvert: boolean,\n    ableName = \"draggable\",\n) {\n    const result = state.gestos[ableName]?.move(delta, e.inputEvent) ?? {};\n    const datas = result.originalDatas || result.datas;\n    const ableDatas = datas[ableName] || (datas[ableName] = {});\n\n    return {\n        ...(isConvert ? convertDragDist(state, result) : result),\n        isPinch: !!isPinch,\n        parentEvent: true,\n        datas: ableDatas,\n        originalDatas: e.originalDatas,\n    };\n}\n\nexport default class CustomGesto {\n    private prevX = 0;\n    private prevY = 0;\n    private startX = 0;\n    private startY = 0;\n    private isDrag = false;\n    private isFlag = false;\n    private datas: any = {\n        draggable: {},\n    };\n    constructor(private ableName = \"draggable\") {\n        this.datas = {\n            [ableName]: {},\n        };\n    }\n\n    public dragStart(client: number[], e: any) {\n        this.isDrag = false;\n        this.isFlag = false;\n        const originalDatas = e.originalDatas;\n\n        this.datas = originalDatas;\n        if (!originalDatas[this.ableName]) {\n            originalDatas[this.ableName] = {};\n        }\n        return {\n            ...this.move(client, e.inputEvent),\n            type: \"dragstart\",\n        };\n    }\n    public drag(client: number[], inputEvent: any) {\n        return this.move([\n            client[0] - this.prevX,\n            client[1] - this.prevY,\n        ], inputEvent);\n    }\n    public move(delta: number[], inputEvent: any): OnCustomDrag {\n        let clientX!: number;\n        let clientY!: number;\n        let isFirstDrag = false;\n\n        if (!this.isFlag) {\n            this.prevX = delta[0];\n            this.prevY = delta[1];\n            this.startX = delta[0];\n            this.startY = delta[1];\n\n            clientX = delta[0];\n            clientY = delta[1];\n\n            this.isFlag = true;\n        } else {\n            const isPrevDrag = this.isDrag;\n\n            clientX = this.prevX + delta[0];\n            clientY = this.prevY + delta[1];\n\n            if (delta[0] || delta[1]) {\n                this.isDrag = true;\n            }\n\n            if (!isPrevDrag && this.isDrag) {\n                isFirstDrag = true;\n            }\n        }\n\n        this.prevX = clientX;\n        this.prevY = clientY;\n\n        return {\n            type: \"drag\",\n            clientX,\n            clientY,\n            inputEvent,\n            isFirstDrag,\n            isDrag: this.isDrag,\n            distX: clientX - this.startX,\n            distY: clientY - this.startY,\n            deltaX: delta[0],\n            deltaY: delta[1],\n            datas: this.datas[this.ableName],\n            originalDatas: this.datas,\n            parentEvent: true,\n            parentGesto: this,\n        };\n    }\n}\n", "import { MoveablePosition } from \"../types\";\nimport { calculatePoses, calculatePosition, sign } from \"../utils\";\n\nexport function calculateElementPosition(\n    matrix: number[],\n    origin: number[],\n    width: number,\n    height: number,\n): MoveablePosition {\n    const is3d = matrix.length === 16;\n    const n = is3d ? 4 : 3;\n    const poses = calculatePoses(matrix, width, height, n);\n    let [\n        [x1, y1],\n        [x2, y2],\n        [x3, y3],\n        [x4, y4],\n    ] = poses;\n    let [originX, originY] = calculatePosition(matrix, origin, n);\n\n    const left = Math.min(x1, x2, x3, x4);\n    const top = Math.min(y1, y2, y3, y4);\n    const right = Math.max(x1, x2, x3, x4);\n    const bottom = Math.max(y1, y2, y3, y4);\n\n    x1 = (x1 - left) || 0;\n    x2 = (x2 - left) || 0;\n    x3 = (x3 - left) || 0;\n    x4 = (x4 - left) || 0;\n\n    y1 = (y1 - top) || 0;\n    y2 = (y2 - top) || 0;\n    y3 = (y3 - top) || 0;\n    y4 = (y4 - top) || 0;\n\n    originX = (originX - left) || 0;\n    originY = (originY - top) || 0;\n\n\n    const sx = matrix[0];\n    const sy = matrix[n + 1];\n    const direction = sign(sx * sy);\n\n    return {\n        left,\n        top,\n        right,\n        bottom,\n        origin: [originX, originY],\n        pos1: [x1, y1],\n        pos2: [x2, y2],\n        pos3: [x3, y3],\n        pos4: [x4, y4],\n        direction,\n    };\n}\n", "\nimport {\n    invert, calculate, minus, plus,\n    convertPositionMatrix,\n    createScaleMatrix, multiply, fromTranslation, convertDimension,\n} from \"@scena/matrix\";\nimport {\n    calculatePoses, getAbsoluteMatrix, getAbsolutePosesByState,\n    calculatePosition, calculateInversePosition, convertTransformInfo, fillCSSObject,\n} from \"../utils\";\nimport { splitUnit, isArray, splitSpace, findIndex, dot, find, isString } from \"@daybrush/utils\";\nimport {\n    MoveableManagerState, ResizableProps, MoveableManagerInterface,\n    OnTransformEvent, OnTransformStartEvent, DraggableProps, OnDrag,\n} from \"../types\";\nimport { setCustomDrag } from \"./CustomGesto\";\nimport { parse, parseMat } from \"css-to-mat\";\nimport { Draggable } from \"../index.esm\";\nimport { calculateElementPosition } from \"../utils/calculateElementPosition\";\n\nexport function calculatePointerDist(moveable: MoveableManagerInterface, e: any) {\n    const { clientX, clientY, datas } = e;\n    const {\n        moveableClientRect,\n        rootMatrix,\n        is3d,\n        pos1,\n    } = moveable.state;\n    const { left, top } = moveableClientRect;\n    const n = is3d ? 4 : 3;\n    const [posX, posY] = minus(calculateInversePosition(rootMatrix, [clientX - left, clientY - top], n), pos1);\n    const [distX, distY] = getDragDist({ datas, distX: posX, distY: posY });\n\n    return [distX, distY];\n}\n\nexport function setDragStart(moveable: MoveableManagerInterface<any>, { datas }: any) {\n    const {\n        allMatrix,\n        beforeMatrix,\n        is3d,\n        left,\n        top,\n        origin,\n        offsetMatrix,\n        targetMatrix,\n        transformOrigin,\n    } = moveable.state;\n    const n = is3d ? 4 : 3;\n\n    datas.is3d = is3d;\n    datas.matrix = allMatrix;\n    datas.targetMatrix = targetMatrix;\n    datas.beforeMatrix = beforeMatrix;\n    datas.offsetMatrix = offsetMatrix;\n    datas.transformOrigin = transformOrigin;\n    datas.inverseMatrix = invert(allMatrix, n);\n    datas.inverseBeforeMatrix = invert(beforeMatrix, n);\n    datas.absoluteOrigin = convertPositionMatrix(plus([left, top], origin), n);\n    datas.startDragBeforeDist = calculate(datas.inverseBeforeMatrix, datas.absoluteOrigin, n);\n    datas.startDragDist = calculate(datas.inverseMatrix, datas.absoluteOrigin, n);\n}\n\nexport function getTransformDirection(e: any) {\n    return calculateElementPosition(e.datas.beforeTransform, [50, 50], 100, 100).direction;\n}\n\n\nexport interface OriginalDataTransformInfos {\n    startTransforms: string[];\n    nextTransforms: string[];\n    nextTransformAppendedIndexes: number[];\n}\n\nexport function resolveTransformEvent(moveable: MoveableManagerInterface, event: any, functionName: string) {\n    const {\n        datas,\n        originalDatas: {\n            beforeRenderable: originalDatas,\n        },\n    } = event;\n\n    const index = datas.transformIndex;\n\n    const nextTransforms = originalDatas.nextTransforms as string[];\n    const length = nextTransforms.length;\n    const nextTransformAppendedIndexes: any[] = originalDatas.nextTransformAppendedIndexes;\n    let nextIndex = -1;\n\n    if (index === -1) {\n        // translate => rotate => scale\n        if (functionName === \"translate\") {\n            nextIndex = 0;\n        } else if (functionName === \"rotate\") {\n            nextIndex = findIndex(nextTransforms, text => text.match(/scale\\(/g,));\n        }\n        if (nextIndex === -1) {\n            nextIndex = nextTransforms.length;\n        }\n        datas.transformIndex = nextIndex;\n    } else if (find(nextTransformAppendedIndexes, info => info.index === index && info.functionName === functionName)) {\n        nextIndex = index;\n    } else {\n        nextIndex = index + nextTransformAppendedIndexes.filter(info => info.index < index).length;\n    }\n\n    const result = convertTransformInfo(nextTransforms, moveable.state, nextIndex);\n    const targetFunction = result.targetFunction;\n    const matFunctionName = functionName === \"rotate\" ? \"rotateZ\" : functionName;\n\n    datas.beforeFunctionTexts = result.beforeFunctionTexts;\n    datas.afterFunctionTexts = result.afterFunctionTexts;\n    datas.beforeTransform = result.beforeFunctionMatrix;\n    datas.beforeTransform2 = result.beforeFunctionMatrix2;\n    datas.targetTansform = result.targetFunctionMatrix;\n    datas.afterTransform = result.afterFunctionMatrix;\n    datas.afterTransform2 = result.afterFunctionMatrix2;\n    datas.targetAllTransform = result.allFunctionMatrix;\n\n    if (targetFunction.functionName === matFunctionName) {\n        datas.afterFunctionTexts.splice(0, 1);\n        datas.isAppendTransform = false;\n    } else if (length > nextIndex) {\n        datas.isAppendTransform = true;\n\n        originalDatas.nextTransformAppendedIndexes = [...nextTransformAppendedIndexes, {\n            functionName,\n            index: nextIndex,\n            isAppend: true,\n        }];\n    }\n}\n\nexport function convertTransformFormat(datas: any, value: any, dist: any) {\n    return `${datas.beforeFunctionTexts.join(\" \")} ${datas.isAppendTransform ? dist : value} ${datas.afterFunctionTexts.join(\" \")}`;\n}\nexport function getTransformDist({ datas, distX, distY }: any) {\n    const [bx, by] = getBeforeDragDist({ datas, distX, distY });\n    // B * [tx, ty] * A = [bx, by] * targetMatrix;\n    // [tx, ty] = B-1 * [bx, by] * targetMatrix * A-1 * [0, 0];\n\n    const res = getTransfromMatrix(datas, fromTranslation([bx, by], 4));\n\n    return calculate(res, convertPositionMatrix([0, 0, 0], 4), 4);\n}\nexport function getTransfromMatrix(datas: any, targetMatrix: number[], isAfter?: boolean) {\n    const {\n        beforeTransform,\n        afterTransform,\n        beforeTransform2,\n        afterTransform2,\n        targetAllTransform,\n    } = datas;\n\n    // B * afterTargetMatrix * A = (targetMatrix * targetAllTransform)\n    // afterTargetMatrix = B-1 * targetMatrix * targetAllTransform * A-1\n    // nextTargetMatrix = (targetMatrix * targetAllTransform)\n    const nextTargetMatrix\n        = isAfter\n            ? multiply(targetAllTransform, targetMatrix, 4)\n            : multiply(targetMatrix, targetAllTransform, 4);\n\n    // res1 = B-1 * nextTargetMatrix\n    const res1 = multiply(invert(isAfter ? beforeTransform2 : beforeTransform, 4), nextTargetMatrix, 4);\n\n    // res3 = res2 * A-1\n    const afterTargetMatrix = multiply(res1, invert(isAfter ? afterTransform2 : afterTransform, 4), 4);\n\n    return afterTargetMatrix;\n}\nexport function getBeforeDragDist({ datas, distX, distY }: any) {\n    // TT = BT\n    const {\n        inverseBeforeMatrix,\n        is3d,\n        startDragBeforeDist,\n        absoluteOrigin,\n    } = datas;\n    const n = is3d ? 4 : 3;\n\n    // ABS_ORIGIN * [distX, distY] = BM * (ORIGIN + [tx, ty])\n    // BM -1 * ABS_ORIGIN * [distX, distY] - ORIGIN = [tx, ty]\n    return minus(\n        calculate(\n            inverseBeforeMatrix,\n            plus(absoluteOrigin, [distX, distY]),\n            n,\n        ),\n        startDragBeforeDist,\n    );\n}\nexport function getDragDist({ datas, distX, distY }: any, isBefore?: boolean) {\n    const {\n        inverseBeforeMatrix,\n        inverseMatrix,\n        is3d,\n        startDragBeforeDist,\n        startDragDist,\n        absoluteOrigin,\n    } = datas;\n    const n = is3d ? 4 : 3;\n\n    return minus(\n        calculate(\n            isBefore ? inverseBeforeMatrix : inverseMatrix,\n            plus(absoluteOrigin, [distX, distY]),\n            n,\n        ),\n        isBefore ? startDragBeforeDist : startDragDist,\n    );\n}\nexport function getInverseDragDist({ datas, distX, distY }: any, isBefore?: boolean) {\n    const {\n        beforeMatrix,\n        matrix,\n        is3d,\n        startDragBeforeDist,\n        startDragDist,\n        absoluteOrigin,\n    } = datas;\n    const n = is3d ? 4 : 3;\n\n    return minus(\n        calculate(\n            isBefore ? beforeMatrix : matrix,\n            plus(isBefore ? startDragBeforeDist : startDragDist, [distX, distY]),\n            n,\n        ),\n        absoluteOrigin,\n    );\n}\n\nexport function calculateTransformOrigin(\n    transformOrigin: string[],\n    width: number,\n    height: number,\n    prevWidth: number = width,\n    prevHeight: number = height,\n    prevOrigin: number[] = [0, 0],\n) {\n\n    if (!transformOrigin) {\n        return prevOrigin;\n    }\n    return transformOrigin.map((pos, i) => {\n        const { value, unit } = splitUnit(pos);\n\n        const prevSize = (i ? prevHeight : prevWidth);\n        const size = (i ? height : width);\n        if (pos === \"%\" || isNaN(value)) {\n            // no value but %\n\n            const measureRatio = prevSize ? prevOrigin[i] / prevSize : 0;\n\n            return size * measureRatio;\n        } else if (unit !== \"%\") {\n            return value;\n        }\n        return size * value / 100;\n    });\n}\n\nexport function getPosIndexesByDirection(direction: number[]) {\n    const indexes: number[] = [];\n\n    if (direction[1] >= 0) {\n        if (direction[0] >= 0) {\n            indexes.push(3);\n        }\n        if (direction[0] <= 0) {\n            indexes.push(2);\n        }\n    }\n    if (direction[1] <= 0) {\n        if (direction[0] >= 0) {\n            indexes.push(1);\n        }\n        if (direction[0] <= 0) {\n            indexes.push(0);\n        }\n    }\n    return indexes;\n}\nexport function getPosesByDirection(\n    poses: number[][],\n    direction: number[],\n) {\n    /*\n    [-1, -1](pos1)       [0, -1](pos1,pos2)       [1, -1](pos2)\n    [-1, 0](pos1, pos3)                           [1, 0](pos2, pos4)\n    [-1, 1](pos3)        [0, 1](pos3, pos4)       [1, 1](pos4)\n    */\n    return getPosIndexesByDirection(direction).map(index => poses[index]);\n}\n\nexport function getPosBySingleDirection(\n    poses: number[][],\n    direction: number,\n) {\n    const ratio = (direction + 1) / 2;\n    return [\n        dot(poses[0][0], poses[1][0], ratio, 1 - ratio),\n        dot(poses[0][1], poses[1][1], ratio, 1 - ratio),\n    ];\n}\n\nexport function getPosByDirection(\n    poses: number[][],\n    direction: number[],\n) {\n    const top = getPosBySingleDirection([poses[0], poses[1]], direction[0]);\n    const bottom = getPosBySingleDirection([poses[2], poses[3]], direction[0]);\n\n    return getPosBySingleDirection([top, bottom], direction[1]);\n}\n\nfunction getDist(\n    startPos: number[],\n    matrix: number[],\n    width: number,\n    height: number,\n    n: number,\n    fixedDirection: number[],\n) {\n    const poses = calculatePoses(matrix, width, height, n);\n    const fixedPos = getPosByDirection(poses, fixedDirection);\n    const distX = startPos[0] - fixedPos[0];\n    const distY = startPos[1] - fixedPos[1];\n\n    return [distX, distY];\n}\nexport function getNextMatrix(\n    offsetMatrix: number[],\n    targetMatrix: number[],\n    origin: number[],\n    n: number,\n) {\n    return multiply(\n        offsetMatrix,\n        getAbsoluteMatrix(targetMatrix, n, origin),\n        n,\n    );\n}\nexport function getNextTransformMatrix(\n    state: MoveableManagerState<any>,\n    datas: any,\n    transform: string | number[],\n    isAllTransform?: boolean,\n) {\n    const {\n        transformOrigin,\n        offsetMatrix,\n        is3d,\n    } = state;\n    const n = is3d ? 4 : 3;\n    let targetTransform!: number[];\n\n    if (isString(transform)) {\n        const {\n            beforeTransform,\n            afterTransform,\n        } = datas;\n\n        if (isAllTransform) {\n            targetTransform = convertDimension(parseMat(transform), 4, n);\n        } else {\n            targetTransform = convertDimension(\n                multiply(multiply(beforeTransform, parseMat([transform]), 4), afterTransform, 4),\n                4, n,\n            );\n        }\n    } else {\n        targetTransform = transform;\n    }\n\n    return getNextMatrix(\n        offsetMatrix,\n        targetTransform,\n        transformOrigin,\n        n,\n    );\n}\nexport function scaleMatrix(\n    state: any,\n    scale: number[],\n) {\n    const {\n        transformOrigin,\n        offsetMatrix,\n        is3d,\n        targetMatrix,\n        targetAllTransform,\n    } = state;\n    const n = is3d ? 4 : 3;\n\n    return getNextMatrix(\n        offsetMatrix,\n        multiply(targetAllTransform || targetMatrix, createScaleMatrix(scale, n), n),\n        transformOrigin,\n        n,\n    );\n}\n\nexport function fillTransformStartEvent(moveable: MoveableManagerInterface, e: any): OnTransformStartEvent {\n    const originalDatas = getBeforeRenderableDatas(e);\n    return {\n        setTransform: (transform: string | string[], index = -1) => {\n            originalDatas.startTransforms = isArray(transform) ? transform : splitSpace(transform);\n            setTransformIndex(moveable, e, index);\n        },\n        setTransformIndex: (index: number) => {\n            setTransformIndex(moveable, e, index);\n        },\n    };\n}\nexport function setDefaultTransformIndex(moveable: MoveableManagerInterface, e: any, property: string) {\n    const originalDatas = getBeforeRenderableDatas(e);\n    const startTransforms = originalDatas.startTransforms;\n\n    setTransformIndex(moveable, e, findIndex<string>(startTransforms, func => func.indexOf(`${property}(`) === 0));\n}\nexport function setTransformIndex(moveable: MoveableManagerInterface, e: any, index: number) {\n    const originalDatas = getBeforeRenderableDatas(e);\n    const datas = e.datas;\n\n    datas.transformIndex = index;\n    if (index === -1) {\n        return;\n    }\n    const transform = originalDatas.startTransforms[index];\n\n    if (!transform) {\n        return;\n    }\n    const state = moveable.state;\n    const info = parse([transform], {\n        \"x%\": v => v / 100 * state.offsetWidth,\n        \"y%\": v => v / 100 * state.offsetHeight,\n    });\n\n    datas.startValue = info[0].functionValue;\n}\nexport function fillOriginalTransform(\n    e: any,\n    transform: string,\n) {\n    const originalDatas = getBeforeRenderableDatas(e);\n\n    originalDatas.nextTransforms = splitSpace(transform);\n    // originalDatas.nextTargetMatrix = parseMat(transform);\n}\nexport function getBeforeRenderableDatas(e: any) {\n    return e.originalDatas.beforeRenderable;\n}\nexport function getNextTransforms(e: any) {\n    const {\n        originalDatas: {\n            beforeRenderable: originalDatas,\n        },\n    } = e;\n\n    return originalDatas.nextTransforms as string[];\n}\nexport function getNextTransformText(e: any) {\n    return (getNextTransforms(e) || []).join(\" \");\n}\n\nexport function getNextStyle(e: any) {\n    return getBeforeRenderableDatas(e).nextStyle;\n}\n\nexport function fillTransformEvent(\n    moveable: MoveableManagerInterface<DraggableProps>,\n    nextTransform: string,\n    delta: number[],\n    isPinch: boolean,\n    e: any,\n): OnTransformEvent {\n    fillOriginalTransform(e, nextTransform);\n\n    const drag = Draggable.drag!(\n        moveable,\n        setCustomDrag(e, moveable.state, delta, isPinch, false),\n    ) as OnDrag;\n    const afterTransform = drag ? drag.transform : nextTransform;\n    return {\n        transform: nextTransform,\n        drag: drag as OnDrag,\n        ...fillCSSObject({\n            transform: afterTransform,\n        }, e),\n        afterTransform,\n    };\n}\n\nexport function getTranslateFixedPosition(\n    moveable: MoveableManagerInterface<any>,\n    transform: string | number[],\n    fixedDirection: number[],\n    fixedOffset: number[],\n    datas: any,\n    isAllTransform?: boolean,\n) {\n    const nextMatrix = getNextTransformMatrix(moveable.state, datas, transform, isAllTransform);\n    const nextFixedPosition = getDirectionOffset(\n        moveable,\n        fixedDirection,\n        fixedOffset,\n        nextMatrix,\n    );\n\n    return nextFixedPosition;\n}\n\nexport function getTranslateDist(\n    moveable: MoveableManagerInterface<any>,\n    transform: string,\n    fixedDirection: number[],\n    fixedPosition: number[],\n    fixedOffset: number[],\n    datas: any,\n    isAllTransform?: boolean,\n) {\n    const nextFixedPosition = getTranslateFixedPosition(\n        moveable,\n        transform,\n        fixedDirection,\n        fixedOffset,\n        datas,\n        isAllTransform,\n    );\n    const state = moveable.state;\n    const {\n        left,\n        top,\n    } = state;\n\n    const groupable = moveable.props.groupable;\n    const groupLeft = groupable ? left : 0;\n    const groupTop = groupable ? top : 0;\n    const dist = minus(fixedPosition, nextFixedPosition);\n\n    return minus(dist, [groupLeft, groupTop]);\n}\nexport function getScaleDist(\n    moveable: MoveableManagerInterface<any>,\n    transform: string,\n    fixedDirection: number[],\n    fixedPosition: number[],\n    fixedOffset: number[],\n    datas: any,\n    isAllTransform?: boolean,\n) {\n    const dist = getTranslateDist(\n        moveable,\n        transform,\n        fixedDirection,\n        fixedPosition,\n        fixedOffset,\n        datas,\n        isAllTransform,\n    );\n\n    return dist;\n}\nexport function getOriginDirection(moveable: MoveableManagerInterface<any>) {\n    const {\n        width,\n        height,\n        transformOrigin,\n    } = moveable.state;\n    return [\n        -1 + transformOrigin[0] / (width / 2),\n        -1 + transformOrigin[1] / (height / 2),\n    ];\n}\nexport function getDirectionByPos(\n    pos: number[],\n    width: number,\n    height: number,\n) {\n    return [\n        width ? -1 + pos[0] / (width / 2) : 0,\n        height ? -1 + pos[1] / (height / 2) : 0,\n    ];\n}\nexport function getDirectionOffset(\n    moveable: MoveableManagerInterface,\n    fixedDirection: number[],\n    fixedOffset: number[],\n    nextMatrix: number[] = moveable.state.allMatrix,\n) {\n    const {\n        width,\n        height,\n        is3d,\n    } = moveable.state;\n    const n = is3d ? 4 : 3;\n    const fixedOffsetPosition = [\n        width / 2 * (1 + fixedDirection[0]) + fixedOffset[0],\n        height / 2 * (1 + fixedDirection[1]) + fixedOffset[1],\n    ];\n    return calculatePosition(nextMatrix, fixedOffsetPosition, n);\n}\nexport function getRotateDist(\n    moveable: MoveableManagerInterface<any>,\n    rotateDist: number,\n    datas: any,\n) {\n    const fixedDirection = datas.fixedDirection;\n    const fixedPosition = datas.fixedPosition;\n    const fixedOffset = datas.fixedOffset;\n\n    return getTranslateDist(\n        moveable,\n        `rotate(${rotateDist}deg)`,\n        fixedDirection,\n        fixedPosition,\n        fixedOffset,\n        datas,\n    );\n}\nexport function getResizeDist(\n    moveable: MoveableManagerInterface<any>,\n    width: number,\n    height: number,\n    fixedPosition: number[],\n    transformOrigin: string[],\n    datas: any,\n) {\n    const {\n        groupable,\n    } = moveable.props;\n    const state = moveable.state;\n    const {\n        transformOrigin: prevOrigin,\n        offsetMatrix,\n        is3d,\n        width: prevWidth,\n        height: prevHeight,\n        left,\n        top,\n    } = state;\n    const fixedDirection = datas.fixedDirection;\n    const targetMatrix = datas.nextTargetMatrix || state.targetMatrix;\n    const n = is3d ? 4 : 3;\n    const nextOrigin = calculateTransformOrigin(\n        transformOrigin!,\n        width,\n        height,\n        prevWidth,\n        prevHeight,\n        prevOrigin,\n    );\n    const groupLeft = groupable ? left : 0;\n    const groupTop = groupable ? top : 0;\n    const nextMatrix = getNextMatrix(offsetMatrix, targetMatrix, nextOrigin, n);\n    const dist = getDist(fixedPosition, nextMatrix, width, height, n, fixedDirection);\n\n    return minus(dist, [groupLeft, groupTop]);\n}\nexport function getAbsolutePosition(\n    moveable: MoveableManagerInterface<ResizableProps>,\n    direction: number[],\n) {\n    return getPosByDirection(getAbsolutePosesByState(moveable.state), direction);\n}\n", "import { MoveableManagerInterface } from \"../types\";\n\nexport function getGestoData(moveable: MoveableManagerInterface, ableName: string) {\n    const targetGesto = moveable.targetGesto;\n    const controlGesto = moveable.controlGesto;\n    let data!: Record<string, any>;\n\n    if (targetGesto?.isFlag()) {\n        data = targetGesto.getEventData()[ableName];\n    }\n\n    if (!data && controlGesto?.isFlag()) {\n        data = controlGesto.getEventData()[ableName];\n    }\n\n    return data || {};\n}\n", "import {\n    convertCSStoMatrix, convertDimension,\n    createIdentityMatrix, createOriginMatrix, createScaleMatrix,\n} from \"@scena/matrix\";\nimport { getCachedStyle } from \"../store/Store\";\nimport { IS_WEBKIT, IS_SAFARI_ABOVE15, IS_FIREFOX, IS_CHROMIUM109 } from \"../consts\";\nimport { MatrixInfo } from \"../types\";\nimport {\n    getOffsetInfo, getElementTransform,\n    getTransformMatrix, getPositionFixedInfo,\n    convert3DMatrixes, getOffsetPosInfo,\n    getSVGMatrix, getBodyOffset, getAbsoluteMatrix,\n} from \"../utils\";\nimport { getDocumentBody, getDocumentElement } from \"@daybrush/utils\";\nimport { parseMat } from \"css-to-mat\";\n\n\nexport function getShadowRoot(parentElement: HTMLElement | SVGElement) {\n    if (parentElement && parentElement.getRootNode) {\n        const rootNode = parentElement.getRootNode();\n\n        if (rootNode.nodeType === 11) {\n            return rootNode;\n        }\n    }\n    return;\n}\n\n\nfunction getIndividualTransforms(getStyle: (property: string) => any) {\n    const scale = getStyle(\"scale\") as string;\n    const rotate = getStyle(\"rotate\") as string;\n    const translate = getStyle(\"translate\") as string;\n    const individualTransforms: string[] = [];\n\n    if (translate && translate !== \"0px\" && translate !== \"none\") {\n        individualTransforms.push(`translate(${translate.split(/\\s+/).join(\",\")})`);\n    }\n    if (rotate && rotate !== \"1\" && rotate !== \"none\") {\n        individualTransforms.push(`rotate(${rotate})`);\n    }\n    if (scale && scale !== \"1\" && scale !== \"none\") {\n        individualTransforms.push(`scale(${scale.split(/\\s+/).join(\",\")})`);\n    }\n    return individualTransforms;\n}\n\nexport interface MatrixStackInfo {\n    zoom: number;\n    offsetContainer: HTMLElement;\n    matrixes: MatrixInfo[];\n    targetMatrix: number[];\n    transformOrigin: number[];\n    targetOrigin: number[];\n    is3d: boolean;\n    hasFixed: boolean;\n}\nexport function getMatrixStackInfo(\n    target: SVGElement | HTMLElement,\n    container?: SVGElement | HTMLElement | null,\n    checkContainer?: boolean,\n): MatrixStackInfo {\n    let el: SVGElement | HTMLElement | null = target;\n    const matrixes: MatrixInfo[] = [];\n    const documentElement = getDocumentElement(target) || getDocumentBody(target);\n    let requestEnd = !checkContainer && target === container || target === documentElement;\n    let isEnd = requestEnd;\n    let is3d = false;\n    let n = 3;\n    let transformOrigin!: number[];\n    let targetTransformOrigin!: number[];\n    let targetMatrix!: number[];\n\n    let hasFixed = false;\n    let offsetContainer = getOffsetInfo(container, container, true).offsetParent;\n    let zoom = 1;\n\n    while (el && !isEnd) {\n        isEnd = requestEnd;\n        const getStyle = getCachedStyle(el);\n        const position = getStyle(\"position\");\n        const transform = getElementTransform(el);\n        const isFixed = position === \"fixed\";\n        const individualTransforms = getIndividualTransforms(getStyle);\n        let matrix: number[] = convertCSStoMatrix(getTransformMatrix(transform));\n        let offsetParent: HTMLElement;\n        let isOffsetEnd = false;\n        let isStatic = false;\n        let parentClientLeft = 0;\n        let parentClientTop = 0;\n        let fixedClientLeft = 0;\n        let fixedClientTop = 0;\n        let fixedInfo: {\n            hasTransform: boolean;\n            fixedContainer: HTMLElement | null;\n        } = {\n            hasTransform: false,\n            fixedContainer: null,\n        };\n\n        if (isFixed) {\n            hasFixed = true;\n            fixedInfo = getPositionFixedInfo(el);\n            offsetContainer = fixedInfo.fixedContainer!;\n        }\n\n        // convert 3 to 4\n        const length = matrix.length;\n\n        if (!is3d && (length === 16 || individualTransforms.length)) {\n            is3d = true;\n            n = 4;\n\n            convert3DMatrixes(matrixes);\n            if (targetMatrix) {\n                targetMatrix = convertDimension(targetMatrix, 3, 4);\n            }\n        }\n        if (is3d && length === 9) {\n            matrix = convertDimension(matrix, 3, 4);\n        }\n        const {\n            tagName,\n            hasOffset,\n            isSVG,\n            origin,\n            targetOrigin,\n            offset: offsetPos,\n        } = getOffsetPosInfo(el, target);\n        let [\n            offsetLeft,\n            offsetTop,\n        ] = offsetPos;\n\n        if (tagName === \"svg\" && !(target as SVGSVGElement).ownerSVGElement && targetMatrix) {\n            // scale matrix for svg's SVGElements.\n            matrixes.push({\n                type: \"target\",\n                target: el,\n                matrix: getSVGMatrix(el as SVGSVGElement, n),\n            });\n            matrixes.push({\n                type: \"offset\",\n                target: el,\n                matrix: createIdentityMatrix(n),\n            });\n        }\n\n\n        const targetZoom = parseFloat(getStyle(\"zoom\")) || 1;\n\n        if (isFixed) {\n            offsetParent = fixedInfo.fixedContainer!;\n            isOffsetEnd = true;\n        } else {\n            const offsetInfo = getOffsetInfo(el, container, false, true, getStyle);\n            const offsetZoom = offsetInfo.offsetZoom;\n\n            offsetParent = offsetInfo.offsetParent;\n            isOffsetEnd = offsetInfo.isEnd;\n            isStatic = offsetInfo.isStatic;\n            zoom *= offsetZoom;\n\n            if ((offsetInfo.isCustomElement || offsetZoom !== 1) && isStatic) {\n                offsetLeft -= offsetParent.offsetLeft;\n                offsetTop -= offsetParent.offsetTop;\n            } else if (IS_FIREFOX || IS_CHROMIUM109) {\n                const parentSlotElement = offsetInfo.parentSlotElement;\n\n                if (parentSlotElement) {\n                    let customOffsetParent: HTMLElement | null = offsetParent;\n                    let customOffsetLeft = 0;\n                    let customOffsetTop = 0;\n\n                    while (customOffsetParent) {\n                        if (!getShadowRoot(customOffsetParent)) {\n                            break;\n                        }\n                        customOffsetLeft += customOffsetParent.offsetLeft;\n                        customOffsetTop += customOffsetParent.offsetTop;\n                        customOffsetParent = customOffsetParent.offsetParent as HTMLElement;\n                    }\n                    offsetLeft -= customOffsetLeft;\n                    offsetTop -= customOffsetTop;\n                }\n            }\n        }\n\n        if (\n            IS_WEBKIT && !IS_SAFARI_ABOVE15\n            && hasOffset && !isSVG && isStatic\n            && (position === \"relative\" || position === \"static\")\n        ) {\n            offsetLeft -= offsetParent.offsetLeft;\n            offsetTop -= offsetParent.offsetTop;\n            requestEnd = requestEnd || isOffsetEnd;\n        }\n\n\n        if (isFixed) {\n            if (hasOffset && fixedInfo.hasTransform) {\n                // border\n                fixedClientLeft = offsetParent.clientLeft;\n                fixedClientTop = offsetParent.clientTop;\n            }\n        } else {\n            if (hasOffset && offsetContainer !== offsetParent) {\n                // border\n                parentClientLeft = offsetParent.clientLeft;\n                parentClientTop = offsetParent.clientTop;\n            }\n            if (hasOffset && offsetParent === documentElement) {\n                const margin = getBodyOffset(el, false);\n\n                offsetLeft += margin[0];\n                offsetTop += margin[1];\n            }\n        }\n\n        matrixes.push({\n            type: \"target\",\n            target: el,\n            matrix: getAbsoluteMatrix(matrix, n, origin),\n        });\n\n        if (individualTransforms.length) {\n            matrixes.push({\n                type: \"offset\",\n                target: el,\n                matrix: createIdentityMatrix(n),\n            });\n\n            matrixes.push({\n                type: \"target\",\n                target: el,\n                matrix: getAbsoluteMatrix(parseMat(individualTransforms), n, origin),\n            });\n        }\n        if (hasOffset) {\n            const isElementTarget = el === target;\n            const scrollLeft = isElementTarget ? 0 : el.scrollLeft;\n            const scrollTop = isElementTarget ? 0 : el.scrollTop;\n\n            matrixes.push({\n                type: \"offset\",\n                target: el,\n                matrix: createOriginMatrix([\n                    offsetLeft - scrollLeft + parentClientLeft - fixedClientLeft,\n                    offsetTop - scrollTop + parentClientTop - fixedClientTop,\n                ], n),\n            });\n        } else {\n            // svg\n            matrixes.push({\n                type: \"offset\",\n                target: el,\n                origin,\n            });\n        }\n        // transform으로 계산되지 않는 zoom을 위한 (0, 0) 을 기준 matrix 추가.\n        if (targetZoom !== 1) {\n            matrixes.push({\n                type: \"zoom\",\n                target: el,\n                matrix: getAbsoluteMatrix(createScaleMatrix([targetZoom, targetZoom], n), n, [0, 0]),\n            });\n        }\n        if (!targetMatrix) {\n            targetMatrix = matrix;\n        }\n        if (!transformOrigin) {\n            transformOrigin = origin;\n        }\n        if (!targetTransformOrigin) {\n            targetTransformOrigin = targetOrigin;\n        }\n\n        if (isEnd || isFixed) {\n            break;\n        } else {\n            el = offsetParent;\n            requestEnd = isOffsetEnd;\n        }\n        if (!checkContainer || el === documentElement) {\n            isEnd = requestEnd;\n        }\n    }\n    if (!targetMatrix) {\n        targetMatrix = createIdentityMatrix(n);\n    }\n    if (!transformOrigin) {\n        transformOrigin = [0, 0];\n    }\n    if (!targetTransformOrigin) {\n        targetTransformOrigin = [0, 0];\n    }\n\n    return {\n        zoom,\n        offsetContainer,\n        matrixes,\n        targetMatrix,\n        transformOrigin,\n        targetOrigin: targetTransformOrigin,\n        is3d,\n        hasFixed,\n    };\n}\n", "import { find, getWindow } from \"@daybrush/utils\";\nimport { getClientRect } from \"../utils\";\nimport { MoveableClientRect } from \"../types\";\nimport { getMatrixStackInfo, MatrixStackInfo } from \"../utils/getMatrixStackInfo\";\n\nlet cacheStyleMap: Map<Element, {\n    style: CSSStyleDeclaration;\n    cached: Record<string, any>;\n}> | null = null;\nlet clientRectStyleMap: Map<Element, MoveableClientRect> | null = null;\n\nlet matrixContainerInfos: Array<[\n    [SVGElement | HTMLElement, SVGElement | HTMLElement | null | undefined],\n    MatrixStackInfo\n]> | null = null;\n\nexport type GetStyle = (propertyName: string) => any;\nexport function setStoreCache(useCache?: boolean) {\n    if (useCache) {\n        if (window.Map) {\n            cacheStyleMap = new Map();\n            clientRectStyleMap = new Map();\n        }\n        matrixContainerInfos = [];\n    } else {\n        cacheStyleMap = null;\n        matrixContainerInfos = null;\n        clientRectStyleMap = null;\n    }\n}\n\nexport function getCachedClientRect(el: HTMLElement | SVGElement): MoveableClientRect {\n    const clientRect = clientRectStyleMap?.get(el);\n\n    if (clientRect) {\n        return clientRect;\n    }\n    const nextClientRect = getClientRect(el, true);\n\n    if (clientRectStyleMap) {\n        clientRectStyleMap.set(el, nextClientRect);\n    }\n    return nextClientRect;\n}\n\nexport function getCachedMatrixContainerInfo(\n    target: SVGElement | HTMLElement,\n    container?: SVGElement | HTMLElement | null,\n) {\n    if (matrixContainerInfos) {\n        const result = find(matrixContainerInfos, info => info[0][0] == target && info[0][1] == container);\n\n        if (result) {\n            return result[1];\n        }\n    }\n    const result = getMatrixStackInfo(target, container, true);\n\n    if (matrixContainerInfos) {\n        matrixContainerInfos.push([[target, container], result]);\n    }\n    return result;\n}\nexport function getCachedStyle(element: Element): GetStyle {\n    let cache = cacheStyleMap?.get(element);\n\n    if (!cache) {\n        const nextStyle = getWindow(element).getComputedStyle(element);\n\n        if (!cacheStyleMap) {\n            return (property: string) => {\n                return (nextStyle as any)[property];\n            };\n        }\n        cache = {\n            style: nextStyle,\n            cached: {},\n        };\n        cacheStyleMap.set(element, cache);\n    }\n    const cached = cache.cached;\n    const style = cache.style;\n\n    return (property: string) => {\n        if (!(property in cached)) {\n            cached[property] = (style as any)[property];\n        }\n        return cached[property];\n    };\n}\n", "import { Able, MoveableGroupInterface, MoveableManagerInterface, MoveableManagerState } from \"./types\";\nimport CustomGesto, { setCustomDrag } from \"./gesto/CustomGesto\";\nimport { getAbsolutePosesByState } from \"./utils\";\nimport { calculate, createRotateMatrix } from \"@scena/matrix\";\nimport { getPosByDirection } from \"./gesto/GestoUtils\";\n\nexport function fillChildEvents(\n    moveable: MoveableGroupInterface<any, any>,\n    name: string,\n    e: any,\n): any[] {\n    const datas = e.originalDatas;\n\n    datas.groupable = datas.groupable || {};\n\n    const groupableDatas = datas.groupable;\n\n    groupableDatas.childDatas = groupableDatas.childDatas || [];\n\n    const childDatas = groupableDatas.childDatas;\n\n    return moveable.moveables.map((_, i) => {\n        childDatas[i] = childDatas[i] || {};\n        childDatas[i][name] = childDatas[i][name] || {};\n\n        return {\n            ...e,\n            isRequestChild: true,\n            datas: childDatas[i][name],\n            originalDatas: childDatas[i],\n        };\n    });\n}\nexport function triggerChildGesto(\n    moveable: MoveableGroupInterface<any, any>,\n    able: Able,\n    type: string,\n    delta: number[],\n    e: any,\n    isConvert: boolean,\n    ableName: string,\n) {\n    const isStart = !!type.match(/Start$/g);\n    const isEnd = !!type.match(/End$/g);\n    const isPinch = e.isPinch;\n    const datas = e.datas;\n    const events = fillChildEvents(moveable, able.name, e);\n    const moveables = moveable.moveables;\n\n    const childEvents: any[] = [];\n    const eventParams = events.map((ev, i) => {\n        const childMoveable = moveables[i];\n        const state = childMoveable.state as MoveableManagerState<any>;\n        const gestos = state.gestos;\n        let childEvent: any = ev;\n\n        if (isStart) {\n            childEvent = new CustomGesto(ableName).dragStart(delta, ev);\n            childEvents.push(childEvent);\n        } else {\n            if (!gestos[ableName]) {\n                gestos[ableName] = datas.childGestos[i];\n            }\n            if (!gestos[ableName]) {\n                return;\n            }\n            childEvent = setCustomDrag(ev, state, delta, isPinch, isConvert, ableName);\n            childEvents.push(childEvent);\n        }\n        const result = (able as any)[type]!(childMoveable,  { ...childEvent, parentFlag: true });\n\n        if (isEnd) {\n            gestos[ableName] = null;\n        }\n        return result;\n    });\n    if (isStart) {\n        datas.childGestos = moveables.map(child => child.state.gestos[ableName]);\n    }\n    return {\n        eventParams,\n        childEvents,\n    };\n}\nexport function triggerChildAbles<T extends Able>(\n    moveable: MoveableGroupInterface<any, any>,\n    able: T,\n    type: keyof T & string,\n    e: any,\n    eachEvent: (movebale: MoveableManagerInterface<any, any>, ev: any) => any = (_, ev) => ev,\n    callback?: (moveable: MoveableManagerInterface<any, any>, ev: any, result: any, index: number) => any,\n) {\n    const isEnd = !!type.match(/End$/g);\n    const events = fillChildEvents(moveable, able.name, e);\n    const moveables = moveable.moveables;\n    const childs = events.map((ev, i) => {\n        const childMoveable = moveables[i];\n        let childEvent = ev;\n\n        childEvent = eachEvent(childMoveable, ev);\n\n        const result = (able as any)[type]!(childMoveable,  { ...childEvent, parentFlag: true });\n\n        result && callback && callback(childMoveable, ev, result, i);\n\n        if (isEnd) {\n            childMoveable.state.gestos = {};\n        }\n        return result;\n    });\n\n    return childs;\n}\n\n\nexport function startChildDist(\n    moveable: MoveableGroupInterface,\n    child: MoveableManagerInterface,\n    parentDatas: any,\n    childEvent: any,\n) {\n    const fixedDirection = parentDatas.fixedDirection;\n    const fixedPosition = parentDatas.fixedPosition;\n\n    const startPositions = childEvent.datas.startPositions || getAbsolutePosesByState(child.state);\n    const pos = getPosByDirection(startPositions, fixedDirection);\n    const [originalX, originalY] = calculate(\n        createRotateMatrix(-moveable.rotation / 180 * Math.PI, 3),\n        [pos[0] - fixedPosition[0], pos[1] - fixedPosition[1], 1],\n        3,\n    );\n    childEvent.datas.originalX = originalX;\n    childEvent.datas.originalY = originalY;\n\n    return childEvent;\n}\n", "import { prefix, getControlTransform, getLineStyle, getProps, sign } from \"./utils\";\nimport {\n    Renderer, MoveableManagerInterface,\n    RenderDirections,\n} from \"./types\";\nimport { DIRECTION_INDEXES, DIRECTION_ROTATIONS, DIRECTIONS, DIRECTIONS4 } from \"./consts\";\nimport { IObject, throttle, getRad, getKeys } from \"@daybrush/utils\";\nimport { absDegree } from \"./ables/Snappable\";\n\nexport interface DirectionControlInfo {\n    data: Record<string, any>;\n    classNames: string[];\n    dir: string;\n}\n\n\nexport function renderDirectionControlsByInfos(\n    moveable: MoveableManagerInterface<Partial<RenderDirections>>,\n    ableName: string,\n    renderDirections: DirectionControlInfo[],\n    React: Renderer,\n): any[] {\n\n    const {\n        renderPoses,\n        rotation: rotationRad,\n        direction,\n    } = moveable.getState();\n\n    const {\n        zoom,\n    } = getProps(moveable.props, ableName as any);\n\n    const degRotation = absDegree(rotationRad / Math.PI * 180);\n    const directionMap: IObject<boolean> = {};\n    const renderState = moveable.renderState;\n    if (!renderState.renderDirectionMap) {\n        renderState.renderDirectionMap = {};\n    }\n    const renderDirectionMap = renderState.renderDirectionMap;\n\n    renderDirections.forEach(({ dir }) => {\n        directionMap[dir] = true;\n    });\n\n    const directionSign = sign(direction);\n    return renderDirections.map(({ data, classNames, dir }) => {\n        const indexes = DIRECTION_INDEXES[dir];\n\n        if (!indexes || !directionMap[dir]) {\n            return null;\n        }\n        renderDirectionMap[dir] = true;\n        const directionRotation = (throttle(degRotation, 15) + directionSign * DIRECTION_ROTATIONS[dir] + 720) % 180;\n\n        const dataAttrs: Record<string, string> = {};\n\n        getKeys(data).forEach(name => {\n            dataAttrs[`data-${name}`] = data[name];\n        });\n        return (\n            <div className={prefix(\"control\", \"direction\", dir, ableName, ...classNames)}\n                data-rotation={directionRotation}\n                data-direction={dir}\n                {...dataAttrs}\n                key={`direction-${dir}`}\n                style={getControlTransform(rotationRad, zoom!, ...indexes.map(index => renderPoses[index]))}></div>\n        );\n    });\n}\nexport function renderDirectionControls(\n    moveable: MoveableManagerInterface<Partial<RenderDirections>>,\n    defaultDirections: string[],\n    ableName: string,\n    React: Renderer,\n): any[] {\n    const {\n        renderDirections: directions = defaultDirections,\n        displayAroundControls,\n    } = getProps(moveable.props, ableName as any);\n\n    if (!directions) {\n        return [];\n    }\n    const renderDirections = directions === true ? DIRECTIONS : directions;\n\n    return [\n        ...(displayAroundControls ? renderAroundControls(moveable, React, ableName, renderDirections) : []),\n        ...renderDirectionControlsByInfos(\n            moveable,\n            ableName,\n            renderDirections.map(dir => {\n                return {\n                    data: {},\n                    classNames: [],\n                    dir,\n                };\n            }),\n            React,\n        ),\n    ];\n}\n\nexport function renderLine(\n    React: Renderer,\n    direction: string,\n    pos1: number[],\n    pos2: number[],\n    zoom: number,\n    key: number | string,\n    ...classNames: string[]\n): any {\n    const rad = getRad(pos1, pos2);\n    const rotation = direction ? (throttle(rad / Math.PI * 180, 15)) % 180 : -1;\n\n    return <div key={`line-${key}`}\n        className={prefix(\"line\", \"direction\", direction ? \"edge\" : \"\", direction, ...classNames)}\n        data-rotation={rotation}\n        data-line-key={key}\n        data-direction={direction} style={getLineStyle(pos1, pos2, zoom, rad)}></div>;\n}\n\nexport function renderEdgeLines(\n    React: Renderer,\n    ableName: string,\n    edge: true | string[],\n    poses: number[][],\n    zoom: number,\n): any[] {\n    const directions = edge === true ? DIRECTIONS4 : edge;\n\n    return directions.map((direction, i) => {\n        const [index1, index2] = DIRECTION_INDEXES[direction];\n\n        if (index2 == null) {\n            return;\n        }\n        return renderLine(React, direction, poses[index1], poses[index2], zoom, `${ableName}Edge${i}`, ableName);\n    }).filter(Boolean);\n}\n\nexport function getRenderDirections(ableName: string) {\n    return (\n        moveable: MoveableManagerInterface<Partial<RenderDirections>>,\n        React: Renderer,\n    ) => {\n        const edge = getProps(moveable.props, ableName as any).edge;\n\n        if (edge && (edge === true || edge.length)) {\n            return [\n                ...renderEdgeLines(\n                    React,\n                    ableName,\n                    edge,\n                    moveable.getState().renderPoses,\n                    moveable.props.zoom!,\n                ),\n                ...renderDiagonalDirections(moveable, ableName, React),\n            ];\n        }\n        return renderAllDirections(moveable, ableName, React);\n    };\n}\n\nexport function renderAllDirections(\n    moveable: MoveableManagerInterface<Partial<RenderDirections>>,\n    ableName: string,\n    React: Renderer,\n) {\n    return renderDirectionControls(moveable, DIRECTIONS, ableName, React);\n}\n\nexport function renderDiagonalDirections(\n    moveable: MoveableManagerInterface<Partial<RenderDirections>>,\n    ableName: string,\n    React: Renderer,\n): any[] {\n    return renderDirectionControls(moveable, [\"nw\", \"ne\", \"sw\", \"se\"], ableName, React);\n}\n\nexport function renderAroundControls(\n    moveable: MoveableManagerInterface<Partial<RenderDirections>>,\n    React: Renderer,\n    ableName?: string,\n    renderDirections?: string[],\n): any[] {\n    const renderState = moveable.renderState;\n    if (!renderState.renderDirectionMap) {\n        renderState.renderDirectionMap = {};\n    }\n    const {\n        renderPoses,\n        rotation: rotationRad,\n        direction,\n    } = moveable.getState();\n\n    const renderDirectionMap = renderState.renderDirectionMap;\n\n    const {\n        zoom,\n    } = moveable.props;\n    const directionSign = sign(direction);\n    const degRotation = rotationRad / Math.PI * 180;\n\n    return (renderDirections || getKeys(renderDirectionMap)).map(dir => {\n        const indexes = DIRECTION_INDEXES[dir];\n\n        if (!indexes) {\n            return null;\n        }\n        const directionRotation = (throttle(degRotation, 15) + directionSign * DIRECTION_ROTATIONS[dir] + 720) % 180;\n\n        const classNames: string[] = [\"around-control\"];\n\n        if (ableName) {\n            classNames.push(\"direction\", ableName);\n        }\n        return (\n            <div\n                className={prefix(...classNames)}\n                data-rotation={directionRotation} data-direction={dir} key={`direction-around-${dir}`}\n                style={getControlTransform(rotationRad, zoom!, ...indexes.map(index => renderPoses[index]))}></div>\n        );\n    });\n}\n", "import { getRad, throttle } from \"@daybrush/utils\";\nimport {\n    BoundInfo, SnappableProps, BoundType,\n    RotatableProps, MoveableManagerInterface, SnappableState,\n} from \"../../types\";\nimport { rotate, minus } from \"@scena/matrix\";\nimport { abs, getDistSize } from \"../../utils\";\nimport { TINY_NUM } from \"../../consts\";\n\nexport function checkBoundPoses(\n    bounds: BoundType | false | undefined,\n    verticalPoses: number[],\n    horizontalPoses: number[],\n) {\n    const {\n        position = \"client\",\n        left = -Infinity,\n        top = -Infinity,\n        right = Infinity,\n        bottom = Infinity,\n    } = bounds || {};\n    const nextBounds = {\n        position,\n        left,\n        top,\n        right,\n        bottom,\n    };\n\n    return {\n        vertical: checkBounds(nextBounds, verticalPoses, true),\n        horizontal: checkBounds(nextBounds, horizontalPoses, false),\n    };\n}\nexport function getBounds(\n    moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n    externalBounds?: BoundType | false | null,\n) {\n    const {\n        containerClientRect: {\n            clientHeight: containerHeight,\n            clientWidth: containerWidth,\n            clientLeft,\n            clientTop,\n        },\n        snapOffset: {\n            left: snapOffsetLeft,\n            top: snapOffsetTop,\n            right: snapOffsetRight,\n            bottom: snapOffsetBottom,\n        },\n    } = moveable.state;\n    const bounds = externalBounds || moveable.props.bounds || {} as BoundType;\n    const position = bounds.position || \"client\";\n    const isCSS = position === \"css\";\n    const {\n        left = -Infinity,\n        top = -Infinity,\n    } = bounds;\n    let {\n        right = isCSS ? -Infinity : Infinity,\n        bottom = isCSS ? -Infinity : Infinity,\n    } = bounds;\n\n    if (isCSS) {\n        right = containerWidth! + snapOffsetRight - snapOffsetLeft - right;\n        bottom = containerHeight! + snapOffsetBottom - snapOffsetTop - bottom;\n    }\n\n    return {\n        left: left + snapOffsetLeft - clientLeft!,\n        right: right + snapOffsetLeft - clientLeft!,\n        top: top + snapOffsetTop - clientTop!,\n        bottom: bottom + snapOffsetTop - clientTop!,\n    };\n}\nexport function checkBoundKeepRatio(\n    moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n    startPos: number[],\n    endPos: number[],\n) {\n    const {\n        left,\n        top,\n        right,\n        bottom,\n    } = getBounds(moveable);\n\n    const [endX, endY] = endPos;\n    let [dx, dy] = minus(endPos, startPos);\n\n    if (abs(dx) < TINY_NUM) {\n        dx = 0;\n    }\n    if (abs(dy) < TINY_NUM) {\n        dy = 0;\n    }\n    const isBottom = dy > 0;\n    const isRight = dx > 0;\n\n    const verticalInfo = {\n        isBound: false,\n        offset: 0,\n        pos: 0,\n    };\n    const horizontalInfo = {\n        isBound: false,\n        offset: 0,\n        pos: 0,\n    };\n    if (dx === 0 && dy === 0) {\n        return {\n            vertical: verticalInfo,\n            horizontal: horizontalInfo,\n        };\n    } else if (dx === 0) {\n        if (isBottom) {\n            if (bottom < endY) {\n                horizontalInfo.pos = bottom;\n                horizontalInfo.offset = endY - bottom;\n            }\n        } else {\n            if (top > endY) {\n                horizontalInfo.pos = top;\n                horizontalInfo.offset = endY - top;\n            }\n        }\n    } else if (dy === 0) {\n        if (isRight) {\n            if (right < endX) {\n                verticalInfo.pos = right;\n                verticalInfo.offset = endX - right;\n            }\n        } else {\n            if (left > endX) {\n                verticalInfo.pos = left;\n                verticalInfo.offset = endX - left;\n            }\n        }\n    } else {\n        // y - y1 = a * (x - x1)\n        const a = dy / dx;\n        const b = endPos[1] - a * endX;\n        let y = 0;\n        let x = 0;\n        let isBound = false;\n\n        if (isRight && right <= endX) {\n            y = a * right + b;\n            x = right;\n            isBound = true;\n        } else if (!isRight && endX <= left) {\n            y = a * left + b;\n            x = left;\n            isBound = true;\n        }\n        if (isBound) {\n            if (y < top || y > bottom) {\n                isBound = false;\n            }\n        }\n        if (!isBound) {\n            if (isBottom && bottom <= endY) {\n                y = bottom;\n                x = (y - b) / a;\n                isBound = true;\n            } else if (!isBottom &&  endY <= top) {\n                y = top;\n                x = (y - b) / a;\n                isBound = true;\n            }\n        }\n        if (isBound) {\n            verticalInfo.isBound = true;\n            verticalInfo.pos = x;\n            verticalInfo.offset = endX - x;\n\n            horizontalInfo.isBound = true;\n            horizontalInfo.pos = y;\n            horizontalInfo.offset = endY - y;\n        }\n    }\n\n    return {\n        vertical: verticalInfo,\n        horizontal: horizontalInfo,\n    };\n}\nfunction checkBounds(\n    bounds: Required<BoundType>,\n    poses: number[],\n    isVertical: boolean,\n): BoundInfo[] {\n    // 0   [100 - 200]  300\n    const startBoundPos = bounds[isVertical ? \"left\" : \"top\"];\n    const endBoundPos = bounds[isVertical ? \"right\" : \"bottom\"];\n\n    // 450\n    const minPos = Math.min(...poses);\n    const maxPos = Math.max(...poses);\n    const boundInfos: BoundInfo[] = [];\n\n    if (startBoundPos + 1 > minPos) {\n        boundInfos.push({\n            direction: \"start\",\n            isBound: true,\n            offset: minPos - startBoundPos,\n            pos: startBoundPos,\n        });\n    }\n    if (endBoundPos - 1 < maxPos) {\n        boundInfos.push({\n            direction: \"end\",\n            isBound: true,\n            offset: maxPos - endBoundPos,\n            pos: endBoundPos,\n        });\n    }\n\n    if (!boundInfos.length) {\n        boundInfos.push({\n            isBound: false,\n            offset: 0,\n            pos: 0,\n        });\n    }\n\n    return boundInfos.sort((a, b) => abs(b.offset) - abs(a.offset));\n}\nexport function isBoundRotate(\n    relativePoses: number[][],\n    boundRect: { left: number, top: number, right: number, bottom: number },\n    rad: number,\n) {\n    const nextPoses = rad ? relativePoses.map(pos => rotate(pos, rad)) : relativePoses;\n\n    return nextPoses.some(pos => {\n        return (pos[0] < boundRect.left && abs(pos[0] - boundRect.left) > 0.1)\n            || (pos[0] > boundRect.right && abs(pos[0] - boundRect.right) > 0.1)\n            || (pos[1] < boundRect.top && abs(pos[1] - boundRect.top) > 0.1)\n            || (pos[1] > boundRect.bottom && abs(pos[1] - boundRect.bottom) > 0.1);\n    });\n}\nexport function boundRotate(\n    vec: number[],\n    boundPos: number,\n    index: number,\n) {\n    const r = getDistSize(vec);\n    const nextPos = Math.sqrt(r * r - boundPos * boundPos) || 0;\n\n    return [nextPos, -nextPos].sort((a, b) => {\n        return abs(a - vec[index ? 0 : 1]) - abs(b - vec[index ? 0 : 1]);\n    }).map(pos => {\n        return getRad([0, 0], index ? [pos, boundPos] : [boundPos, pos]);\n    });\n}\n\nexport function checkRotateBounds(\n    moveable: MoveableManagerInterface<SnappableProps & RotatableProps, SnappableState>,\n    prevPoses: number[][],\n    nextPoses: number[][],\n    origin: number[],\n    rotation: number,\n) {\n    if (!moveable.props.bounds) {\n        return [];\n    }\n    const rad = rotation * Math.PI / 180;\n\n    const {\n        left,\n        top,\n        right,\n        bottom,\n    } = getBounds(moveable);\n\n    const relativeLeft = left - origin[0];\n    const relativeRight = right - origin[0];\n    const relativeTop = top - origin[1];\n    const relativeBottom = bottom - origin[1];\n    const boundRect = {\n        left: relativeLeft,\n        top: relativeTop,\n        right: relativeRight,\n        bottom: relativeBottom,\n    };\n\n    if (!isBoundRotate(nextPoses, boundRect, 0)) {\n        return [];\n    }\n    const result: number[] = [];\n    [\n        [relativeLeft, 0],\n        [relativeRight, 0],\n        [relativeTop, 1],\n        [relativeBottom, 1],\n    ].forEach(([boundPos, index]) => {\n        nextPoses.forEach(nextPos => {\n            const relativeRad1 = getRad([0, 0], nextPos);\n\n            result.push(...boundRotate(nextPos, boundPos, index)\n                .map(relativeRad2 => rad + relativeRad2 - relativeRad1)\n                .filter(nextRad => !isBoundRotate(prevPoses, boundRect, nextRad))\n                .map(nextRad => throttle(nextRad * 180 / Math.PI, TINY_NUM)));\n        });\n    });\n\n    return result;\n}\n", "import { TINY_NUM } from \"@daybrush/utils\";\nimport { throttle } from \"@daybrush/utils\";\nimport {\n    MoveableClientRect, MoveableManagerInterface,\n    SnapDirectionPoses,\n    SnapDirections, SnappableProps,\n    SnappableState,\n} from \"../../types\";\nimport {\n    calculatePosition,\n} from \"../../utils\";\nexport const VERTICAL_NAMES = [\"left\", \"right\", \"center\"] as const;\nexport const HORIZONTAL_NAMES = [\"top\", \"bottom\", \"middle\"] as const;\nexport const SNAP_SKIP_NAMES_MAP = {\n    \"left\": \"start\",\n    \"right\": \"end\",\n    \"center\": \"center\",\n    \"top\": \"start\",\n    \"bottom\": \"end\",\n    \"middle\": \"center\",\n};\n\nexport const VERTICAL_NAMES_MAP = {\n    start: \"left\",\n    end: \"right\",\n    center: \"center\",\n} as const;\nexport const HORIZONTAL_NAMES_MAP = {\n    start: \"top\",\n    end: \"bottom\",\n    center: \"middle\",\n} as const;\n\n\n\nexport function getInitialBounds() {\n    return {\n        left: false,\n        top: false,\n        right: false,\n        bottom: false,\n    };\n}\n\n\nexport function hasGuidelines(\n    moveable: MoveableManagerInterface<any, any>,\n    ableName: string\n): moveable is MoveableManagerInterface<SnappableProps, SnappableState> {\n    const {\n        props: {\n            snappable,\n            bounds,\n            innerBounds,\n            verticalGuidelines,\n            horizontalGuidelines,\n            snapGridWidth,\n            snapGridHeight,\n        },\n        state: { guidelines, enableSnap },\n    } = moveable;\n\n    if (\n        !snappable ||\n        !enableSnap ||\n        (ableName && snappable !== true && snappable.indexOf(ableName) < 0)\n    ) {\n        return false;\n    }\n    if (\n        snapGridWidth ||\n        snapGridHeight ||\n        bounds ||\n        innerBounds ||\n        (guidelines && guidelines.length) ||\n        (verticalGuidelines && verticalGuidelines.length) ||\n        (horizontalGuidelines && horizontalGuidelines.length)\n    ) {\n        return true;\n    }\n    return false;\n}\n\nexport function getSnapDirections(snapDirections: SnapDirections | boolean | undefined): SnapDirections {\n    if (snapDirections === false) {\n        return {};\n    } else if (snapDirections === true || !snapDirections) {\n        return { left: true, right: true, top: true, bottom: true };\n    }\n    return snapDirections;\n}\n\nexport function mapSnapDirectionPoses(\n    snapDirections: SnapDirections | boolean | undefined,\n    snapPoses: SnapDirectionPoses,\n) {\n    const nextSnapDirections = getSnapDirections(snapDirections);\n    const nextSnapPoses: SnapDirectionPoses = {};\n\n    for (const name in nextSnapDirections) {\n        if (name in snapPoses && (nextSnapDirections as any)[name]) {\n            (nextSnapPoses as any)[name] = (snapPoses as any)[name];\n        }\n    }\n    return nextSnapPoses;\n}\n\nexport function splitSnapDirectionPoses(\n    snapDirections: SnapDirections | boolean | undefined,\n    snapPoses: SnapDirectionPoses,\n) {\n    const nextSnapPoses = mapSnapDirectionPoses(snapDirections, snapPoses);\n    const horizontalNames = HORIZONTAL_NAMES.filter(name => name in nextSnapPoses);\n    const verticalNames = VERTICAL_NAMES.filter(name => name in nextSnapPoses);\n\n    return {\n        horizontalNames,\n        verticalNames,\n        horizontal: horizontalNames.map(name => nextSnapPoses[name]!),\n        vertical: verticalNames.map(name => nextSnapPoses[name]!),\n    };\n}\n\nexport function calculateContainerPos(\n    rootMatrix: number[],\n    containerRect: MoveableClientRect,\n    n: number,\n) {\n    const clientPos = calculatePosition(\n        rootMatrix, [containerRect.clientLeft!, containerRect.clientTop!], n);\n\n    return [\n        containerRect.left + clientPos[0],\n        containerRect.top + clientPos[1],\n    ];\n}\n\nexport function solveLineConstants([point1, point2]: number[][]): [number, number, number] {\n    let dx = point2[0] - point1[0];\n    let dy = point2[1] - point1[1];\n\n    if (Math.abs(dx) < TINY_NUM) {\n        dx = 0;\n    }\n    if (Math.abs(dy) < TINY_NUM) {\n        dy = 0;\n    }\n\n    // b > 0\n    // ax + by + c = 0\n    let a = 0;\n    let b = 0;\n    let c = 0;\n\n    if (!dx) {\n        // -x + 1 = 0\n        a = -1;\n        c = point1[0];\n    } else if (!dy) {\n        // y - 1 = 0\n        b = 1;\n        c = -point1[1];\n    } else {\n        // y = -a(x - x1) + y1\n        // ax + y + a * x1 - y1 = 0\n        a = -dy / dx;\n        b = 1;\n        c = a * point1[0] - point1[1];\n    }\n\n    return [a, b, c].map(v => throttle(v, TINY_NUM)) as [number, number, number];\n}\n", "import {\n    SnapInfo, SnappableProps, SnappableState,\n    SnapGuideline, ResizableProps, ScalableProps,\n    SnapOffsetInfo, MoveableManagerInterface, SnapDirectionPoses, SnapDirectionInfo,\n} from \"../../types\";\nimport {\n    selectValue, getTinyDist, abs,\n} from \"../../utils\";\nimport { getPosByDirection, getPosesByDirection } from \"../../gesto/GestoUtils\";\nimport { TINY_NUM } from \"../../consts\";\nimport { minus } from \"@scena/matrix\";\nimport { splitSnapDirectionPoses } from \"./utils\";\n\n\n\nexport function checkMoveableSnapPoses(\n    moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n    posesX: number[],\n    posesY: number[],\n    dirXs: string[] = [],\n    dirYs: string[] = [],\n    customSnapThreshold?: number,\n) {\n    const props = moveable.props;\n    const snapThresholdMultiples = moveable.state.snapThresholdInfo?.multiples || [1, 1];\n    const snapThreshold = selectValue<number>(\n        customSnapThreshold,\n        props.snapThreshold,\n        5,\n    );\n\n    return checkSnapPoses(\n        moveable.state.guidelines,\n        posesX,\n        posesY,\n        dirXs,\n        dirYs,\n        snapThreshold,\n        snapThresholdMultiples,\n    );\n}\n\nexport function checkSnapPoses(\n    guidelines: SnapGuideline[],\n    posesX: number[],\n    posesY: number[],\n    dirXs: string[],\n    dirYs: string[],\n    snapThreshold: number,\n    multiples: number[],\n) {\n    return {\n        vertical: checkSnap(guidelines, \"vertical\", posesX, snapThreshold * multiples[0], dirXs),\n        horizontal: checkSnap(guidelines, \"horizontal\", posesY, snapThreshold * multiples[1], dirYs),\n    };\n}\nexport function checkSnapKeepRatio(\n    moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n    startPos: number[],\n    endPos: number[],\n): { vertical: SnapOffsetInfo, horizontal: SnapOffsetInfo } {\n    const [endX, endY] = endPos;\n    const [startX, startY] = startPos;\n    let [dx, dy] = minus(endPos, startPos);\n    const isBottom = dy > 0;\n    const isRight = dx > 0;\n\n    dx = getTinyDist(dx);\n    dy = getTinyDist(dy);\n\n    const verticalInfo: SnapOffsetInfo = {\n        isSnap: false,\n        offset: 0,\n        pos: 0,\n    };\n    const horizontalInfo: SnapOffsetInfo = {\n        isSnap: false,\n        offset: 0,\n        pos: 0,\n    };\n\n    if (dx === 0 && dy === 0) {\n        return {\n            vertical: verticalInfo,\n            horizontal: horizontalInfo,\n        };\n    }\n    const {\n        vertical: verticalSnapInfo,\n        horizontal: horizontalSnapInfo,\n    } = checkMoveableSnapPoses(moveable, dx ? [endX] : [], dy ? [endY] : []);\n\n    verticalSnapInfo.posInfos.filter(({ pos }) => {\n        return isRight ? pos >= startX : pos <= startX;\n    });\n    horizontalSnapInfo.posInfos.filter(({ pos }) => {\n        return isBottom ? pos >= startY : pos <= startY;\n    });\n    verticalSnapInfo.isSnap = verticalSnapInfo.posInfos.length > 0;\n    horizontalSnapInfo.isSnap = horizontalSnapInfo.posInfos.length > 0;\n\n    const {\n        isSnap: isVerticalSnap,\n        guideline: verticalGuideline,\n    } = getNearestSnapGuidelineInfo(verticalSnapInfo);\n    const {\n        isSnap: isHorizontalSnap,\n        guideline: horizontalGuideline,\n    } = getNearestSnapGuidelineInfo(horizontalSnapInfo);\n    const horizontalPos = isHorizontalSnap ? horizontalGuideline!.pos[1] : 0;\n    const verticalPos = isVerticalSnap ? verticalGuideline!.pos[0] : 0;\n\n    if (dx === 0) {\n        if (isHorizontalSnap) {\n            horizontalInfo.isSnap = true;\n            horizontalInfo.pos = horizontalGuideline!.pos[1];\n            horizontalInfo.offset = endY - horizontalInfo.pos;\n        }\n    } else if (dy === 0) {\n        if (isVerticalSnap) {\n            verticalInfo.isSnap = true;\n            verticalInfo.pos = verticalPos;\n            verticalInfo.offset = endX - verticalPos;\n        }\n    } else {\n        // y - y1 = a * (x - x1)\n        const a = dy / dx;\n        const b = endPos[1] - a * endX;\n        let y = 0;\n        let x = 0;\n        let isSnap = false;\n\n        if (isVerticalSnap) {\n            x = verticalPos;\n            y = a * x + b;\n            isSnap = true;\n        } else if (isHorizontalSnap) {\n            y = horizontalPos;\n            x = (y - b) / a;\n            isSnap = true;\n        }\n        if (isSnap) {\n            verticalInfo.isSnap = true;\n            verticalInfo.pos = x;\n            verticalInfo.offset = endX - x;\n\n            horizontalInfo.isSnap = true;\n            horizontalInfo.pos = y;\n            horizontalInfo.offset = endY - y;\n        }\n    }\n    return {\n        vertical: verticalInfo,\n        horizontal: horizontalInfo,\n    };\n}\n\n\nfunction getStringDirection(dir: number | string) {\n    let stringDirection = \"\";\n\n    if (dir === -1 || dir === \"top\" || dir === \"left\") {\n        stringDirection = \"start\";\n    } else if (dir === 0 || dir === \"center\" || dir === \"middle\") {\n        stringDirection = \"center\";\n    } else if (dir === 1 || dir === \"right\" || dir === \"bottom\") {\n        stringDirection = \"end\";\n    }\n    return stringDirection;\n}\n\n\nexport function checkSnaps(\n    moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n    rect: SnapDirectionPoses,\n    customSnapThreshold?: number,\n): { vertical: SnapDirectionInfo; horizontal: SnapDirectionInfo } {\n    const poses = splitSnapDirectionPoses(moveable.props.snapDirections, rect);\n\n    const result = checkMoveableSnapPoses(\n        moveable,\n        poses.vertical,\n        poses.horizontal,\n        poses.verticalNames.map(name => getStringDirection(name)),\n        poses.horizontalNames.map(name => getStringDirection(name)),\n        customSnapThreshold,\n    );\n    const horizontalDirection = getStringDirection(poses.horizontalNames[result.horizontal.index]);\n    const verticalDirection = getStringDirection(poses.verticalNames[result.vertical.index]);\n\n    return {\n        vertical: {\n            ...result.vertical,\n            direction: verticalDirection,\n        },\n        horizontal: {\n            ...result.horizontal,\n            direction: horizontalDirection,\n        },\n    };\n}\n\nexport function getNearestSnapGuidelineInfo(\n    snapInfo: SnapInfo,\n) {\n    const isSnap = snapInfo.isSnap;\n\n    if (!isSnap) {\n        return {\n            isSnap: false,\n            offset: 0,\n            dist: -1,\n            pos: 0,\n            guideline: null,\n        };\n    }\n    const posInfo = snapInfo.posInfos[0];\n    const guidelineInfo = posInfo!.guidelineInfos[0];\n    const offset = guidelineInfo!.offset;\n    const dist = guidelineInfo!.dist;\n    const guideline = guidelineInfo!.guideline;\n\n    return {\n        isSnap,\n        offset,\n        dist,\n        pos: posInfo!.pos,\n        guideline,\n    };\n}\n\nfunction checkSnap(\n    guidelines: SnapGuideline[],\n    targetType: \"horizontal\" | \"vertical\",\n    targetPoses: number[],\n    snapThreshold: number,\n    dirs: string[] = [],\n): SnapInfo {\n    if (!guidelines || !guidelines.length) {\n        return {\n            isSnap: false,\n            index: -1,\n            direction: \"\",\n            posInfos: [],\n        };\n    }\n    const isVertical = targetType === \"vertical\";\n    const posType = isVertical ? 0 : 1;\n\n    const snapPosInfos = targetPoses.map((targetPos, index) => {\n        const direction = dirs[index] || \"\";\n\n        const guidelineInfos = guidelines.map(guideline => {\n            const { pos } = guideline;\n            const offset = targetPos - pos[posType];\n\n            return {\n                offset,\n                dist: abs(offset),\n                guideline,\n                direction,\n            };\n        }).filter(({ guideline, dist }) => {\n            const { type } = guideline;\n            if (\n                type !== targetType\n                || dist > snapThreshold\n            ) {\n                return false;\n            }\n            return true;\n        }).sort(\n            (a, b) => a.dist - b.dist,\n        );\n\n\n        return {\n            pos: targetPos,\n            index,\n            guidelineInfos,\n            direction,\n        };\n    }).filter(snapPosInfo => {\n        return snapPosInfo.guidelineInfos.length > 0;\n    }).sort((a, b) => {\n        return a.guidelineInfos[0].dist - b.guidelineInfos[0].dist;\n    });\n\n    const isSnap = snapPosInfos.length > 0;\n    return {\n        isSnap,\n        index: isSnap ? snapPosInfos[0].index : -1,\n        direction: snapPosInfos[0]?.direction ?? \"\",\n        posInfos: snapPosInfos,\n    };\n}\n\nexport function getSnapInfosByDirection(\n    moveable: MoveableManagerInterface<SnappableProps & (ResizableProps | ScalableProps), SnappableState>,\n    // pos1 pos2 pos3 pos4\n    poses: number[][],\n    snapDirection: number[],\n    snapThreshold = 1,\n): { vertical: SnapDirectionInfo; horizontal: SnapDirectionInfo } {\n    let dirs: number[][] = [];\n\n    if (snapDirection[0] && snapDirection[1]) {\n        dirs = [\n            snapDirection,\n            [-snapDirection[0], snapDirection[1]],\n            [snapDirection[0], -snapDirection[1]],\n        ];\n    } else if (!snapDirection[0] && !snapDirection[1]) {\n        [\n            [-1, -1],\n            [1, -1],\n            [1, 1],\n            [-1, 1],\n        ].forEach((dir, i, arr) => {\n            const nextDir = (arr[i + 1] || arr[0]);\n            dirs.push(dir);\n            dirs.push([\n                (dir[0] + nextDir[0]) / 2,\n                (dir[1] + nextDir[1]) / 2,\n            ]);\n        });\n    } else {\n        if (moveable.props.keepRatio) {\n            dirs.push(\n                [-1, -1],\n                [-1, 1],\n                [1, -1],\n                [1, 1],\n                snapDirection,\n            );\n        } else {\n            dirs.push(...getPosesByDirection([\n                [-1, -1],\n                [1, -1],\n                [-1, -1],\n                [1, 1],\n            ], snapDirection));\n\n            if (dirs.length > 1) {\n                dirs.push([\n                    (dirs[0][0] + dirs[1][0]) / 2,\n                    (dirs[0][1] + dirs[1][1]) / 2,\n                ]);\n            }\n        }\n    }\n    const nextPoses = dirs.map(dir => getPosByDirection(poses, dir));\n    const xs = nextPoses.map(pos => pos[0]);\n    const ys = nextPoses.map(pos => pos[1]);\n    const result = checkMoveableSnapPoses(\n        moveable,\n        xs, ys,\n        dirs.map(dir => getStringDirection(dir[0])),\n        dirs.map(dir => getStringDirection(dir[1])),\n        snapThreshold\n    );\n    const verticalDirection = getStringDirection(dirs.map(dir => dir[0])[result.vertical.index]);\n    const horizontalDirection = getStringDirection(dirs.map(dir => dir[1])[result.horizontal.index]);\n\n    return {\n        vertical: {\n            ...result.vertical,\n            direction: verticalDirection,\n        },\n        horizontal: {\n            ...result.horizontal,\n            direction: horizontalDirection,\n        },\n    };\n}\n\nexport function checkSnapBoundPriority(\n    a: { isBound: boolean, isSnap: boolean, offset: number },\n    b: { isBound: boolean, isSnap: boolean, offset: number },\n) {\n    const aDist = abs(a.offset);\n    const bDist = abs(b.offset);\n\n    if (a.isBound && b.isBound) {\n        return bDist - aDist;\n    } else if (a.isBound) {\n        return -1;\n    } else if (b.isBound) {\n        return 1;\n    } else if (a.isSnap && b.isSnap) {\n        return bDist - aDist;\n    } else if (a.isSnap) {\n        return -1;\n    } else if (b.isSnap) {\n        return 1;\n    } else if (aDist < TINY_NUM) {\n        return 1;\n    } else if (bDist < TINY_NUM) {\n        return -1;\n    }\n    return aDist - bDist;\n}\nexport function getNearOffsetInfo<T extends { offset: number[], isBound: boolean, isSnap: boolean, sign: number[] }>(\n    offsets: T[],\n    index: number,\n) {\n    return offsets.slice().sort((a, b) => {\n        const aSign = a.sign[index];\n        const bSign = b.sign[index];\n        const aOffset = a.offset[index];\n        const bOffset = b.offset[index];\n        // -1 The positions of a and b do not change.\n        // 1 The positions of a and b are reversed.\n        if (!aSign) {\n            return 1;\n        } else if (!bSign) {\n            return -1;\n        }\n        return checkSnapBoundPriority(\n            { isBound: a.isBound, isSnap: a.isSnap, offset: aOffset },\n            { isBound: b.isBound, isSnap: b.isSnap, offset: bOffset },\n        );\n    })[0];\n}\n\n\nexport function getCheckSnapDirections(\n    direction: number[],\n    fixedDirection: number[],\n    keepRatio: boolean\n) {\n    const directions: number[][][] = [];\n    // const fixedDirection = [-direction[0], -direction[1]];\n\n    if (keepRatio) {\n        if (abs(fixedDirection[0]) !== 1 || abs(fixedDirection[1]) !== 1) {\n            directions.push(\n                [fixedDirection, [-1, -1]],\n                [fixedDirection, [-1, 1]],\n                [fixedDirection, [1, -1]],\n                [fixedDirection, [1, 1]],\n            );\n        } else {\n            directions.push(\n                [fixedDirection, [direction[0], -direction[1]]],\n                [fixedDirection, [-direction[0], direction[1]]],\n            );\n        }\n        directions.push([fixedDirection, direction]);\n    } else {\n        if ((direction[0] && direction[1]) || (!direction[0] && !direction[1])) {\n            const endDirection = direction[0] ? direction : [1, 1];\n\n            [1, -1].forEach(signX => {\n                [1, -1].forEach(signY => {\n                    const nextDirection = [signX * endDirection[0], signY * endDirection[1]];\n\n                    if (\n                        fixedDirection[0] === nextDirection[0]\n                        && fixedDirection[1] === nextDirection[1]\n                    ) {\n                        return;\n                    }\n                    directions.push([fixedDirection, nextDirection]);\n                });\n            });\n        } else if (direction[0]) {\n            const signs = abs(fixedDirection[0]) === 1 ? [1] : [1, -1];\n\n            signs.forEach(sign => {\n                directions.push(\n                    [\n                        [fixedDirection[0], -1],\n                        [sign * direction[0], -1],\n                    ],\n                    [\n                        [fixedDirection[0], 0],\n                        [sign * direction[0], 0],\n                    ],\n                    [\n                        [fixedDirection[0], 1],\n                        [sign * direction[0], 1],\n                    ]\n                );\n            });\n        } else if (direction[1]) {\n            const signs = abs(fixedDirection[1]) === 1 ? [1] : [1, -1];\n\n            signs.forEach(sign => {\n                directions.push(\n                    [\n                        [-1, fixedDirection[1]],\n                        [-1, sign * direction[1]],\n                    ],\n                    [\n                        [0, fixedDirection[1]],\n                        [0, sign * direction[1]],\n                    ],\n                    [\n                        [1, fixedDirection[1]],\n                        [1, sign * direction[1]],\n                    ]\n                );\n            });\n        }\n    }\n    return directions;\n}\n", "import { average, getRad, throttle } from \"@daybrush/utils\";\nimport { rotate } from \"@scena/matrix\";\nimport { maxOffset, getDistSize, getTinyDist, calculatePoses, abs } from \"../../utils\";\n\nimport { SnappableProps, DraggableProps, RotatableProps, MoveableManagerInterface } from \"../../types\";\nimport { getDragDist, getPosByDirection, getInverseDragDist } from \"../../gesto/GestoUtils\";\nimport { getNearOffsetInfo } from \"./snap\";\nimport { TINY_NUM } from \"../../consts\";\nimport { getInitialBounds, solveLineConstants } from \"./utils\";\n\nfunction isStartLine(dot: number[], line: number[][]) {\n    // l    o     => true\n    // o    l    => false\n    const cx = average([line[0][0], line[1][0]]);\n    const cy = average([line[0][1], line[1][1]]);\n\n    return {\n        vertical: cx <= dot[0],\n        horizontal: cy <= dot[1],\n    };\n}\nfunction hitTestLine(\n    dot: number[],\n    [pos1, pos2]: number[][],\n) {\n    let dx = pos2[0] - pos1[0];\n    let dy = pos2[1] - pos1[1];\n\n    if (abs(dx) < TINY_NUM) {\n        dx = 0;\n    }\n    if (abs(dy) < TINY_NUM) {\n        dy = 0;\n    }\n    let test1: number;\n    let test2: number;\n    if (!dx) {\n        test1 = pos1[0];\n        test2 = dot[0];\n    } else if (!dy) {\n        test1 = pos1[1];\n        test2 = dot[1];\n    } else {\n        const a = dy / dx;\n\n        // y = a * (x - pos1) + pos1\n        test1 = a * (dot[0] - pos1[0]) + pos1[1];\n        test2 = dot[1];\n    }\n    return test1 - test2;\n}\nfunction isSameStartLine(dots: number[][], line: number[][], centerSign: boolean, error: number = TINY_NUM) {\n    return dots.every(dot => {\n        const value = hitTestLine(dot, line);\n        const sign = value <= 0;\n        return sign === centerSign || abs(value) <= error;\n    });\n}\nfunction checkInnerBoundDot(\n    pos: number,\n    start: number,\n    end: number,\n    isStart: boolean,\n    threshold = 0,\n) {\n    if (\n        (isStart && start - threshold <= pos)\n        || (!isStart && pos <= end + threshold)\n    ) {\n        // false 402 565 602 => 37 ([0, 37])\n        // true 400 524.9712603540036 600 => 124 ([124, 0])\n        // true 400 410 600 => 10 ([10, 0])\n        return {\n            isBound: true,\n            offset: isStart ? start - pos : end - pos,\n        };\n    }\n    return {\n        isBound: false,\n        offset: 0,\n    };\n}\n\nfunction checkInnerBound(\n    moveable: MoveableManagerInterface<SnappableProps>,\n    { line, centerSign, verticalSign, horizontalSign, lineConstants }: InnerBoundLineInfo,\n) {\n    const bounds = moveable.props.innerBounds;\n\n    if (!bounds) {\n        return {\n            isAllBound: false,\n            isBound: false,\n            isVerticalBound: false,\n            isHorizontalBound: false,\n            offset: [0, 0],\n        };\n    }\n    const { left, top, width, height } = bounds;\n    const leftLine = [[left, top], [left, top + height]];\n    const topLine = [[left, top], [left + width, top]];\n    const rightLine = [[left + width, top], [left + width, top + height]];\n    const bottomLine = [[left, top + height], [left + width, top + height]];\n\n    if (isSameStartLine([\n        [left, top],\n        [left + width, top],\n        [left, top + height],\n        [left + width, top + height],\n    ], line, centerSign)) {\n        return {\n            isAllBound: false,\n            isBound: false,\n            isVerticalBound: false,\n            isHorizontalBound: false,\n            offset: [0, 0],\n        };\n    }\n    // test vertical\n\n    const topBoundInfo = checkLineBoundCollision(line, lineConstants, topLine, verticalSign);\n    const bottomBoundInfo = checkLineBoundCollision(line, lineConstants, bottomLine, verticalSign);\n\n    // test horizontal\n    const leftBoundInfo = checkLineBoundCollision(line, lineConstants, leftLine, horizontalSign);\n    const rightBoundInfo = checkLineBoundCollision(line, lineConstants, rightLine, horizontalSign);\n\n    const isAllVerticalBound = topBoundInfo.isBound && bottomBoundInfo.isBound;\n    const isVerticalBound = topBoundInfo.isBound || bottomBoundInfo.isBound;\n    const isAllHorizontalBound = leftBoundInfo.isBound && rightBoundInfo.isBound;\n    const isHorizontalBound = leftBoundInfo.isBound || rightBoundInfo.isBound;\n    const verticalOffset = maxOffset(topBoundInfo.offset, bottomBoundInfo.offset);\n    const horizontalOffset = maxOffset(leftBoundInfo.offset, rightBoundInfo.offset);\n    let offset = [0, 0];\n    let isBound = false;\n    let isAllBound = false;\n\n    if (abs(horizontalOffset) < abs(verticalOffset)) {\n        offset = [verticalOffset, 0];\n        isBound = isVerticalBound;\n        isAllBound = isAllVerticalBound;\n    } else {\n        offset = [0, horizontalOffset];\n        isBound = isHorizontalBound;\n        isAllBound = isAllHorizontalBound;\n    }\n    return {\n        isAllBound,\n        isVerticalBound,\n        isHorizontalBound,\n        isBound,\n        offset,\n    };\n}\n\nfunction checkLineBoundCollision(\n    line: number[][],\n    [a, b]: [number, number, number],\n    boundLine: number[][],\n    isStart: boolean,\n    threshold?: number,\n    isRender?: boolean,\n) {\n    const dot1 = line[0];\n    // const dot2 = line[1];\n    const boundDot1 = boundLine[0];\n    const boundDot2 = boundLine[1];\n\n    // const dy1 = getTinyDist(dot2[1] - dot1[1]);\n    // const dx1 = getTinyDist(dot2[0] - dot1[0]);\n    const dy2 = getTinyDist(boundDot2[1] - boundDot1[1]);\n    const dx2 = getTinyDist(boundDot2[0] - boundDot1[0]);\n\n    const hasDx = b;\n    const hasDy = a;\n    const slope = - a / b;\n    // lineConstants\n    // ax + by + c = 0\n    // dx2 or dy2 is zero\n    if (!dx2) {\n        // vertical\n        // by + c = 0\n        if (isRender && !hasDy) {\n            // 90deg\n            return {\n                isBound: false,\n                offset: 0,\n            };\n        } else if (hasDx) {\n            // ax + by + c = 0\n            // const y = dy1 ? dy1 / dx1 * (boundDot1[0] - dot1[0]) + dot1[1] : dot1[1];\n            const y = slope * (boundDot1[0] - dot1[0]) + dot1[1];\n\n            // boundDot1[1] <= y  <= boundDot2[1]\n            return checkInnerBoundDot(y, boundDot1[1], boundDot2[1], isStart, threshold);\n        } else {\n            // ax + c = 0\n            const offset = boundDot1[0] - dot1[0];\n\n            const isBound = abs(offset) <= (threshold || 0);\n\n            return {\n                isBound,\n                offset: isBound ? offset : 0,\n            };\n        }\n    } else if (!dy2) {\n        // horizontal\n        if (isRender && !hasDx) {\n            // 90deg\n            return {\n                isBound: false,\n                offset: 0,\n            };\n        } else if (hasDy) {\n            // y = a * (x - x1) + y1\n            // x = (y - y1) / a + x1\n            // const a = dy1 / dx1;\n            // const x = dx1 ? (boundDot1[1] - dot1[1]) / a + dot1[0] : dot1[0];\n            const x = (boundDot1[1] - dot1[1]) / slope + dot1[0];\n\n            // boundDot1[0] <= x && x <= boundDot2[0]\n            return checkInnerBoundDot(x, boundDot1[0], boundDot2[0], isStart, threshold);\n        } else {\n            const offset = boundDot1[1] - dot1[1];\n\n            const isBound = abs(offset) <= (threshold || 0);\n\n            return {\n                isBound,\n                offset: isBound ? offset : 0,\n            };\n        }\n    }\n    return {\n        isBound: false,\n        offset: 0,\n    };\n}\nexport function getInnerBoundInfo(\n    moveable: MoveableManagerInterface<SnappableProps>,\n    lineInfos: InnerBoundLineInfo[],\n    datas: any,\n) {\n    return lineInfos.map(info => {\n        const {\n            isBound,\n            offset,\n            isVerticalBound,\n            isHorizontalBound,\n        } = checkInnerBound(moveable, info);\n\n        const multiple = info.multiple;\n\n        const sizeOffset = getDragDist({\n            datas,\n            distX: offset[0],\n            distY: offset[1],\n        }).map((size, i) => size * (multiple[i] ? 2 / multiple[i] : 0));\n\n        return {\n            sign: multiple,\n            isBound,\n            isVerticalBound,\n            isHorizontalBound,\n            isSnap: false,\n            offset: sizeOffset,\n        };\n    });\n}\n\nexport function getInnerBoundDragInfo(\n    moveable: MoveableManagerInterface<SnappableProps & DraggableProps, any>,\n    poses: number[][],\n    datas: any,\n) {\n    const lines = getCheckInnerBoundLineInfos(moveable, poses, [0, 0], false).map(info => {\n        return {\n            ...info,\n            multiple: info.multiple.map(dir => abs(dir) * 2),\n        };\n    });\n    const innerBoundInfo = getInnerBoundInfo(moveable, lines, datas);\n    const widthOffsetInfo = getNearOffsetInfo(innerBoundInfo, 0);\n    const heightOffsetInfo = getNearOffsetInfo(innerBoundInfo, 1);\n    let verticalOffset = 0;\n    let horizontalOffset = 0;\n    const isVerticalBound = widthOffsetInfo.isVerticalBound || heightOffsetInfo.isVerticalBound;\n    const isHorizontalBound = widthOffsetInfo.isHorizontalBound || heightOffsetInfo.isHorizontalBound;\n\n    if (isVerticalBound || isHorizontalBound) {\n        [verticalOffset, horizontalOffset] = getInverseDragDist({\n            datas,\n            distX: -widthOffsetInfo.offset[0],\n            distY: -heightOffsetInfo.offset[1],\n        });\n    }\n\n    return {\n        vertical: {\n            isBound: isVerticalBound,\n            offset: verticalOffset,\n        },\n        horizontal: {\n            isBound: isHorizontalBound,\n            offset: horizontalOffset,\n        },\n    };\n}\nexport function getCheckSnapLineDirections(\n    direction: number[],\n    keepRatio: boolean,\n) {\n    const lineDirections: number[][][] = [];\n    const x = direction[0];\n    const y = direction[1];\n    if (x && y) {\n        lineDirections.push(\n            [[0, y * 2], direction, [-x, y]],\n            [[x * 2, 0], direction, [x, -y]],\n        );\n    } else if (x) {\n        // vertcal\n        lineDirections.push(\n            [[x * 2, 0], [x, 1], [x, -1]],\n        );\n        if (keepRatio) {\n            lineDirections.push(\n                [[0, -1], [x, -1], [-x, -1]],\n                [[0, 1], [x, 1], [-x, 1]],\n            );\n        }\n    } else if (y) {\n        // horizontal\n        lineDirections.push(\n            [[0, y * 2], [1, y], [-1, y]],\n        );\n        if (keepRatio) {\n            lineDirections.push(\n                [[-1, 0], [-1, y], [-1, -y]],\n                [[1, 0], [1, y], [1, -y]],\n            );\n        }\n    } else {\n        // [0, 0] to all direction\n        lineDirections.push(\n            [[-1, 0], [-1, -1], [-1, 1]],\n            [[1, 0], [1, -1], [1, 1]],\n            [[0, -1], [-1, -1], [1, -1]],\n            [[0, 1], [-1, 1], [1, 1]],\n        );\n    }\n\n    return lineDirections;\n}\nexport interface InnerBoundLineInfo {\n    line: number[][];\n    multiple: number[];\n    horizontalSign: boolean;\n    verticalSign: boolean;\n    centerSign: boolean;\n    lineConstants: [number, number, number];\n}\nexport function getCheckInnerBoundLineInfos(\n    moveable: MoveableManagerInterface<SnappableProps>,\n    poses: number[][],\n    direction: number[],\n    keepRatio: boolean,\n): InnerBoundLineInfo[] {\n    const {\n        allMatrix,\n        is3d,\n    } = moveable.state;\n    const virtualPoses = calculatePoses(allMatrix, 100, 100, is3d ? 4 : 3);\n    const center = getPosByDirection(virtualPoses, [0, 0]);\n\n    return getCheckSnapLineDirections(direction, keepRatio).map(([multiple, dir1, dir2]) => {\n        const virtualLine = [\n            getPosByDirection(virtualPoses, dir1),\n            getPosByDirection(virtualPoses, dir2),\n        ];\n        const lineConstants = solveLineConstants(virtualLine);\n        const {\n            vertical: verticalSign,\n            horizontal: horizontalSign,\n        } = isStartLine(center, virtualLine);\n        const centerSign = hitTestLine(center, virtualLine) <= 0;\n\n        return {\n            multiple,\n            centerSign,\n            verticalSign,\n            horizontalSign,\n            lineConstants,\n            line: [\n                getPosByDirection(poses, dir1),\n                getPosByDirection(poses, dir2),\n            ],\n        };\n    });\n}\n\nfunction isBoundRotate(\n    relativePoses: number[][],\n    boundDots: number[][],\n    center: number[],\n    rad: number,\n) {\n    const nextPoses = rad ? relativePoses.map(pos => rotate(pos, rad)) : relativePoses;\n    return [\n        [nextPoses[0], nextPoses[1]],\n        [nextPoses[1], nextPoses[3]],\n        [nextPoses[3], nextPoses[2]],\n        [nextPoses[2], nextPoses[0]],\n    ].some(line => {\n        const centerSign = hitTestLine(center, line) <= 0;\n\n        return !isSameStartLine(boundDots, line, centerSign);\n    });\n}\nfunction getDistPointLine([pos1, pos2]: number[][]) {\n    // x = 0, y = 0\n    // d = (ax + by + c) / root(a2 + b2)\n\n    const dx = pos2[0] - pos1[0];\n    const dy = pos2[1] - pos1[1];\n\n    if (!dx) {\n        return abs(pos1[0]);\n    }\n    if (!dy) {\n        return abs(pos1[1]);\n    }\n    // y - y1 = a(x - x1)\n    // 0 = ax -y + -a * x1 + y1\n\n    const a = dy / dx;\n\n    return abs((-a * pos1[0] + pos1[1]) / Math.sqrt(Math.pow(a, 2) + 1));\n}\nfunction solveReverseLine([pos1, pos2]: number[][]) {\n    const dx = pos2[0] - pos1[0];\n    const dy = pos2[1] - pos1[1];\n\n    if (!dx) {\n        return [pos1[0], 0];\n    }\n    if (!dy) {\n        return [0, pos1[1]];\n    }\n    const a = dy / dx;\n    // y - y1 = a (x  - x1)\n    // y = ax - a * x1 + y1\n    const b = -a * pos1[0] + pos1[1];\n    // y = ax + b = -1/a x\n    // x = -b / (a + 1 / a)\n    // y = b / (1 + 1 / a^2)\n\n    return [\n        -b / (a + 1 / a),\n        b / ((a * a) + 1),\n    ];\n}\nexport function checkRotateInnerBounds(\n    moveable: MoveableManagerInterface<SnappableProps & RotatableProps, any>,\n    prevPoses: number[][],\n    nextPoses: number[][],\n    origin: number[],\n    rotation: number,\n) {\n    const bounds = moveable.props.innerBounds;\n    const rad = rotation * Math.PI / 180;\n\n    if (!bounds) {\n        return [];\n    }\n    const {\n        left,\n        top,\n        width,\n        height,\n    } = bounds;\n\n    const relativeLeft = left - origin[0];\n    const relativeRight = left + width - origin[0];\n    const relativeTop = top - origin[1];\n    const relativeBottom = top + height - origin[1];\n    const dots = [\n        [relativeLeft, relativeTop],\n        [relativeRight, relativeTop],\n        [relativeLeft, relativeBottom],\n        [relativeRight, relativeBottom],\n    ];\n    const center = getPosByDirection(nextPoses, [0, 0]);\n\n    if (!isBoundRotate(nextPoses, dots, center, 0)) {\n        return [];\n    }\n    const result: number[] = [];\n    const dotInfos = dots.map(dot => [\n        getDistSize(dot),\n        getRad([0, 0], dot),\n    ]);\n    [\n        [nextPoses[0], nextPoses[1]],\n        [nextPoses[1], nextPoses[3]],\n        [nextPoses[3], nextPoses[2]],\n        [nextPoses[2], nextPoses[0]],\n    ].forEach(line => {\n        const lineRad = getRad([0, 0], solveReverseLine(line));\n        const lineDist = getDistPointLine(line);\n\n        result.push(...dotInfos\n            .filter(([dotDist]) => {\n                return dotDist && lineDist <= dotDist;\n            })\n            .map(([dotDist, dotRad]) => {\n                const distRad = Math.acos(dotDist ? lineDist / dotDist : 0);\n                const nextRad1 = dotRad + distRad;\n                const nextRad2 = dotRad - distRad;\n\n                return [\n                    rad + nextRad1 - lineRad,\n                    rad + nextRad2 - lineRad,\n                ];\n            })\n            .reduce((prev, cur) => {\n                prev.push(...cur);\n                return prev;\n            }, [])\n            .filter(nextRad => !isBoundRotate(prevPoses, dots, center, nextRad))\n            .map(nextRad => throttle(nextRad * 180 / Math.PI, TINY_NUM)));\n    });\n    return result;\n}\n\nexport function checkInnerBoundPoses(\n    moveable: MoveableManagerInterface<SnappableProps>,\n) {\n    const innerBounds = moveable.props.innerBounds;\n    const boundMap = getInitialBounds();\n\n    if (!innerBounds) {\n        return {\n            boundMap,\n            vertical: [],\n            horizontal: [],\n        };\n    }\n    const {\n        pos1,\n        pos2,\n        pos3,\n        pos4,\n    } = moveable.getRect();\n    const poses = [pos1, pos2, pos3, pos4];\n    const center = getPosByDirection(poses, [0, 0]);\n    const { left, top, width, height } = innerBounds;\n    const leftLine = [[left, top], [left, top + height]];\n    const topLine = [[left, top], [left + width, top]];\n    const rightLine = [[left + width, top], [left + width, top + height]];\n    const bottomLine = [[left, top + height], [left + width, top + height]];\n    const lineInfos = getCheckInnerBoundLineInfos(moveable, poses, [0, 0], false);\n\n    const horizontalPoses: number[] = [];\n    const verticalPoses: number[] = [];\n\n\n    lineInfos.forEach(lineInfo => {\n        const { line, lineConstants } = lineInfo;\n        const {\n            horizontal: isHorizontalStart,\n            vertical: isVerticalStart,\n        } = isStartLine(center, line);\n\n        // test vertical\n        const topBoundInfo = checkLineBoundCollision(line, lineConstants, topLine, isVerticalStart, 1, true);\n        const bottomBoundInfo = checkLineBoundCollision(line, lineConstants, bottomLine, isVerticalStart, 1, true);\n\n        // test horizontal\n        const leftBoundInfo = checkLineBoundCollision(line, lineConstants, leftLine, isHorizontalStart, 1, true);\n        const rightBoundInfo = checkLineBoundCollision(line, lineConstants, rightLine, isHorizontalStart, 1, true);\n\n        if (topBoundInfo.isBound && !boundMap.top) {\n            horizontalPoses.push(top);\n            boundMap.top = true;\n        }\n        if (bottomBoundInfo.isBound && !boundMap.bottom) {\n            horizontalPoses.push(top + height);\n            boundMap.bottom = true;\n        }\n        if (leftBoundInfo.isBound && !boundMap.left) {\n            verticalPoses.push(left);\n            boundMap.left = true;\n        }\n        if (rightBoundInfo.isBound && !boundMap.right) {\n            verticalPoses.push(left + width);\n            boundMap.right = true;\n        }\n    });\n\n    return {\n        boundMap,\n        horizontal: horizontalPoses,\n        vertical: verticalPoses,\n    };\n}\n", "import { getDist, getRad, IObject, TINY_NUM } from \"@daybrush/utils\";\nimport { minus } from \"@scena/matrix\";\nimport { abs, getAbsolutePoses, getDistSize, getRect, maxOffset } from \"../../utils\";\nimport { getDragDist, getPosByDirection } from \"../../gesto/GestoUtils\";\nimport {\n    BoundInfo, SnapInfo, MoveableManagerInterface, SnappableProps,\n    SnappableState, SnapBoundInfo, SnapGuideline, BoundType, SnapOffsetInfo, DraggableProps,\n} from \"../../types\";\nimport { checkBoundKeepRatio, checkBoundPoses, getBounds } from \"./bounds\";\nimport { getInnerBoundDragInfo } from \"./innerBounds\";\nimport {\n    getNearestSnapGuidelineInfo, checkMoveableSnapPoses,\n    checkSnapPoses, checkSnapKeepRatio,\n} from \"./snap\";\nimport { hasGuidelines, getSnapDirections, splitSnapDirectionPoses } from \"./utils\";\n\ninterface DirectionSnapType<T> {\n    vertical: T;\n    horizontal: T;\n}\n\nexport function solveEquation(\n    pos1: number[],\n    pos2: number[],\n    snapOffset: number,\n    isVertical: boolean\n) {\n    let dx = pos2[0] - pos1[0];\n    let dy = pos2[1] - pos1[1];\n\n    if (abs(dx) < TINY_NUM) {\n        dx = 0;\n    }\n    if (abs(dy) < TINY_NUM) {\n        dy = 0;\n    }\n    if (!dx) {\n        // y = 0 * x + b\n        // only horizontal\n        if (!isVertical) {\n            return [0, snapOffset];\n        }\n        return [0, 0];\n    }\n    if (!dy) {\n        // only vertical\n        if (isVertical) {\n            return [snapOffset, 0];\n        }\n        return [0, 0];\n    }\n    // y = ax + b\n    const a = dy / dx;\n    const b = pos1[1] - a * pos1[0];\n\n    if (isVertical) {\n        // y = a * x + b\n        const y = a * (pos2[0] + snapOffset) + b;\n\n        return [snapOffset, y - pos2[1]];\n    } else {\n        // x = (y - b) / a\n        const x = (pos2[1] + snapOffset - b) / a;\n\n        return [x - pos2[0], snapOffset];\n    }\n}\n\n\nfunction solveNextOffset(\n    pos1: number[],\n    pos2: number[],\n    offset: number,\n    isVertical: boolean,\n    datas: IObject<any>\n) {\n    const sizeOffset = solveEquation(pos1, pos2, offset, isVertical);\n\n    if (!sizeOffset) {\n        return {\n            isOutside: false,\n            offset: [0, 0],\n        };\n    }\n    const size = getDist(pos1, pos2);\n    const dist1 = getDist(sizeOffset, pos1);\n    const dist2 = getDist(sizeOffset, pos2);\n\n    const isOutside = dist1 > size || dist2 > size;\n    const [widthOffset, heightOffset] = getDragDist({\n        datas,\n        distX: sizeOffset[0],\n        distY: sizeOffset[1],\n    });\n\n    return {\n        offset: [widthOffset, heightOffset],\n        isOutside,\n    };\n}\n\nfunction getSnapBound(boundInfo: BoundInfo, snapInfo: SnapInfo) {\n    if (boundInfo.isBound) {\n        return boundInfo.offset;\n    } else if (snapInfo.isSnap) {\n        return getNearestSnapGuidelineInfo(snapInfo).offset;\n    }\n    return 0;\n}\n\n\nexport function checkThrottleDragRotate(\n    throttleDragRotate: number,\n    [distX, distY]: number[],\n    [isVerticalBound, isHorizontalBound]: boolean[],\n    [isVerticalSnap, isHorizontalSnap]: boolean[],\n    [verticalOffset, horizontalOffset]: number[]\n) {\n    let offsetX = -verticalOffset;\n    let offsetY = -horizontalOffset;\n\n    if (throttleDragRotate && distX && distY) {\n        offsetX = 0;\n        offsetY = 0;\n        const adjustPoses: number[][] = [];\n        if (isVerticalBound && isHorizontalBound) {\n            adjustPoses.push([0, horizontalOffset], [verticalOffset, 0]);\n        } else if (isVerticalBound) {\n            adjustPoses.push([verticalOffset, 0]);\n        } else if (isHorizontalBound) {\n            adjustPoses.push([0, horizontalOffset]);\n        } else if (isVerticalSnap && isHorizontalSnap) {\n            adjustPoses.push([0, horizontalOffset], [verticalOffset, 0]);\n        } else if (isVerticalSnap) {\n            adjustPoses.push([verticalOffset, 0]);\n        } else if (isHorizontalSnap) {\n            adjustPoses.push([0, horizontalOffset]);\n        }\n        if (adjustPoses.length) {\n            adjustPoses.sort((a, b) => {\n                return (\n                    getDistSize(minus([distX, distY], a)) -\n                    getDistSize(minus([distX, distY], b))\n                );\n            });\n            const adjustPos = adjustPoses[0];\n\n            if (adjustPos[0] && abs(distX) > TINY_NUM) {\n                offsetX = -adjustPos[0];\n                offsetY =\n                    (distY * abs(distX + offsetX)) / abs(distX) -\n                    distY;\n            } else if (adjustPos[1] && abs(distY) > TINY_NUM) {\n                const prevDistY = distY;\n                offsetY = -adjustPos[1];\n                offsetX =\n                    (distX * abs(distY + offsetY)) / abs(prevDistY) -\n                    distX;\n            }\n            if (throttleDragRotate && isHorizontalBound && isVerticalBound) {\n                if (\n                    abs(offsetX) > TINY_NUM &&\n                    abs(offsetX) < abs(verticalOffset)\n                ) {\n                    const scale = abs(verticalOffset) / abs(offsetX);\n\n                    offsetX *= scale;\n                    offsetY *= scale;\n                } else if (\n                    abs(offsetY) > TINY_NUM &&\n                    abs(offsetY) < abs(horizontalOffset)\n                ) {\n                    const scale =\n                        abs(horizontalOffset) / abs(offsetY);\n\n                    offsetX *= scale;\n                    offsetY *= scale;\n                } else {\n                    offsetX = maxOffset(-verticalOffset, offsetX);\n                    offsetY = maxOffset(-horizontalOffset, offsetY);\n                }\n            }\n        }\n    } else {\n        offsetX = distX || isVerticalBound ? -verticalOffset : 0;\n        offsetY = distY || isHorizontalBound ? -horizontalOffset : 0;\n    }\n    return [offsetX, offsetY];\n}\n\nexport function checkSnapBoundsDrag(\n    moveable: MoveableManagerInterface<SnappableProps & DraggableProps, any>,\n    distX: number,\n    distY: number,\n    throttleDragRotate: number,\n    ignoreSnap: boolean,\n    datas: any\n) {\n    if (!hasGuidelines(moveable, \"draggable\")) {\n        return [\n            {\n                isSnap: false,\n                isBound: false,\n                offset: 0,\n            },\n            {\n                isSnap: false,\n                isBound: false,\n                offset: 0,\n            },\n        ];\n    }\n    const poses = getAbsolutePoses(datas.absolutePoses, [distX, distY]);\n    const { left, right, top, bottom } = getRect(poses);\n    const boundPoses = {\n        horizontal: poses.map((pos) => pos[1]),\n        vertical: poses.map((pos) => pos[0]),\n    };\n    const snapDirections = getSnapDirections(moveable.props.snapDirections);\n    const snapPoses = splitSnapDirectionPoses(snapDirections, {\n        left,\n        right,\n        top,\n        bottom,\n        center: (left + right) / 2,\n        middle: (top + bottom) / 2,\n    });\n    const {\n        vertical: verticalSnapBoundInfo,\n        horizontal: horizontalSnapBoundInfo,\n    } = checkMoveableSnapBounds(moveable, ignoreSnap, snapPoses, boundPoses);\n    const {\n        vertical: verticalInnerBoundInfo,\n        horizontal: horizontalInnerBoundInfo,\n    } = getInnerBoundDragInfo(moveable, poses, datas);\n\n    const isVerticalSnap = verticalSnapBoundInfo.isSnap;\n    const isHorizontalSnap = horizontalSnapBoundInfo.isSnap;\n    const isVerticalBound =\n        verticalSnapBoundInfo.isBound || verticalInnerBoundInfo.isBound;\n    const isHorizontalBound =\n        horizontalSnapBoundInfo.isBound || horizontalInnerBoundInfo.isBound;\n    const verticalOffset = maxOffset(\n        verticalSnapBoundInfo.offset,\n        verticalInnerBoundInfo.offset\n    );\n    const horizontalOffset = maxOffset(\n        horizontalSnapBoundInfo.offset,\n        horizontalInnerBoundInfo.offset\n    );\n\n    const [offsetX, offsetY] = checkThrottleDragRotate(\n        throttleDragRotate,\n        [distX, distY],\n        [isVerticalBound, isHorizontalBound],\n        [isVerticalSnap, isHorizontalSnap],\n        [verticalOffset, horizontalOffset]\n    );\n\n    return [\n        {\n            isBound: isVerticalBound,\n            isSnap: isVerticalSnap,\n            offset: offsetX,\n        },\n        {\n            isBound: isHorizontalBound,\n            isSnap: isHorizontalSnap,\n            offset: offsetY,\n        },\n    ];\n}\n\nexport function checkMoveableSnapBounds(\n    moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n    ignoreSnap: boolean,\n    poses: { vertical: number[]; horizontal: number[]; },\n    boundPoses: { vertical: number[]; horizontal: number[]; } = poses,\n): DirectionSnapType<Required<SnapBoundInfo>> {\n    const {\n        horizontal: horizontalBoundInfos,\n        vertical: verticalBoundInfos,\n    } = checkBoundPoses(\n        getBounds(moveable),\n        boundPoses.vertical,\n        boundPoses.horizontal,\n    );\n    const {\n        horizontal: horizontalSnapInfo,\n        vertical: verticalSnapInfo,\n    } = ignoreSnap ? {\n        horizontal: { isSnap: false, index: -1 } as SnapInfo,\n        vertical: { isSnap: false, index: -1 } as SnapInfo,\n    } : checkMoveableSnapPoses(\n        moveable,\n        poses.vertical,\n        poses.horizontal,\n    );\n    const horizontalOffset = getSnapBound(\n        horizontalBoundInfos[0],\n        horizontalSnapInfo\n    );\n    const verticalOffset = getSnapBound(\n        verticalBoundInfos[0],\n        verticalSnapInfo\n    );\n\n    const horizontalDist = abs(horizontalOffset);\n    const verticalDist = abs(verticalOffset);\n\n    return {\n        horizontal: {\n            isBound: horizontalBoundInfos[0].isBound,\n            isSnap: horizontalSnapInfo.isSnap,\n            snapIndex: horizontalSnapInfo.index,\n            offset: horizontalOffset,\n            dist: horizontalDist,\n            bounds: horizontalBoundInfos,\n            snap: horizontalSnapInfo,\n        },\n        vertical: {\n            isBound: verticalBoundInfos[0].isBound,\n            isSnap: verticalSnapInfo.isSnap,\n            snapIndex: verticalSnapInfo.index,\n            offset: verticalOffset,\n            dist: verticalDist,\n            bounds: verticalBoundInfos,\n            snap: verticalSnapInfo,\n        },\n    };\n}\nexport function checkSnapBounds(\n    guideines: SnapGuideline[],\n    bounds: BoundType | undefined | false,\n    posesX: number[],\n    posesY: number[],\n    snapThreshold: number,\n    multiples = [1, 1],\n): DirectionSnapType<Required<SnapBoundInfo>> {\n    const {\n        horizontal: horizontalBoundInfos,\n        vertical: verticalBoundInfos,\n    } = checkBoundPoses(bounds, posesX, posesY);\n\n    // options.isRequest ? {\n    //     horizontal: { isSnap: false, index: -1 } as SnapInfo,\n    //     vertical: { isSnap: false, index: -1 } as SnapInfo,\n    // } :\n    const {\n        horizontal: horizontalSnapInfo,\n        vertical: verticalSnapInfo,\n    } = checkSnapPoses(\n        guideines, posesX, posesY, [], [],\n        snapThreshold,\n        multiples,\n    );\n\n    const horizontalOffset = getSnapBound(\n        horizontalBoundInfos[0],\n        horizontalSnapInfo\n    );\n    const verticalOffset = getSnapBound(\n        verticalBoundInfos[0],\n        verticalSnapInfo\n    );\n\n    const horizontalDist = abs(horizontalOffset);\n    const verticalDist = abs(verticalOffset);\n\n    return {\n        horizontal: {\n            isBound: horizontalBoundInfos[0].isBound,\n            isSnap: horizontalSnapInfo.isSnap,\n            snapIndex: horizontalSnapInfo.index,\n            offset: horizontalOffset,\n            dist: horizontalDist,\n            bounds: horizontalBoundInfos,\n            snap: horizontalSnapInfo,\n        },\n        vertical: {\n            isBound: verticalBoundInfos[0].isBound,\n            isSnap: verticalSnapInfo.isSnap,\n            snapIndex: verticalSnapInfo.index,\n            offset: verticalOffset,\n            dist: verticalDist,\n            bounds: verticalBoundInfos,\n            snap: verticalSnapInfo,\n        },\n    };\n}\n\n\nfunction checkSnapRightLine(\n    startPos: number[],\n    endPos: number[],\n    snapBoundInfo: { vertical: SnapBoundInfo; horizontal: SnapBoundInfo },\n    keepRatio: boolean\n) {\n    const rad = (getRad(startPos, endPos) / Math.PI) * 180;\n    const {\n        vertical: {\n            isBound: isVerticalBound,\n            isSnap: isVerticalSnap,\n            dist: verticalDist,\n        },\n        horizontal: {\n            isBound: isHorizontalBound,\n            isSnap: isHorizontalSnap,\n            dist: horizontalDist,\n        },\n    } = snapBoundInfo;\n\n    const rad180 = rad % 180;\n    const isHorizontalLine = rad180 < 3 || rad180 > 177;\n    const isVerticalLine = rad180 > 87 && rad180 < 93;\n\n    if (horizontalDist < verticalDist) {\n        if (\n            isVerticalBound ||\n            (isVerticalSnap &&\n                !isVerticalLine &&\n                (!keepRatio || !isHorizontalLine))\n        ) {\n            return \"vertical\";\n        }\n    }\n    if (\n        isHorizontalBound ||\n        (isHorizontalSnap &&\n            !isHorizontalLine &&\n            (!keepRatio || !isVerticalLine))\n    ) {\n        return \"horizontal\";\n    }\n    return \"\";\n}\n\n\nexport function getSnapBoundInfo(\n    moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n    poses: number[][],\n    directions: number[][][],\n    keepRatio: boolean,\n    isRequest: boolean,\n    datas: any\n) {\n    return directions.map(([startDirection, endDirection]) => {\n        const otherStartPos = getPosByDirection(poses, startDirection);\n        const otherEndPos = getPosByDirection(poses, endDirection);\n        const snapBoundInfo = keepRatio\n            ? checkSnapBoundsKeepRatio(\n                moveable,\n                otherStartPos,\n                otherEndPos,\n                isRequest\n            )\n            : checkMoveableSnapBounds(moveable, isRequest, {\n                vertical: [otherEndPos[0]],\n                horizontal: [otherEndPos[1]],\n            });\n\n        const {\n            horizontal: {\n                // dist: otherHorizontalDist,\n                offset: otherHorizontalOffset,\n                isBound: isOtherHorizontalBound,\n                isSnap: isOtherHorizontalSnap,\n            },\n            vertical: {\n                // dist: otherVerticalDist,\n                offset: otherVerticalOffset,\n                isBound: isOtherVerticalBound,\n                isSnap: isOtherVerticalSnap,\n            },\n        } = snapBoundInfo;\n\n        const multiple = minus(endDirection, startDirection);\n\n        if (!otherVerticalOffset && !otherHorizontalOffset) {\n            return {\n                isBound: isOtherVerticalBound || isOtherHorizontalBound,\n                isSnap: isOtherVerticalSnap || isOtherHorizontalSnap,\n                sign: multiple,\n                offset: [0, 0],\n            };\n        }\n        const snapLine = checkSnapRightLine(\n            otherStartPos,\n            otherEndPos,\n            snapBoundInfo,\n            keepRatio\n        );\n\n        if (!snapLine) {\n            return {\n                sign: multiple,\n                isBound: false,\n                isSnap: false,\n                offset: [0, 0],\n            };\n        }\n\n        const isVertical = snapLine === \"vertical\";\n        let sizeOffset = [0, 0];\n\n        if (\n            !keepRatio\n            && abs(endDirection[0]) === 1\n            && abs(endDirection[1]) === 1\n            && startDirection[0] !== endDirection[0]\n            && startDirection[1] !== endDirection[1]\n        ) {\n            sizeOffset = getDragDist({\n                datas,\n                distX: -otherVerticalOffset,\n                distY: -otherHorizontalOffset,\n            });\n        } else {\n            sizeOffset = solveNextOffset(\n                otherStartPos,\n                otherEndPos,\n                -(isVertical ? otherVerticalOffset : otherHorizontalOffset),\n                isVertical,\n                datas,\n            ).offset;\n        }\n        sizeOffset = sizeOffset.map((size, i) => size * (multiple[i] ? 2 / multiple[i] : 0));\n\n\n        return {\n            sign: multiple,\n            isBound: isVertical ? isOtherVerticalBound : isOtherHorizontalBound,\n            isSnap: isVertical ? isOtherVerticalSnap : isOtherHorizontalSnap,\n            offset: sizeOffset,\n        };\n    });\n}\n\n\nfunction getSnapBoundOffset(boundInfo: BoundInfo, snapInfo: SnapOffsetInfo) {\n    if (boundInfo.isBound) {\n        return boundInfo.offset;\n    } else if (snapInfo.isSnap) {\n        return snapInfo.offset;\n    }\n    return 0;\n}\n\nexport function checkSnapBoundsKeepRatio(\n    moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n    startPos: number[],\n    endPos: number[],\n    isRequest: boolean\n): DirectionSnapType<SnapBoundInfo> {\n    const {\n        horizontal: horizontalBoundInfo,\n        vertical: verticalBoundInfo,\n    } = checkBoundKeepRatio(moveable, startPos, endPos);\n    const {\n        horizontal: horizontalSnapInfo,\n        vertical: verticalSnapInfo,\n    } = isRequest ? ({\n        horizontal: { isSnap: false },\n        vertical: { isSnap: false },\n    } as any) : checkSnapKeepRatio(moveable, startPos, endPos);\n\n    const horizontalOffset = getSnapBoundOffset(\n        horizontalBoundInfo,\n        horizontalSnapInfo\n    );\n    const verticalOffset = getSnapBoundOffset(\n        verticalBoundInfo,\n        verticalSnapInfo\n    );\n\n    const horizontalDist = abs(horizontalOffset);\n    const verticalDist = abs(verticalOffset);\n\n    return {\n        horizontal: {\n            isBound: horizontalBoundInfo.isBound,\n            isSnap: horizontalSnapInfo.isSnap,\n            offset: horizontalOffset,\n            dist: horizontalDist,\n        },\n        vertical: {\n            isBound: verticalBoundInfo.isBound,\n            isSnap: verticalSnapInfo.isSnap,\n            offset: verticalOffset,\n            dist: verticalDist,\n        },\n    };\n}\n\nexport function checkMaxBounds(\n    moveable: MoveableManagerInterface<SnappableProps>,\n    poses: number[][],\n    direction: number[],\n    fixedPosition: number[],\n    datas: any\n) {\n    const fixedDirection = [-direction[0], -direction[1]];\n    const { width, height } = moveable.state;\n    const bounds = moveable.props.bounds;\n    let maxWidth = Infinity;\n    let maxHeight = Infinity;\n\n    if (bounds) {\n        const directions = [\n            [direction[0], -direction[1]],\n            [-direction[0], direction[1]],\n        ];\n        const {\n            left = -Infinity,\n            top = -Infinity,\n            right = Infinity,\n            bottom = Infinity,\n        } = bounds;\n\n        directions.forEach((otherDirection) => {\n            const isCheckVertical = otherDirection[0] !== fixedDirection[0];\n            const isCheckHorizontal = otherDirection[1] !== fixedDirection[1];\n            const otherPos = getPosByDirection(poses, otherDirection);\n            const deg = (getRad(fixedPosition, otherPos) * 360) / Math.PI;\n\n            if (isCheckHorizontal) {\n                const nextOtherPos = otherPos.slice();\n\n                if (abs(deg - 360) < 2 || abs(deg - 180) < 2) {\n                    nextOtherPos[1] = fixedPosition[1];\n                }\n                const {\n                    offset: [, heightOffset],\n                    isOutside: isHeightOutside,\n                } = solveNextOffset(\n                    fixedPosition,\n                    nextOtherPos,\n                    (fixedPosition[1] < otherPos[1] ? bottom : top) -\n                    otherPos[1],\n                    false,\n                    datas\n                );\n                if (!isNaN(heightOffset)) {\n                    maxHeight = height + (isHeightOutside ? 1 : -1) * abs(heightOffset);\n                }\n            }\n            if (isCheckVertical) {\n                const nextOtherPos = otherPos.slice();\n\n                if (abs(deg - 90) < 2 || abs(deg - 270) < 2) {\n                    nextOtherPos[0] = fixedPosition[0];\n                }\n                const {\n                    offset: [widthOffset],\n                    isOutside: isWidthOutside,\n                } = solveNextOffset(\n                    fixedPosition,\n                    nextOtherPos,\n                    (fixedPosition[0] < otherPos[0] ? right : left) - otherPos[0],\n                    true,\n                    datas\n                );\n                if (!isNaN(widthOffset)) {\n                    maxWidth = width + (isWidthOutside ? 1 : -1) * abs(widthOffset);\n                }\n            }\n        });\n    }\n    return {\n        maxWidth,\n        maxHeight,\n    };\n}\n", "import {\n    setDragStart, getBeforeDragDist, getTransformDist,\n    convertTransformFormat, resolveTransformEvent, fillTransformStartEvent,\n    setDefaultTransformIndex, fillOriginalTransform,\n} from \"../gesto/GestoUtils\";\nimport {\n    triggerEvent, fillParams,\n    getDistSize, prefix,\n    fillEndParams,\n    fillCSSObject,\n} from \"../utils\";\nimport { minus, plus } from \"@scena/matrix\";\nimport {\n    DraggableProps, OnDrag, OnDragGroup,\n    OnDragGroupStart, OnDragStart, OnDragEnd, DraggableState,\n    Renderer, OnDragGroupEnd, MoveableManagerInterface, MoveableGroupInterface,\n} from \"../types\";\nimport { triggerChildGesto } from \"../groupUtils\";\nimport { startCheckSnapDrag } from \"./Snappable\";\nimport { getRad, throttle, throttleArray } from \"@daybrush/utils\";\nimport { checkSnapBoundsDrag } from \"./snappable/snapBounds\";\nimport { TINY_NUM } from \"../consts\";\n\n/**\n * @namespace Draggable\n * @memberof Moveable\n * @description Draggable refers to the ability to drag and move targets.\n */\nexport default {\n    name: \"draggable\",\n    props: [\n        \"draggable\",\n        \"throttleDrag\",\n        \"throttleDragRotate\",\n        \"hideThrottleDragRotateLine\",\n        \"startDragRotate\",\n        \"edgeDraggable\",\n    ] as const,\n    events: [\n        \"dragStart\",\n        \"drag\",\n        \"dragEnd\",\n        \"dragGroupStart\",\n        \"dragGroup\",\n        \"dragGroupEnd\",\n    ] as const,\n    requestStyle(): string[] {\n        return [\"left\", \"top\", \"right\", \"bottom\"];\n    },\n    requestChildStyle(): string[] {\n        return [\"left\", \"top\", \"right\", \"bottom\"];\n    },\n    render(\n        moveable: MoveableManagerInterface<DraggableProps, DraggableState>,\n        React: Renderer,\n    ): any[] {\n        const { hideThrottleDragRotateLine, throttleDragRotate, zoom } = moveable.props;\n        const { dragInfo, beforeOrigin } = moveable.getState();\n\n        if (hideThrottleDragRotateLine || !throttleDragRotate || !dragInfo) {\n            return [];\n        }\n        const dist = dragInfo.dist;\n\n        if (!dist[0] && !dist[1]) {\n            return [];\n        }\n\n        const width = getDistSize(dist);\n        const rad = getRad(dist, [0, 0]);\n\n        return [<div className={prefix(\n            \"line\",\n            \"horizontal\",\n            \"dragline\",\n            \"dashed\",\n        )} key={`dragRotateGuideline`} style={{\n            width: `${width}px`,\n            transform: `translate(${beforeOrigin[0]}px, ${beforeOrigin[1]}px) rotate(${rad}rad) scaleY(${zoom})`,\n        }} />];\n    },\n    dragStart(\n        moveable: MoveableManagerInterface<DraggableProps, any>,\n        e: any,\n    ) {\n        const { datas, parentEvent, parentGesto } = e;\n        const state = moveable.state;\n        const {\n            gestos,\n            style,\n        } = state;\n\n        if (gestos.draggable) {\n            return false;\n        }\n        gestos.draggable = parentGesto || moveable.targetGesto;\n\n        datas.datas = {};\n        datas.left = parseFloat(style.left || \"\") || 0;\n        datas.top = parseFloat(style.top || \"\") || 0;\n        datas.bottom = parseFloat(style.bottom || \"\") || 0;\n        datas.right = parseFloat(style.right || \"\") || 0;\n        datas.startValue = [0, 0];\n\n        setDragStart(moveable, e);\n        setDefaultTransformIndex(moveable, e, \"translate\");\n        startCheckSnapDrag(moveable, datas);\n\n        datas.prevDist = [0, 0];\n        datas.prevBeforeDist = [0, 0];\n        datas.isDrag = false;\n        datas.deltaOffset = [0, 0];\n\n        const params = fillParams<OnDragStart>(moveable, e, {\n            set: (translate: number[]) => {\n                datas.startValue = translate;\n            },\n            ...fillTransformStartEvent(moveable, e),\n        });\n        const result = parentEvent || triggerEvent(moveable, \"onDragStart\", params);\n\n        if (result !== false) {\n            datas.isDrag = true;\n            moveable.state.dragInfo = {\n                startRect: moveable.getRect(),\n                dist: [0, 0],\n            };\n        } else {\n            gestos.draggable = null;\n            datas.isPinch = false;\n        }\n        return datas.isDrag ? params : false;\n    },\n    drag(\n        moveable: MoveableManagerInterface<DraggableProps, any>,\n        e: any,\n    ): OnDrag | undefined {\n        if (!e) {\n            return;\n        }\n        resolveTransformEvent(moveable, e, \"translate\");\n\n        const {\n            datas, parentEvent,\n            parentFlag, isPinch, deltaOffset,\n            useSnap,\n            isRequest,\n            isGroup,\n            parentThrottleDrag,\n        } = e;\n        let { distX, distY } = e;\n        const { isDrag, prevDist, prevBeforeDist, startValue } = datas;\n\n        if (!isDrag) {\n            return;\n        }\n\n        if (deltaOffset) {\n            distX += deltaOffset[0];\n            distY += deltaOffset[1];\n        }\n        const props = moveable.props;\n\n        const parentMoveable = props.parentMoveable;\n        const throttleDrag = isGroup ? 0 : (props.throttleDrag || parentThrottleDrag || 0);\n        const throttleDragRotate = parentEvent ? 0 : (props.throttleDragRotate || 0);\n\n        let dragRotateRad = 0;\n        let isVerticalSnap = false;\n        let isVerticalBound = false;\n        let isHorizontalSnap = false;\n        let isHorizontalBound = false;\n\n        if (!parentEvent && throttleDragRotate > 0 && (distX || distY)) {\n            const startDragRotate = props.startDragRotate || 0;\n            const deg\n                = throttle(startDragRotate + getRad([0, 0], [distX, distY]) * 180 / Math.PI, throttleDragRotate)\n                - startDragRotate;\n            const ry = distY * Math.abs(Math.cos((deg - 90) / 180 * Math.PI));\n            const rx = distX * Math.abs(Math.cos(deg / 180 * Math.PI));\n            const r = getDistSize([rx, ry]);\n            dragRotateRad = deg * Math.PI / 180;\n\n            distX = r * Math.cos(dragRotateRad);\n            distY = r * Math.sin(dragRotateRad);\n        }\n\n        if (!isPinch && !parentEvent && !parentFlag) {\n            const [verticalInfo, horizontalInfo] = checkSnapBoundsDrag(\n                moveable, distX, distY,\n                throttleDragRotate,\n                (!useSnap && isRequest) || deltaOffset,\n                datas,\n            );\n            isVerticalSnap = verticalInfo.isSnap;\n            isVerticalBound = verticalInfo.isBound;\n            isHorizontalSnap = horizontalInfo.isSnap;\n            isHorizontalBound = horizontalInfo.isBound;\n\n            const verticalOffset = verticalInfo.offset;\n            const horizontalOffset = horizontalInfo.offset;\n\n            distX += verticalOffset;\n            distY += horizontalOffset;\n        }\n\n        const beforeTranslate = plus(getBeforeDragDist({ datas, distX, distY }), startValue);\n        const translate = plus(getTransformDist({ datas, distX, distY }), startValue);\n\n        throttleArray(translate, TINY_NUM);\n        throttleArray(beforeTranslate, TINY_NUM);\n\n        if (!throttleDragRotate) {\n            if (!isVerticalSnap && !isVerticalBound) {\n                translate[0] = throttle(translate[0], throttleDrag);\n                beforeTranslate[0] = throttle(beforeTranslate[0], throttleDrag);\n            }\n            if (!isHorizontalSnap && !isHorizontalBound) {\n                translate[1] = throttle(translate[1], throttleDrag);\n                beforeTranslate[1] = throttle(beforeTranslate[1], throttleDrag);\n            }\n        }\n\n\n        const beforeDist = minus(beforeTranslate, startValue);\n        const dist = minus(translate, startValue);\n        const delta = minus(dist, prevDist);\n        const beforeDelta = minus(beforeDist, prevBeforeDist);\n\n        datas.prevDist = dist;\n        datas.prevBeforeDist = beforeDist;\n\n\n        datas.passDelta = delta; //distX - (datas.passDistX || 0);\n        // datas.passDeltaY = distY - (datas.passDistY || 0);\n        datas.passDist = dist; //distX;\n        // datas.passDistY = distY;\n\n        const left = datas.left + beforeDist[0];\n        const top = datas.top + beforeDist[1];\n        const right = datas.right - beforeDist[0];\n        const bottom = datas.bottom - beforeDist[1];\n        const nextTransform = convertTransformFormat(datas,\n            `translate(${translate[0]}px, ${translate[1]}px)`, `translate(${dist[0]}px, ${dist[1]}px)`);\n\n        fillOriginalTransform(e, nextTransform);\n\n        moveable.state.dragInfo.dist = parentEvent ? [0, 0] : dist;\n        if (!parentEvent && !parentMoveable && delta.every(num => !num) && beforeDelta.some(num => !num)) {\n            return;\n        }\n\n        const {\n            width,\n            height,\n        } = moveable.state;\n        const params = fillParams<OnDrag>(moveable, e, {\n            transform: nextTransform,\n            dist,\n            delta,\n            translate,\n            beforeDist,\n            beforeDelta,\n            beforeTranslate,\n            left,\n            top,\n            right,\n            bottom,\n            width,\n            height,\n            isPinch,\n            ...fillCSSObject({\n                transform: nextTransform,\n            }, e),\n        });\n\n        !parentEvent && triggerEvent(moveable, \"onDrag\", params);\n        return params;\n    },\n    dragAfter(\n        moveable: MoveableManagerInterface<DraggableProps, DraggableState>,\n        e: any,\n    ) {\n        const datas = e.datas;\n        const {\n            deltaOffset,\n        } = datas;\n\n        if (deltaOffset[0] || deltaOffset[1]) {\n            datas.deltaOffset = [0, 0];\n            return this.drag(moveable, {...e, deltaOffset });\n        }\n        return false;\n    },\n    dragEnd(\n        moveable: MoveableManagerInterface<DraggableProps, DraggableState>,\n        e: any,\n    ) {\n        const { parentEvent, datas } = e;\n\n        moveable.state.dragInfo = null;\n        if (!datas.isDrag) {\n            return;\n        }\n        datas.isDrag = false;\n        const param = fillEndParams<OnDragEnd>(moveable, e, {});\n        !parentEvent && triggerEvent(moveable, \"onDragEnd\", param);\n        return param;\n    },\n    dragGroupStart(moveable: MoveableGroupInterface<any, any>, e: any) {\n        const { datas, clientX, clientY } = e;\n\n        const params = this.dragStart(moveable, e);\n\n        if (!params) {\n            return false;\n        }\n        const {\n            childEvents,\n            eventParams,\n        } = triggerChildGesto(moveable, this, \"dragStart\", [\n            clientX || 0,\n            clientY || 0,\n        ], e, false, \"draggable\");\n\n        const nextParams: OnDragGroupStart = {\n            ...params,\n            targets: moveable.props.targets!,\n            events: eventParams,\n        };\n        const result = triggerEvent(moveable, \"onDragGroupStart\", nextParams);\n\n        datas.isDrag = result !== false;\n\n\n        // find data.startValue and based on first child moveable\n        const startValue = childEvents[0]?.datas.startValue ?? [0, 0];\n\n\n        datas.throttleOffset = [startValue[0] % 1, startValue[1] % 1];\n\n        return datas.isDrag ? params : false;\n    },\n    dragGroup(moveable: MoveableGroupInterface<any, any>, e: any) {\n        const { datas } = e;\n\n        if (!datas.isDrag) {\n            return;\n        }\n        const params = this.drag(moveable, {\n            ...e,\n            parentThrottleDrag: moveable.props.throttleDrag,\n        });\n        const { passDelta } = e.datas;\n        const {\n            eventParams,\n        } = triggerChildGesto(moveable, this, \"drag\", passDelta, e, false, \"draggable\");\n\n        if (!params) {\n            return;\n        }\n\n        const nextParams: OnDragGroup = {\n            targets: moveable.props.targets!,\n            events: eventParams,\n            ...params,\n        };\n\n        triggerEvent(moveable, \"onDragGroup\", nextParams);\n        return nextParams;\n    },\n    dragGroupEnd(moveable: MoveableGroupInterface<any, any>, e: any) {\n        const { isDrag, datas } = e;\n\n        if (!datas.isDrag) {\n            return;\n        }\n        this.dragEnd(moveable, e);\n        const {\n            eventParams,\n        } = triggerChildGesto(moveable, this, \"dragEnd\", [0, 0], e, false, \"draggable\");\n        triggerEvent(moveable, \"onDragGroupEnd\", fillEndParams<OnDragGroupEnd>(moveable, e, {\n            targets: moveable.props.targets!,\n            events: eventParams,\n        }));\n\n        return isDrag;\n    },\n    /**\n     * @method Moveable.Draggable#request\n     * @param {object} [e] - the draggable's request parameter\n     * @param {number} [e.x] - x position\n     * @param {number} [e.y] - y position\n     * @param {number} [e.deltaX] - X number to move\n     * @param {number} [e.deltaY] - Y number to move\n     * @return {Moveable.Requester} Moveable Requester\n     * @example\n\n     * // Instantly Request (requestStart - request - requestEnd)\n     * // Use Relative Value\n     * moveable.request(\"draggable\", { deltaX: 10, deltaY: 10 }, true);\n     * // Use Absolute Value\n     * moveable.request(\"draggable\", { x: 200, y: 100 }, true);\n     *\n     * // requestStart\n     * const requester = moveable.request(\"draggable\");\n     *\n     * // request\n     * // Use Relative Value\n     * requester.request({ deltaX: 10, deltaY: 10 });\n     * requester.request({ deltaX: 10, deltaY: 10 });\n     * requester.request({ deltaX: 10, deltaY: 10 });\n     * // Use Absolute Value\n     * moveable.request(\"draggable\", { x: 200, y: 100 });\n     * moveable.request(\"draggable\", { x: 220, y: 100 });\n     * moveable.request(\"draggable\", { x: 240, y: 100 });\n     *\n     * // requestEnd\n     * requester.requestEnd();\n     */\n    request(moveable: MoveableManagerInterface<any, any>) {\n        const datas = {};\n        const rect = moveable.getRect();\n        let distX = 0;\n        let distY = 0;\n        let useSnap = false;\n\n        return {\n            isControl: false,\n            requestStart(e: Record<string, any>) {\n                useSnap = e.useSnap;\n                return { datas, useSnap };\n            },\n            request(e: Record<string, any>) {\n                if (\"x\" in e) {\n                    distX = e.x - rect.left;\n                } else if (\"deltaX\" in e) {\n                    distX += e.deltaX;\n                }\n                if (\"y\" in e) {\n                    distY = e.y - rect.top;\n                } else if (\"deltaY\" in e) {\n                    distY += e.deltaY;\n                }\n\n                return { datas, distX, distY, useSnap };\n            },\n            requestEnd() {\n                return { datas, isDrag: true, useSnap };\n            },\n        };\n    },\n    unset(moveable: MoveableManagerInterface<any, Record<string, any>>) {\n        moveable.state.gestos.draggable = null;\n        moveable.state.dragInfo = null;\n    },\n};\n\n/**\n * Whether or not target can be dragged. (default: false)\n * @name Moveable.Draggable#draggable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.draggable = true;\n */\n\n/**\n * throttle of x, y when drag.\n * @name Moveable.Draggable#throttleDrag\n * @default 0\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.throttleDrag = 1;\n */\n\n/**\n* throttle of angle of x, y when drag.\n* @name Moveable.Draggable#throttleDragRotate\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body);\n*\n* moveable.throttleDragRotate = 45;\n*/\n\n/**\n* start angle of throttleDragRotate of x, y when drag.\n* @name Moveable.Draggable#startDragRotate\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body);\n*\n* // 45, 135, 225, 315\n* moveable.throttleDragRotate = 90;\n* moveable.startDragRotate = 45;\n*/\n\n/**\n * When the drag starts, the dragStart event is called.\n * @memberof Moveable.Draggable\n * @event dragStart\n * @param {Moveable.Draggable.OnDragStart} - Parameters for the dragStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { draggable: true });\n * moveable.on(\"dragStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n/**\n * When dragging, the drag event is called.\n * @memberof Moveable.Draggable\n * @event drag\n * @param {Moveable.Draggable.OnDrag} - Parameters for the drag event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { draggable: true });\n * moveable.on(\"drag\", ({ target, transform }) => {\n *     target.style.transform = transform;\n * });\n */\n/**\n * When the drag finishes, the dragEnd event is called.\n * @memberof Moveable.Draggable\n * @event dragEnd\n * @param {Moveable.Draggable.OnDragEnd} - Parameters for the dragEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { draggable: true });\n * moveable.on(\"dragEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n\n/**\n* When the group drag starts, the `dragGroupStart` event is called.\n* @memberof Moveable.Draggable\n* @event dragGroupStart\n* @param {Moveable.Draggable.OnDragGroupStart} - Parameters for the `dragGroupStart` event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     target: [].slice.call(document.querySelectorAll(\".target\")),\n*     draggable: true\n* });\n* moveable.on(\"dragGroupStart\", ({ targets }) => {\n*     console.log(\"onDragGroupStart\", targets);\n* });\n*/\n\n/**\n* When the group drag, the `dragGroup` event is called.\n* @memberof Moveable.Draggable\n* @event dragGroup\n* @param {Moveable.Draggable.OnDragGroup} - Parameters for the `dragGroup` event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     target: [].slice.call(document.querySelectorAll(\".target\")),\n*     draggable: true\n* });\n* moveable.on(\"dragGroup\", ({ targets, events }) => {\n*     console.log(\"onDragGroup\", targets);\n*     events.forEach(ev => {\n*          // drag event\n*          console.log(\"onDrag left, top\", ev.left, ev.top);\n*          // ev.target!.style.left = `${ev.left}px`;\n*          // ev.target!.style.top = `${ev.top}px`;\n*          console.log(\"onDrag translate\", ev.dist);\n*          ev.target!.style.transform = ev.transform;)\n*     });\n* });\n*/\n\n/**\n * When the group drag finishes, the `dragGroupEnd` event is called.\n * @memberof Moveable.Draggable\n * @event dragGroupEnd\n * @param {Moveable.Draggable.OnDragGroupEnd} - Parameters for the `dragGroupEnd` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n *     draggable: true\n * });\n * moveable.on(\"dragGroupEnd\", ({ targets, isDrag }) => {\n *     console.log(\"onDragGroupEnd\", targets, isDrag);\n * });\n */\n", "import { calculatePosition } from \"../utils\";\nimport { getDirectionByPos, getPosByDirection } from \"../gesto/GestoUtils\";\n\n\nexport function getFixedDirectionInfo(\n    startPositions: number[][],\n    fixedDirection: number[],\n) {\n    const fixedPosition = getPosByDirection(startPositions, fixedDirection);\n    const fixedOffset = [0, 0];\n\n    return {\n        fixedPosition,\n        fixedDirection,\n        fixedOffset,\n    };\n}\n\nexport function getOffsetFixedDirectionInfo(\n    state: {\n        allMatrix: number[];\n        is3d: boolean;\n        width: number;\n        height: number;\n    },\n    fixedDirection: number[],\n) {\n    // for start\n    const {\n        allMatrix,\n        is3d,\n        width,\n        height,\n    } = state;\n    const n = is3d ? 4 : 3;\n    const nextFixedOffset = [\n        width / 2 * (1 + fixedDirection[0]),\n        height / 2 * (1 + fixedDirection[1]),\n    ];\n    const fixedPosition = calculatePosition(allMatrix, nextFixedOffset, n);\n    const fixedOffset = [0, 0];\n\n    return {\n        fixedPosition,\n        fixedDirection,\n        fixedOffset,\n    };\n}\n\n\nexport function getOffsetFixedPositionInfo(\n    state: {\n        allMatrix: number[];\n        is3d: boolean;\n        width: number;\n        height: number;\n    },\n    offsetFixedPosition: number[],\n) {\n    // for start\n    const {\n        allMatrix,\n        is3d,\n        width,\n        height,\n    } = state;\n    const n = is3d ? 4 : 3;\n    const fixedDirection = getDirectionByPos(offsetFixedPosition, width, height);\n    const nextFixedPosition = calculatePosition(allMatrix, offsetFixedPosition, n);\n    const fixedOffset = [\n        width ? 0 : offsetFixedPosition[0],\n        height ? 0 : offsetFixedPosition[1],\n    ];\n\n    return {\n        fixedPosition: nextFixedPosition,\n        fixedDirection,\n        fixedOffset,\n    };\n}\n", "import {\n    triggerEvent,\n    fillParams,\n    fillEndParams,\n    getAbsolutePosesByState,\n    catchEvent,\n    getOffsetSizeDist,\n    getProps,\n    getDirectionCondition,\n    calculatePoses,\n    fillAfterTransform,\n    getDirectionViewClassName,\n    getTotalDirection,\n    abs,\n} from \"../utils\";\nimport {\n    setDragStart,\n    getResizeDist,\n    getAbsolutePosition,\n    getNextMatrix,\n    getNextTransforms,\n} from \"../gesto/GestoUtils\";\nimport {\n    ResizableProps, OnResizeGroup, OnResizeGroupEnd,\n    OnResizeGroupStart, DraggableProps, OnDrag, OnResizeStart, SnappableState,\n    OnResize, OnResizeEnd, MoveableManagerInterface, MoveableGroupInterface, SnappableProps,\n    OnBeforeResize, OnBeforeResizeGroup, ResizableRequestParam,\n} from \"../types\";\nimport { getRenderDirections } from \"../renderDirections\";\nimport {\n    fillChildEvents,\n    startChildDist,\n    triggerChildAbles,\n} from \"../groupUtils\";\nimport Draggable from \"./Draggable\";\nimport { calculate, convertDimension, createRotateMatrix, plus } from \"@scena/matrix\";\nimport CustomGesto, { setCustomDrag } from \"../gesto/CustomGesto\";\nimport { checkSnapResize } from \"./Snappable\";\nimport {\n    calculateBoundSize,\n    isString, convertUnitSize,\n    throttle,\n    isNumber,\n} from \"@daybrush/utils\";\nimport { TINY_NUM } from \"../consts\";\nimport { parseMat } from \"css-to-mat\";\nimport { getFixedDirectionInfo, getOffsetFixedPositionInfo } from \"../utils/getFixedDirection\";\n\n/**\n * @namespace Resizable\n * @memberof Moveable\n * @description Resizable indicates whether the target's width and height can be increased or decreased.\n */\n\nconst directionCondition = getDirectionCondition(\"resizable\");\n\nexport default {\n    name: \"resizable\",\n    ableGroup: \"size\",\n    canPinch: true,\n    props: [\n        \"resizable\",\n        \"throttleResize\",\n        \"renderDirections\",\n        \"displayAroundControls\",\n        \"keepRatio\",\n        \"resizeFormat\",\n        \"keepRatioFinally\",\n        \"edge\",\n        \"checkResizableError\",\n    ] as const,\n    events: [\n        \"resizeStart\",\n        \"beforeResize\",\n        \"resize\",\n        \"resizeEnd\",\n        \"resizeGroupStart\",\n        \"beforeResizeGroup\",\n        \"resizeGroup\",\n        \"resizeGroupEnd\",\n    ] as const,\n    render: getRenderDirections(\"resizable\"),\n    dragControlCondition: directionCondition,\n    viewClassName: getDirectionViewClassName(\"resizable\"),\n    dragControlStart(\n        moveable: MoveableManagerInterface<ResizableProps & DraggableProps, SnappableState>,\n        e: any,\n    ) {\n        const {\n            inputEvent,\n            isPinch,\n            isGroup,\n            parentDirection,\n            parentGesto,\n            datas,\n            parentFixedDirection,\n            parentEvent,\n        } = e;\n\n        const direction = getTotalDirection(\n            parentDirection,\n            isPinch,\n            inputEvent,\n            datas,\n        );\n\n        const state = moveable.state;\n        const { target, width, height, gestos } = state;\n\n        if (!direction || !target) {\n            return false;\n        }\n        if (gestos.resizable) {\n            return false;\n        }\n        gestos.resizable = parentGesto || moveable.controlGesto;\n        !isPinch && setDragStart(moveable, e);\n\n        datas.datas = {};\n        datas.direction = direction;\n        datas.startOffsetWidth = width;\n        datas.startOffsetHeight = height;\n        datas.prevWidth = 0;\n        datas.prevHeight = 0;\n\n        datas.minSize = [0, 0];\n\n\n        datas.startWidth = state.inlineCSSWidth || state.cssWidth;\n        datas.startHeight = state.inlineCSSHeight || state.cssHeight;\n        datas.maxSize = [Infinity, Infinity];\n\n        if (!isGroup) {\n            datas.minSize = [\n                state.minOffsetWidth,\n                state.minOffsetHeight,\n            ];\n            datas.maxSize = [\n                state.maxOffsetWidth,\n                state.maxOffsetHeight,\n            ];\n        }\n        const transformOrigin = moveable.props.transformOrigin || \"% %\";\n\n        datas.transformOrigin = transformOrigin && isString(transformOrigin)\n            ? transformOrigin.split(\" \")\n            : transformOrigin;\n\n        datas.startOffsetMatrix = state.offsetMatrix;\n        datas.startTransformOrigin = state.transformOrigin;\n\n        datas.isWidth = e?.parentIsWidth ?? ((!direction[0] && !direction[1]) || direction[0] || !direction[1]);\n\n        function setRatio(ratio: number) {\n            datas.ratio = ratio && isFinite(ratio) ? ratio : 0;\n        }\n\n\n        datas.startPositions = getAbsolutePosesByState(moveable.state);\n\n        function setFixedDirection(fixedDirection: number[]) {\n            const result = getFixedDirectionInfo(datas.startPositions, fixedDirection);\n\n            datas.fixedDirection = result.fixedDirection;\n            datas.fixedPosition = result.fixedPosition;\n            datas.fixedOffset = result.fixedOffset;\n        }\n        function setFixedPosition(fixedPosition: number[]) {\n            const result = getOffsetFixedPositionInfo(moveable.state, fixedPosition);\n\n            datas.fixedDirection = result.fixedDirection;\n            datas.fixedPosition = result.fixedPosition;\n            datas.fixedOffset = result.fixedOffset;\n        }\n        function setMin(minSize: Array<string | number>)  {\n            datas.minSize = [\n                convertUnitSize(`${minSize[0]}`, 0) || 0,\n                convertUnitSize(`${minSize[1]}`, 0) || 0,\n            ];\n        }\n        function setMax(maxSize: Array<string | number>) {\n            const nextMaxSize = [\n                maxSize[0] || Infinity,\n                maxSize[1] || Infinity,\n            ];\n            if (!isNumber(nextMaxSize[0]) || isFinite(nextMaxSize[0])) {\n                nextMaxSize[0] = convertUnitSize(`${nextMaxSize[0]}`, 0) || Infinity;\n            }\n            if (!isNumber(nextMaxSize[1]) || isFinite(nextMaxSize[1])) {\n                nextMaxSize[1] = convertUnitSize(`${nextMaxSize[1]}`, 0) || Infinity;\n            }\n            datas.maxSize = nextMaxSize;\n        }\n\n        setRatio(width / height);\n        setFixedDirection(parentFixedDirection || [-direction[0], -direction[1]]);\n\n        datas.setFixedDirection = setFixedDirection;\n        datas.setFixedPosition = setFixedPosition;\n        datas.setMin = setMin;\n        datas.setMax = setMax;\n        const params = fillParams<OnResizeStart>(moveable, e, {\n            direction,\n            startRatio: datas.ratio,\n            set: ([startWidth, startHeight]: number[]) => {\n                datas.startWidth = startWidth;\n                datas.startHeight = startHeight;\n            },\n            setMin,\n            setMax,\n            setRatio,\n            setFixedDirection,\n            setFixedPosition,\n            setOrigin: (origin: Array<string | number>) => {\n                datas.transformOrigin = origin;\n            },\n            dragStart: Draggable.dragStart(\n                moveable,\n                new CustomGesto().dragStart([0, 0], e),\n            ),\n        });\n        const result = parentEvent || triggerEvent(moveable, \"onResizeStart\", params);\n\n        datas.startFixedDirection = datas.fixedDirection;\n        datas.startFixedPosition = datas.fixedPosition;\n        if (result !== false) {\n            datas.isResize = true;\n            moveable.state.snapRenderInfo = {\n                request: e.isRequest,\n                direction,\n            };\n        }\n        return datas.isResize ? params : false;\n    },\n    dragControl(\n        moveable: MoveableManagerInterface<ResizableProps & DraggableProps & SnappableProps>,\n        e: any,\n    ) {\n        const {\n            datas,\n            parentFlag,\n            isPinch,\n            parentKeepRatio,\n            dragClient,\n            parentDist,\n            useSnap,\n            isRequest,\n            isGroup,\n            parentEvent,\n            resolveMatrix,\n        } = e;\n\n        const {\n            isResize,\n            transformOrigin,\n            startWidth,\n            startHeight,\n            prevWidth,\n            prevHeight,\n            minSize,\n            maxSize,\n            ratio,\n            startOffsetWidth,\n            startOffsetHeight,\n            isWidth,\n        } = datas;\n\n        if (!isResize) {\n            return;\n        }\n        if (resolveMatrix) {\n            const {\n                is3d,\n            } = moveable.state;\n            const {\n                startOffsetMatrix,\n                startTransformOrigin,\n            } = datas;\n            const n = is3d ? 4 : 3;\n            let targetMatrix = parseMat(getNextTransforms(e));\n            const targetN = Math.sqrt(targetMatrix.length);\n\n            if (n !== targetN) {\n                targetMatrix = convertDimension(targetMatrix, targetN, n);\n            }\n\n            const nextAllMatrix = getNextMatrix(\n                startOffsetMatrix,\n                targetMatrix,\n                startTransformOrigin,\n                n,\n            );\n            const poses = calculatePoses(nextAllMatrix, startOffsetWidth, startOffsetHeight, n);\n\n            datas.startPositions = poses;\n            datas.nextTargetMatrix = targetMatrix;\n            datas.nextAllMatrix = nextAllMatrix;\n        }\n        const props = getProps(moveable.props, \"resizable\");\n        const {\n            resizeFormat,\n            throttleResize = parentFlag ? 0 : 1,\n            parentMoveable,\n            keepRatioFinally,\n        } = props;\n        const direction = datas.direction;\n        let sizeDirection = direction;\n        let distWidth = 0;\n        let distHeight = 0;\n\n        if (!direction[0] && !direction[1]) {\n            sizeDirection = [1, 1];\n        }\n        const keepRatio = (ratio && (parentKeepRatio != null ? parentKeepRatio : props.keepRatio)) || false;\n\n        function getNextBoundingSize() {\n            const fixedDirection = datas.fixedDirection;\n            const nextSize = getOffsetSizeDist(sizeDirection, keepRatio, datas, e);\n\n            distWidth = nextSize.distWidth;\n            distHeight = nextSize.distHeight;\n\n            let nextWidth = (sizeDirection[0] - fixedDirection[0]) || keepRatio\n                ? Math.max(startOffsetWidth + distWidth, TINY_NUM) : startOffsetWidth;\n            let nextHeight = (sizeDirection[1] - fixedDirection[1]) || keepRatio\n                ? Math.max(startOffsetHeight + distHeight, TINY_NUM) : startOffsetHeight;\n\n            if (keepRatio && startOffsetWidth && startOffsetHeight) {\n                // startOffsetWidth : startOffsetHeight = nextWidth : nextHeight\n                if (isWidth) {\n                    nextHeight = nextWidth / ratio;\n                } else {\n                    nextWidth = nextHeight * ratio;\n                }\n            }\n            return [nextWidth, nextHeight];\n        }\n\n        let [boundingWidth, boundingHeight] = getNextBoundingSize();\n\n        if (!parentEvent) {\n            datas.setFixedDirection(datas.fixedDirection);\n\n            triggerEvent(moveable, \"onBeforeResize\", fillParams<OnBeforeResize>(moveable, e, {\n                startFixedDirection: datas.startFixedDirection,\n                startFixedPosition: datas.startFixedPosition,\n                setFixedDirection(nextFixedDirection: number[]) {\n                    datas.setFixedDirection(nextFixedDirection);\n\n                    [boundingWidth, boundingHeight] = getNextBoundingSize();\n\n                    return [boundingWidth, boundingHeight];\n                },\n                setFixedPosition(nextFixedPosition: number[]) {\n                    datas.setFixedPosition(nextFixedPosition);\n\n                    [boundingWidth, boundingHeight] = getNextBoundingSize();\n\n                    return [boundingWidth, boundingHeight];\n                },\n                boundingWidth,\n                boundingHeight,\n                setSize(size: number[]) {\n                    [boundingWidth, boundingHeight] = size;\n                },\n            }, true));\n        }\n\n        let fixedPosition = dragClient;\n\n        if (!dragClient) {\n            if (!parentFlag && isPinch) {\n                fixedPosition = getAbsolutePosition(moveable, [0, 0]);\n            } else {\n                fixedPosition = datas.fixedPosition;\n            }\n        }\n\n        let snapDist = [0, 0];\n\n        if (!isPinch) {\n            snapDist = checkSnapResize(\n                moveable,\n                boundingWidth,\n                boundingHeight,\n                direction,\n                fixedPosition,\n                !useSnap && isRequest,\n                datas,\n            );\n        }\n        if (parentDist) {\n            !parentDist[0] && (snapDist[0] = 0);\n            !parentDist[1] && (snapDist[1] = 0);\n        }\n\n        function computeSize() {\n            if (resizeFormat) {\n                [boundingWidth, boundingHeight] = resizeFormat([boundingWidth, boundingHeight]);\n            }\n            boundingWidth = throttle(boundingWidth, throttleResize!);\n            boundingHeight = throttle(boundingHeight, throttleResize!);\n        }\n        if (keepRatio) {\n            if (sizeDirection[0] && sizeDirection[1] && snapDist[0] && snapDist[1]) {\n                if (abs(snapDist[0]) > abs(snapDist[1])) {\n                    snapDist[1] = 0;\n                } else {\n                    snapDist[0] = 0;\n                }\n            }\n            const isNoSnap = !snapDist[0] && !snapDist[1];\n\n            if (isNoSnap) {\n                // pre-compute before maintaining the ratio\n                computeSize();\n            }\n            if (\n                (sizeDirection[0] && !sizeDirection[1])\n                || (snapDist[0] && !snapDist[1])\n                || (isNoSnap && isWidth)\n            ) {\n                boundingWidth += snapDist[0];\n                boundingHeight = boundingWidth / ratio;\n            } else if (\n                (!sizeDirection[0] && sizeDirection[1])\n                || (!snapDist[0] && snapDist[1])\n                || (isNoSnap && !isWidth)\n            ) {\n                boundingHeight += snapDist[1];\n                boundingWidth = boundingHeight * ratio;\n            }\n        } else {\n            boundingWidth += snapDist[0];\n            boundingHeight += snapDist[1];\n\n            boundingWidth = Math.max(0, boundingWidth);\n            boundingHeight = Math.max(0, boundingHeight);\n        }\n\n        [boundingWidth, boundingHeight] = calculateBoundSize(\n            [boundingWidth, boundingHeight],\n            minSize,\n            maxSize,\n            keepRatio ? ratio : false,\n        );\n        computeSize();\n\n        if (keepRatio && (isGroup || keepRatioFinally)) {\n            if (isWidth) {\n                boundingHeight = boundingWidth / ratio;\n            } else {\n                boundingWidth = boundingHeight * ratio;\n            }\n        }\n        distWidth = boundingWidth - startOffsetWidth;\n        distHeight = boundingHeight - startOffsetHeight;\n\n        const delta = [distWidth - prevWidth, distHeight - prevHeight];\n\n        datas.prevWidth = distWidth;\n        datas.prevHeight = distHeight;\n\n        const inverseDelta = getResizeDist(\n            moveable,\n            boundingWidth,\n            boundingHeight,\n            fixedPosition,\n            transformOrigin,\n            datas,\n        );\n\n        if (!parentMoveable && delta.every(num => !num) && inverseDelta.every(num => !num)) {\n            return;\n        }\n        const drag = Draggable.drag(\n            moveable,\n            setCustomDrag(e, moveable.state, inverseDelta, !!isPinch, false, \"draggable\"),\n        ) as OnDrag;\n        const transform = drag.transform;\n\n        const nextWidth = startWidth + distWidth;\n        const nextHeight = startHeight + distHeight;\n\n        const params = fillParams<OnResize>(moveable, e, {\n            width: nextWidth,\n            height: nextHeight,\n            offsetWidth: Math.round(boundingWidth),\n            offsetHeight: Math.round(boundingHeight),\n            startRatio: ratio,\n            boundingWidth,\n            boundingHeight,\n            direction,\n            dist: [distWidth, distHeight],\n            delta,\n            isPinch: !!isPinch,\n            drag,\n            ...fillAfterTransform({\n                style: {\n                    width: `${nextWidth}px`,\n                    height: `${nextHeight}px`,\n                },\n                transform,\n            }, drag, e),\n        });\n        !parentEvent && triggerEvent(moveable, \"onResize\", params);\n        return params;\n    },\n    dragControlAfter(\n        moveable: MoveableManagerInterface<ResizableProps & DraggableProps>,\n        e: any,\n    ) {\n        const datas = e.datas;\n        const {\n            isResize,\n            startOffsetWidth,\n            startOffsetHeight,\n            prevWidth,\n            prevHeight,\n        } = datas;\n\n        if (!isResize || moveable.props.checkResizableError === false) {\n            return;\n        }\n        const {\n            width,\n            height,\n        } = moveable.state;\n        const errorWidth = width - (startOffsetWidth + prevWidth);\n        const errorHeight = height - (startOffsetHeight + prevHeight);\n        const isErrorWidth = abs(errorWidth) > 3;\n        const isErrorHeight = abs(errorHeight) > 3;\n\n        if (isErrorWidth) {\n            datas.startWidth += errorWidth;\n            datas.startOffsetWidth += errorWidth;\n            datas.prevWidth += errorWidth;\n        }\n        if (isErrorHeight) {\n            datas.startHeight += errorHeight;\n            datas.startOffsetHeight += errorHeight;\n            datas.prevHeight += errorHeight;\n        }\n        if (isErrorWidth || isErrorHeight) {\n            return this.dragControl(moveable, e);\n        }\n    },\n    dragControlEnd(\n        moveable: MoveableManagerInterface<ResizableProps & DraggableProps>,\n        e: any,\n    ) {\n        const { datas, parentEvent } = e;\n        if (!datas.isResize) {\n            return;\n        }\n        datas.isResize = false;\n\n        const params = fillEndParams<OnResizeEnd>(moveable, e, {});\n        !parentEvent && triggerEvent(moveable, \"onResizeEnd\", params);\n        return params;\n    },\n    dragGroupControlCondition: directionCondition,\n    dragGroupControlStart(moveable: MoveableGroupInterface<any, any>, e: any) {\n        const { datas } = e;\n        const params = this.dragControlStart(moveable, {...e, isGroup: true });\n\n        if (!params) {\n            return false;\n        }\n        const originalEvents = fillChildEvents(moveable, \"resizable\", e);\n        const {\n            startOffsetWidth: parentStartOffsetWidth,\n            startOffsetHeight: parentStartOffsetHeight,\n        } = datas;\n\n        function updateGroupMin() {\n            const originalMinSize = datas.minSize;\n            originalEvents.forEach(ev => {\n                const {\n                    minSize: childMinSize,\n                    startOffsetWidth: childStartOffsetWidth,\n                    startOffsetHeight: childStartOffsetHeight,\n                } = ev.datas;\n\n                const parentMinWidth = parentStartOffsetWidth\n                    * (childStartOffsetWidth ? childMinSize[0] / childStartOffsetWidth : 0);\n                const parentMinHeight = parentStartOffsetHeight\n                    * (childStartOffsetHeight ? childMinSize[1] / childStartOffsetHeight : 0);\n\n                originalMinSize[0] = Math.max(originalMinSize[0], parentMinWidth);\n                originalMinSize[1] = Math.max(originalMinSize[1], parentMinHeight);\n            });\n        }\n\n        function updateGroupMax() {\n            const originalMaxSize = datas.maxSize;\n            originalEvents.forEach(ev => {\n                const {\n                    maxSize: childMaxSize,\n                    startOffsetWidth: childStartOffsetWidth,\n                    startOffsetHeight: childStartOffsetHeight,\n                } = ev.datas;\n\n                const parentMaxWidth = parentStartOffsetWidth\n                    * (childStartOffsetWidth ? childMaxSize[0] / childStartOffsetWidth : 0);\n                const parentMaxHeight = parentStartOffsetHeight\n                    * (childStartOffsetHeight ? childMaxSize[1] / childStartOffsetHeight : 0);\n\n                originalMaxSize[0] = Math.min(originalMaxSize[0], parentMaxWidth);\n                originalMaxSize[1] = Math.min(originalMaxSize[1], parentMaxHeight);\n            });\n        }\n        const events = triggerChildAbles(\n            moveable,\n            this,\n            \"dragControlStart\",\n            e,\n            (child, ev) => {\n                return startChildDist(moveable, child, datas, ev);\n            },\n        );\n\n\n        updateGroupMin();\n        updateGroupMax();\n\n        const setFixedDirection = (fixedDirection: number[]) => {\n            params.setFixedDirection(fixedDirection);\n            events.forEach((ev, i) => {\n                ev.setFixedDirection(fixedDirection);\n                startChildDist(moveable, ev.moveable, datas, originalEvents[i]);\n            });\n        };\n\n        datas.setFixedDirection = setFixedDirection;\n\n        const nextParams: OnResizeGroupStart = {\n            ...params,\n            targets: moveable.props.targets!,\n            events: events.map(ev => {\n                return {\n                    ...ev,\n                    setMin: (minSize: Array<number | string>) => {\n                        ev.setMin(minSize);\n                        updateGroupMin();\n                    },\n                    setMax: (maxSize: Array<number | string>) => {\n                        ev.setMax(maxSize);\n                        updateGroupMax();\n                    },\n                };\n            }),\n            setFixedDirection,\n            setMin: (minSize: Array<number | string>) => {\n                params.setMin(minSize);\n                updateGroupMin();\n            },\n            setMax: (maxSize: Array<number | string>) => {\n                params.setMax(maxSize);\n                updateGroupMax();\n            },\n        };\n        const result = triggerEvent(moveable, \"onResizeGroupStart\", nextParams);\n\n        datas.isResize = result !== false;\n        return datas.isResize ? params : false;\n    },\n    dragGroupControl(moveable: MoveableGroupInterface<any, any>, e: any) {\n        const { datas } = e;\n        if (!datas.isResize) {\n            return;\n        }\n        const props = getProps(moveable.props, \"resizable\");\n\n        catchEvent(moveable, \"onBeforeResize\", parentEvent => {\n            triggerEvent(moveable, \"onBeforeResizeGroup\", fillParams<OnBeforeResizeGroup>(moveable, e, {\n                ...parentEvent,\n                targets: props.targets!,\n            }, true));\n        });\n\n\n        const params = this.dragControl(moveable, {...e, isGroup: true });\n\n        if (!params) {\n            return;\n        }\n        const {\n            boundingWidth,\n            boundingHeight,\n            dist,\n        } = params;\n\n        const keepRatio = props.keepRatio;\n\n        const parentScale = [\n            boundingWidth / (boundingWidth - dist[0]),\n            boundingHeight / (boundingHeight - dist[1]),\n        ];\n        const fixedPosition = datas.fixedPosition;\n\n        const events = triggerChildAbles(\n            moveable,\n            this,\n            \"dragControl\",\n            e,\n            (_, ev) => {\n                const [clientX, clientY] = calculate(\n                    createRotateMatrix(moveable.rotation / 180 * Math.PI, 3),\n                    [\n                        ev.datas.originalX * parentScale[0],\n                        ev.datas.originalY * parentScale[1],\n                        1,\n                    ],\n                    3,\n                );\n\n                return {\n                    ...ev,\n                    parentDist: null,\n                    parentScale,\n                    dragClient: plus(fixedPosition, [clientX, clientY]),\n                    parentKeepRatio: keepRatio,\n                };\n            },\n        );\n        const nextParams: OnResizeGroup = {\n            targets: props.targets!,\n            events,\n            ...params,\n        };\n\n        triggerEvent(moveable, \"onResizeGroup\", nextParams);\n        return nextParams;\n    },\n    dragGroupControlEnd(moveable: MoveableGroupInterface<any, any>, e: any) {\n        const { isDrag, datas } = e;\n\n        if (!datas.isResize) {\n            return;\n        }\n\n        this.dragControlEnd(moveable, e);\n        const events = triggerChildAbles(moveable, this, \"dragControlEnd\", e);\n\n        const nextParams: OnResizeGroupEnd = fillEndParams<OnResizeGroupEnd>(moveable, e, {\n            targets: moveable.props.targets!,\n            events,\n        });\n\n        triggerEvent(moveable, \"onResizeGroupEnd\", nextParams);\n        return isDrag;\n    },\n    /**\n     * @method Moveable.Resizable#request\n     * @param {Moveable.Resizable.ResizableRequestParam} e - the Resizable's request parameter\n     * @return {Moveable.Requester} Moveable Requester\n     * @example\n\n     * // Instantly Request (requestStart - request - requestEnd)\n     * // Use Relative Value\n     * moveable.request(\"resizable\", { deltaWidth: 10, deltaHeight: 10 }, true);\n     *\n     * // Use Absolute Value\n     * moveable.request(\"resizable\", { offsetWidth: 100, offsetHeight: 100 }, true);\n     *\n     * // requestStart\n     * const requester = moveable.request(\"resizable\");\n     *\n     * // request\n     * // Use Relative Value\n     * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n     * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n     * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n     *\n     * // Use Absolute Value\n     * moveable.request(\"resizable\", { offsetWidth: 100, offsetHeight: 100 });\n     * moveable.request(\"resizable\", { offsetWidth: 110, offsetHeight: 100 });\n     * moveable.request(\"resizable\", { offsetWidth: 120, offsetHeight: 100 });\n     *\n     * // requestEnd\n     * requester.requestEnd();\n     */\n    request(moveable: MoveableManagerInterface<any>) {\n        const datas: Record<string, any> = {};\n        let distWidth = 0;\n        let distHeight = 0;\n        let useSnap = false;\n        const rect = moveable.getRect();\n\n        return {\n            isControl: true,\n            requestStart(e: ResizableRequestParam) {\n                useSnap = e.useSnap!;\n\n                return {\n                    datas, parentDirection: e.direction || [1, 1],\n                    parentIsWidth: e?.horizontal ?? true,\n                    useSnap,\n                };\n            },\n            request(e: ResizableRequestParam) {\n                if (\"offsetWidth\" in e) {\n                    distWidth = e.offsetWidth! - rect.offsetWidth;\n                } else if (\"deltaWidth\" in e) {\n                    distWidth += e.deltaWidth!;\n                }\n                if (\"offsetHeight\" in e) {\n                    distHeight = e.offsetHeight! - rect.offsetHeight;\n                } else if (\"deltaHeight\" in e) {\n                    distHeight += e.deltaHeight!;\n                }\n\n\n                return {\n                    datas,\n                    parentDist: [distWidth, distHeight],\n                    parentKeepRatio: e.keepRatio,\n                    useSnap,\n                };\n            },\n            requestEnd() {\n                return { datas, isDrag: true, useSnap };\n            },\n        };\n    },\n    unset(moveable: MoveableManagerInterface<any, {}>) {\n        moveable.state.gestos.resizable = null;\n    },\n};\n\n/**\n * Whether or not target can be resized.\n * @name Moveable.Resizable#resizable\n * @default false\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     resizable: false,\n * });\n *\n * moveable.resizable = true;\n */\n\n/**\n * throttle of width, height when resize. If throttleResize is set to less than 1, the target may shake.\n * @name Moveable.Resizable#throttleResize\n * @default 1\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   resizable: true,\n *   throttleResize: 1,\n * });\n *\n * moveable.throttleResize = 0;\n */\n/**\n * When resize or scale, keeps a ratio of the width, height.\n * @name Moveable.Resizable#keepRatio\n * @default false\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   resizable: true,\n * });\n *\n * moveable.keepRatio = true;\n */\n/**\n * Set directions to show the control box.\n * @name Moveable.Resizable#renderDirections\n * @default [\"n\", \"nw\", \"ne\", \"s\", \"se\", \"sw\", \"e\", \"w\"]\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   resizable: true,\n *   renderDirections: [\"n\", \"nw\", \"ne\", \"s\", \"se\", \"sw\", \"e\", \"w\"],\n * });\n *\n * moveable.renderDirections = [\"nw\", \"ne\", \"sw\", \"se\"];\n */\n\n/**\n * Function to convert size for resize\n * @name Moveable.Resizable#resizeFormat\n * @default oneself\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   resizable: true,\n *   resizeFormat: v => v,\n * });\n *\n * moveable.resizeFormat = (size: number[]) => ([Math.trunc(size[0]), Math.trunc(size[1])];\n */\n\n/**\n * When the resize starts, the resizeStart event is called.\n * @memberof Moveable.Resizable\n * @event resizeStart\n * @param {Moveable.Resizable.OnResizeStart} - Parameters for the resizeStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { resizable: true });\n * moveable.on(\"resizeStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n\n/**\n * When resizing, `beforeResize` is called before `resize` occurs. In `beforeResize`, you can get and set the pre-value before resizing.\n * @memberof Moveable.Resizable\n * @event beforeResize\n * @param {Moveable.Resizable.OnBeforeResize} - Parameters for the `beforeResize` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { resizable: true });\n * moveable.on(\"beforeResize\", ({ setFixedDirection }) => {\n *     if (shiftKey) {\n *        setFixedDirection([0, 0]);\n *     }\n * });\n * moveable.on(\"resize\", ({ target, width, height, drag }) => {\n *     target.style.width = `${width}px`;\n *     target.style.height = `${height}px`;\n *     target.style.transform = drag.transform;\n * });\n */\n\n/**\n * When resizing, the resize event is called.\n * @memberof Moveable.Resizable\n * @event resize\n * @param {Moveable.Resizable.OnResize} - Parameters for the resize event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { resizable: true });\n * moveable.on(\"resize\", ({ target, width, height }) => {\n *     target.style.width = `${e.width}px`;\n *     target.style.height = `${e.height}px`;\n * });\n */\n/**\n * When the resize finishes, the resizeEnd event is called.\n * @memberof Moveable.Resizable\n * @event resizeEnd\n * @param {Moveable.Resizable.OnResizeEnd} - Parameters for the resizeEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { resizable: true });\n * moveable.on(\"resizeEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n\n/**\n* When the group resize starts, the `resizeGroupStart` event is called.\n* @memberof Moveable.Resizable\n* @event resizeGroupStart\n* @param {Moveable.Resizable.OnResizeGroupStart} - Parameters for the `resizeGroupStart` event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     target: [].slice.call(document.querySelectorAll(\".target\")),\n*     resizable: true\n* });\n* moveable.on(\"resizeGroupStart\", ({ targets }) => {\n*     console.log(\"onResizeGroupStart\", targets);\n* });\n*/\n\n/**\n* When the group resize, the `resizeGroup` event is called.\n* @memberof Moveable.Resizable\n* @event resizeGroup\n* @param {Moveable.Resizable.onResizeGroup} - Parameters for the `resizeGroup` event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     target: [].slice.call(document.querySelectorAll(\".target\")),\n*     resizable: true\n* });\n* moveable.on(\"resizeGroup\", ({ targets, events }) => {\n*     console.log(\"onResizeGroup\", targets);\n*     events.forEach(ev => {\n*         const offset = [\n*             direction[0] < 0 ? -ev.delta[0] : 0,\n*             direction[1] < 0 ? -ev.delta[1] : 0,\n*         ];\n*         // ev.drag is a drag event that occurs when the group resize.\n*         const left = offset[0] + ev.drag.beforeDist[0];\n*         const top = offset[1] + ev.drag.beforeDist[1];\n*         const width = ev.width;\n*         const top = ev.top;\n*     });\n* });\n*/\n\n/**\n * When the group resize finishes, the `resizeGroupEnd` event is called.\n * @memberof Moveable.Resizable\n * @event resizeGroupEnd\n * @param {Moveable.Resizable.OnResizeGroupEnd} - Parameters for the `resizeGroupEnd` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n *     resizable: true\n * });\n * moveable.on(\"resizeGroupEnd\", ({ targets, isDrag }) => {\n *     console.log(\"onResizeGroupEnd\", targets, isDrag);\n * });\n */\n", "import {\n    prefix, triggerEvent, fillParams,\n    calculatePosition, fillEndParams, getRotationRad, getRefTargets,\n    catchEvent, getProps, calculateMoveableClientPositions,\n    fillAfterTransform,\n    getTotalOrigin,\n} from \"../utils\";\nimport {\n    IObject, hasClass, getRad,\n    throttle,\n    getDist,\n    getKeys,\n    isArray,\n} from \"@daybrush/utils\";\nimport {\n    RotatableProps, OnRotateGroup, OnRotateGroupEnd,\n    Renderer, OnRotateGroupStart, OnRotateStart, OnRotate,\n    OnRotateEnd, MoveableClientRect, SnappableProps,\n    SnappableState, MoveableManagerInterface, MoveableGroupInterface, DraggableProps,\n    OnBeforeRotate,\n    OnBeforeRotateGroup,\n    OnResizeStart,\n    OnResize,\n    TransformObject,\n    OnDragStart,\n} from \"../types\";\nimport { triggerChildAbles } from \"../groupUtils\";\nimport { calculate, convertPositionMatrix, getOrigin, minus, plus, rotate as rotateMatrix } from \"@scena/matrix\";\nimport CustomGesto, { setCustomDrag } from \"../gesto/CustomGesto\";\nimport { checkSnapRotate } from \"./Snappable\";\nimport {\n    fillTransformStartEvent,\n    convertTransformFormat, getRotateDist,\n    fillTransformEvent,\n    setDefaultTransformIndex,\n    resolveTransformEvent,\n    getTransformDirection,\n    getPosByDirection,\n    getTranslateFixedPosition,\n} from \"../gesto/GestoUtils\";\nimport { DirectionControlInfo, renderAroundControls, renderDirectionControlsByInfos } from \"../renderDirections\";\nimport { DIRECTION_REGION_TO_DIRECTION } from \"../consts\";\nimport Resizable from \"./Resizable\";\nimport Draggable from \"./Draggable\";\nimport { getOffsetFixedDirectionInfo, getOffsetFixedPositionInfo } from \"../utils/getFixedDirection\";\n\n/**\n * @namespace Rotatable\n * @memberof Moveable\n * @description Rotatable indicates whether the target can be rotated.\n */\n\nfunction setRotateStartInfo(\n    moveable: MoveableManagerInterface<any, any>,\n    datas: IObject<any>, clientX: number, clientY: number,\n    rect: MoveableClientRect,\n) {\n    const groupable = moveable.props.groupable;\n    const state = moveable.state;\n    const n = state.is3d ? 4 : 3;\n    const origin = datas.origin;\n    const nextOrigin = calculatePosition(\n        moveable.state.rootMatrix,\n        // TO-DO #710\n        minus([origin[0], origin[1]], groupable ? [0, 0] : [state.left, state.top]),\n        n,\n    );\n    const startAbsoluteOrigin = plus([rect.left, rect.top], nextOrigin);\n\n    datas.startAbsoluteOrigin = startAbsoluteOrigin;\n    datas.prevDeg = getRad(startAbsoluteOrigin, [clientX, clientY]) / Math.PI * 180;\n    datas.defaultDeg = datas.prevDeg;\n    datas.prevSnapDeg = 0;\n    datas.loop = 0;\n    datas.startDist = getDist(startAbsoluteOrigin, [clientX, clientY]);\n}\n\nfunction getAbsoluteDist(\n    deg: number,\n    direction: number,\n    datas: IObject<any>,\n) {\n    const {\n        defaultDeg,\n        prevDeg,\n    } = datas;\n\n\n    let normalizedPrevDeg = prevDeg % 360;\n    let loop = Math.floor(prevDeg / 360);\n\n    if (normalizedPrevDeg < 0) {\n        normalizedPrevDeg += 360;\n    }\n\n    if (normalizedPrevDeg > deg && normalizedPrevDeg > 270 && deg < 90) {\n        // 360 => 0\n        ++loop;\n    } else if (normalizedPrevDeg < deg && normalizedPrevDeg < 90 && deg > 270) {\n        // 0 => 360\n        --loop;\n    }\n    const dist = direction * (loop * 360 + deg - defaultDeg);\n\n    datas.prevDeg = defaultDeg + dist;\n\n    return dist;\n}\nfunction getAbsoluteDistByClient(\n    clientX: number, clientY: number,\n    direction: number,\n    datas: IObject<any>,\n) {\n    return getAbsoluteDist(\n        getRad(datas.startAbsoluteOrigin, [clientX, clientY]) / Math.PI * 180,\n        direction,\n        datas,\n    );\n}\nfunction getRotateInfo(\n    moveable: MoveableManagerInterface<any, any>,\n    moveableRect: any,\n    datas: IObject<any>,\n    dist: number,\n    startValue: number,\n    checkSnap?: boolean,\n) {\n    const {\n        throttleRotate = 0,\n    } = moveable.props;\n    const prevSnapDeg = datas.prevSnapDeg;\n    let snapRotation = 0;\n    let isSnap = false;\n\n    if (checkSnap) {\n        const result = checkSnapRotate(\n            moveable,\n            moveableRect,\n            dist,\n            startValue + dist,\n        );\n\n        isSnap = result.isSnap;\n        snapRotation = startValue + result.dist;\n    }\n\n    if (!isSnap) {\n        snapRotation = throttle(startValue + dist, throttleRotate);\n    }\n    const snapDeg = snapRotation - startValue;\n\n    datas.prevSnapDeg = snapDeg;\n\n    return [snapDeg - prevSnapDeg, snapDeg, snapRotation];\n\n\n}\n\nexport function getReversePositionX(dir: string) {\n    if (dir === \"left\") {\n        return \"right\";\n    } else if (dir === \"right\") {\n        return \"left\";\n    }\n    return dir;\n}\nexport function getReversePositionY(dir: string) {\n    if (dir === \"top\") {\n        return \"bottom\";\n    } else if (dir === \"bottom\") {\n        return \"top\";\n    }\n    return dir;\n}\nexport function getRotationPositions(\n    rotationPosition: RotatableProps[\"rotationPosition\"],\n    [pos1, pos2, pos3, pos4]: number[][],\n    direction: number,\n): [number[], number][] {\n    if (rotationPosition === \"none\") {\n        return [];\n    }\n    if (isArray(rotationPosition)) {\n        return rotationPosition.map(child => getRotationPositions(\n            child,\n            [pos1, pos2, pos3, pos4],\n            direction,\n        )[0]);\n    }\n    const [dir1, dir2] = (rotationPosition || \"top\").split(\"-\");\n    let radPoses = [pos1, pos2];\n\n    if (dir1 === \"left\") {\n        radPoses = [pos3, pos1];\n    } else if (dir1 === \"right\") {\n        radPoses = [pos2, pos4];\n    } else if (dir1 === \"bottom\") {\n        radPoses = [pos4, pos3];\n    }\n    let pos = [\n        (radPoses[0][0] + radPoses[1][0]) / 2,\n        (radPoses[0][1] + radPoses[1][1]) / 2,\n    ];\n    const rad = getRotationRad(radPoses, direction);\n    if (dir2) {\n        const isStart = dir2 === \"top\" || dir2 === \"left\";\n        const isReverse = dir1 === \"bottom\" || dir1 === \"left\";\n\n        pos = radPoses[(isStart && !isReverse) || (!isStart && isReverse) ? 0 : 1];\n    }\n    return [[pos, rad]];\n}\n\nexport function dragControlCondition(moveable: MoveableManagerInterface<RotatableProps>, e: any) {\n    if (e.isRequest) {\n        return e.requestAble === \"rotatable\";\n    }\n    const target = e.inputEvent.target as HTMLElement;\n    if (\n        hasClass(target, prefix(\"rotation-control\"))\n        || (moveable.props.rotateAroundControls && hasClass(target, prefix(\"around-control\")))\n        || (hasClass(target, prefix(\"control\")) && hasClass(target, prefix(\"rotatable\")))\n    ) {\n        return true;\n    }\n    const rotationTarget = moveable.props.rotationTarget;\n\n    if (rotationTarget) {\n        return getRefTargets(rotationTarget, true).some(element => {\n            if (!element) {\n                return false;\n            }\n            return target === element || target.contains(element);\n        });\n    }\n    return false;\n}\n\nconst css = `.rotation {\nposition: absolute;\nheight: 40px;\nwidth: 1px;\ntransform-origin: 50% 100%;\nheight: calc(40px * var(--zoom));\ntop: auto;\nleft: 0;\nbottom: 100%;\nwill-change: transform;\n}\n.rotation .rotation-line {\ndisplay: block;\nwidth: 100%;\nheight: 100%;\ntransform-origin: 50% 50%;\n}\n.rotation .rotation-control {\nborder-color: #4af;\nborder-color: var(--moveable-color);\nbackground:#fff;\ncursor: alias;\n}\n:global .view-rotation-dragging, .rotatable.direction.control {\ncursor: alias;\n}\n.rotatable.direction.control.move {\ncursor: move;\n}\n`;\nexport default {\n    name: \"rotatable\",\n    canPinch: true,\n    props: [\n        \"rotatable\",\n        \"rotationPosition\",\n        \"throttleRotate\",\n        \"renderDirections\",\n        \"rotationTarget\",\n        \"rotateAroundControls\",\n        \"edge\",\n        \"resolveAblesWithRotatable\",\n        \"displayAroundControls\",\n    ] as const,\n    events: [\n        \"rotateStart\",\n        \"beforeRotate\",\n        \"rotate\",\n        \"rotateEnd\",\n        \"rotateGroupStart\",\n        \"beforeRotateGroup\",\n        \"rotateGroup\",\n        \"rotateGroupEnd\",\n    ] as const,\n    css: [css],\n    viewClassName(moveable: MoveableManagerInterface<RotatableProps>) {\n        if (!moveable.isDragging(\"rotatable\")) {\n            return \"\";\n        }\n        return prefix(\"view-rotation-dragging\");\n    },\n    render(moveable: MoveableManagerInterface<RotatableProps>, React: Renderer): any {\n        const {\n            rotatable,\n            rotationPosition,\n            zoom,\n            renderDirections,\n            rotateAroundControls,\n            resolveAblesWithRotatable,\n        } = getProps(moveable.props, \"rotatable\");\n        const {\n            renderPoses,\n            direction,\n        } = moveable.getState();\n        if (!rotatable) {\n            return null;\n        }\n        const positions = getRotationPositions(rotationPosition!, renderPoses, direction);\n        const jsxs: any[] = [];\n\n        positions.forEach(([pos, rad], i) => {\n            jsxs.push(\n                <div key={`rotation${i}`} className={prefix(\"rotation\")} style={{\n                    // tslint:disable-next-line: max-line-length\n                    transform: `translate(-50%) translate(${pos[0]}px, ${pos[1]}px) rotate(${rad}rad)`,\n                }}>\n                    <div className={prefix(\"line rotation-line\")} style={{\n                        transform: `scaleX(${zoom})`,\n                    }}></div>\n                    <div className={prefix(\"control rotation-control\")} style={{\n                        transform: `translate(0.5px) scale(${zoom})`,\n                    }}></div>\n                </div>\n            );\n        });\n        if (renderDirections) {\n            const ables = getKeys(resolveAblesWithRotatable || {});\n            const resolveMap: Record<string, string> = {};\n\n            ables.forEach(name => {\n                resolveAblesWithRotatable![name]!.forEach(direction => {\n                    resolveMap[direction] = name;\n                });\n            });\n\n            let directionControlInfos: DirectionControlInfo[] = [];\n\n            if (isArray(renderDirections)) {\n                directionControlInfos = renderDirections.map(dir => {\n                    const able = resolveMap[dir];\n\n                    return {\n                        data: able ? { resolve: able } : {},\n                        classNames: able ? [`move`] : [],\n                        dir,\n                    };\n                });\n            }\n\n            jsxs.push(...renderDirectionControlsByInfos(\n                moveable,\n                \"rotatable\",\n                directionControlInfos,\n                React,\n            ));\n        }\n        if (rotateAroundControls) {\n            jsxs.push(...renderAroundControls(moveable, React));\n        }\n\n        return jsxs;\n    },\n    dragControlCondition: dragControlCondition as (moveable: any, e: any) => boolean,\n    dragControlStart(\n        moveable: MoveableManagerInterface<RotatableProps & SnappableProps & DraggableProps, SnappableState>,\n        e: any) {\n        const {\n            datas,\n            clientX, clientY,\n            parentRotate, parentFlag, isPinch,\n            isRequest,\n        } = e;\n        const state = moveable.state;\n        const {\n            target, left, top,\n            direction, beforeDirection, targetTransform,\n            moveableClientRect,\n            offsetMatrix,\n            targetMatrix,\n            allMatrix,\n            width,\n            height,\n        } = state;\n\n        if (!isRequest && !target) {\n            return false;\n        }\n\n        const rect = moveable.getRect();\n        datas.rect = rect;\n        datas.transform = targetTransform;\n        datas.left = left;\n        datas.top = top;\n        let setFixedPosition = (fixedPosition: number[]) => {\n            const result = getOffsetFixedPositionInfo(moveable.state, fixedPosition);\n\n            datas.fixedDirection = result.fixedDirection;\n            datas.fixedOffset = result.fixedOffset;\n            datas.fixedPosition = result.fixedPosition;\n\n\n            if (resizeStart) {\n                resizeStart.setFixedPosition(fixedPosition);\n            }\n        };\n        let setFixedDirection: OnRotateStart[\"setFixedDirection\"] = (fixedDirection: number[]) => {\n            const result = getOffsetFixedDirectionInfo(moveable.state, fixedDirection);\n\n            datas.fixedDirection = result.fixedDirection;\n            datas.fixedOffset = result.fixedOffset;\n            datas.fixedPosition = result.fixedPosition;\n\n            if (resizeStart) {\n                resizeStart.setFixedDirection(fixedDirection);\n            }\n        };\n        let startClientX = clientX;\n        let startClientY = clientY;\n\n        if (isRequest || isPinch || parentFlag) {\n            const externalRotate = parentRotate || 0;\n\n            datas.beforeInfo = {\n                origin: rect.beforeOrigin,\n                prevDeg: externalRotate,\n                defaultDeg: externalRotate,\n                prevSnapDeg: 0,\n                startDist: 0,\n            };\n            datas.afterInfo = {\n                ...datas.beforeInfo,\n                origin: rect.origin,\n            };\n            datas.absoluteInfo = {\n                ...datas.beforeInfo,\n                origin: rect.origin,\n                startValue: externalRotate,\n            };\n        } else {\n            const inputTarget = e.inputEvent?.target;\n\n            if (inputTarget) {\n                const regionDirection = inputTarget.getAttribute(\"data-direction\") || \"\";\n                const controlDirection = DIRECTION_REGION_TO_DIRECTION[regionDirection];\n\n                if (controlDirection) {\n                    datas.isControl = true;\n                    datas.isAroundControl = hasClass(inputTarget, prefix(\"around-control\"));\n                    datas.controlDirection = controlDirection;\n                    const resolve = inputTarget.getAttribute(\"data-resolve\");\n\n                    if (resolve) {\n                        datas.resolveAble = resolve;\n                    }\n\n                    const clientPoses = calculateMoveableClientPositions(\n                        state.rootMatrix,\n                        state.renderPoses,\n                        moveableClientRect,\n                    );\n\n\n                    [startClientX, startClientY] = getPosByDirection(clientPoses, controlDirection);\n                }\n            }\n            datas.beforeInfo = { origin: rect.beforeOrigin };\n            datas.afterInfo = { origin: rect.origin };\n            datas.absoluteInfo = {\n                origin: rect.origin,\n                startValue: rect.rotation,\n            };\n\n            const originalFixedPosition = setFixedPosition;\n\n            setFixedPosition = (fixedPosition: number[]) => {\n                const n = state.is3d ? 4 : 3;\n                const [originX, originY] = plus(getOrigin(targetMatrix, n), fixedPosition);\n                const fixedBeforeOrigin = calculate(\n                    offsetMatrix,\n                    convertPositionMatrix([originX, originY], n),\n                );\n                const fixedAfterOrigin = calculate(\n                    allMatrix,\n                    convertPositionMatrix([fixedPosition[0], fixedPosition[1]], n),\n                );\n                originalFixedPosition(fixedPosition);\n                const posDelta = state.posDelta;\n\n                datas.beforeInfo.origin = minus(fixedBeforeOrigin, posDelta);\n                datas.afterInfo.origin = minus(fixedAfterOrigin, posDelta);\n                datas.absoluteInfo.origin = minus(fixedAfterOrigin, posDelta);\n\n                setRotateStartInfo(moveable, datas.beforeInfo, startClientX, startClientY, moveableClientRect);\n                setRotateStartInfo(moveable, datas.afterInfo, startClientX, startClientY, moveableClientRect);\n                setRotateStartInfo(moveable, datas.absoluteInfo, startClientX, startClientY, moveableClientRect);\n            };\n            setFixedDirection = (fixedDirection: number[]) => {\n                const fixedPosition = getPosByDirection([\n                    [0, 0],\n                    [width, 0],\n                    [0, height],\n                    [width, height],\n                ], fixedDirection);\n\n                setFixedPosition(fixedPosition);\n            };\n        }\n\n        datas.startClientX = startClientX;\n        datas.startClientY = startClientY;\n        datas.direction = direction;\n        datas.beforeDirection = beforeDirection;\n        datas.startValue = 0;\n        datas.datas = {};\n\n        setDefaultTransformIndex(moveable, e, \"rotate\");\n\n        let dragStart: OnDragStart | false = false;\n        let resizeStart: OnResizeStart | false = false;\n\n        if (datas.isControl && datas.resolveAble) {\n            const resolveAble = datas.resolveAble;\n\n            if (resolveAble === \"resizable\") {\n                resizeStart = Resizable.dragControlStart(moveable, {\n                    ...(new CustomGesto(\"resizable\").dragStart([0, 0], e)),\n                    parentPosition: datas.controlPosition,\n                    parentFixedPosition: datas.fixedPosition,\n                });\n            }\n        }\n\n        if (!resizeStart) {\n            dragStart = Draggable.dragStart!(\n                moveable,\n                new CustomGesto().dragStart([0, 0], e),\n            );\n        }\n\n        setFixedPosition(getTotalOrigin(moveable));\n        const params = fillParams<OnRotateStart>(moveable, e, {\n            set: (rotatation: number) => {\n                datas.startValue = rotatation * Math.PI / 180;\n            },\n            setFixedDirection,\n            setFixedPosition,\n            ...fillTransformStartEvent(moveable, e),\n            dragStart,\n            resizeStart,\n        });\n        const result = triggerEvent(moveable, \"onRotateStart\", params);\n        datas.isRotate = result !== false;\n        state.snapRenderInfo = {\n            request: e.isRequest,\n        };\n\n        return datas.isRotate ? params : false;\n    },\n    dragControl(\n        moveable: MoveableManagerInterface<RotatableProps & DraggableProps>,\n        e: any,\n    ) {\n        const {\n            datas, clientDistX, clientDistY,\n            parentRotate, parentFlag, isPinch, groupDelta,\n            resolveMatrix,\n        } = e;\n        const {\n            beforeDirection,\n            beforeInfo,\n            afterInfo,\n            absoluteInfo,\n            isRotate,\n            startValue,\n            rect,\n            startClientX,\n            startClientY,\n        } = datas;\n\n        if (!isRotate) {\n            return;\n        }\n\n        resolveTransformEvent(moveable, e, \"rotate\");\n\n        const targetDirection = getTransformDirection(e);\n        const direction = beforeDirection * targetDirection;\n        const {\n            parentMoveable,\n        } = moveable.props;\n\n\n        let beforeDelta = 0;\n        let beforeDist: number;\n        let beforeRotation: number;\n\n        let delta = 0;\n        let dist: number;\n        let rotation: number;\n\n        let absoluteDelta = 0;\n        let absoluteDist: number;\n        let absoluteRotation: number;\n\n        const startRotation = 180 / Math.PI * startValue;\n        const absoluteStartRotation = absoluteInfo.startValue;\n        let isSnap = false;\n        const nextClientX = startClientX + clientDistX;\n        const nextClientY = startClientY + clientDistY;\n\n        if (!parentFlag && \"parentDist\" in e) {\n            const parentDist = e.parentDist;\n\n            beforeDist = parentDist;\n            dist = parentDist;\n            absoluteDist = parentDist;\n        } else if (isPinch || parentFlag) {\n            beforeDist = getAbsoluteDist(parentRotate, beforeDirection, beforeInfo);\n            dist = getAbsoluteDist(parentRotate, direction, afterInfo);\n            absoluteDist = getAbsoluteDist(parentRotate, direction, absoluteInfo);\n        } else {\n            beforeDist = getAbsoluteDistByClient(nextClientX, nextClientY, beforeDirection, beforeInfo);\n            dist = getAbsoluteDistByClient(nextClientX, nextClientY, direction, afterInfo);\n            absoluteDist = getAbsoluteDistByClient(nextClientX, nextClientY, direction, absoluteInfo);\n            isSnap = true;\n        }\n        beforeRotation = startRotation + beforeDist;\n        rotation = startRotation + dist;\n        absoluteRotation = absoluteStartRotation + absoluteDist;\n\n\n        triggerEvent(moveable, \"onBeforeRotate\", fillParams<OnBeforeRotate>(moveable, e, {\n            beforeRotation,\n            rotation,\n            absoluteRotation,\n            setRotation(nextRotation: number) {\n                dist = nextRotation - startRotation;\n                beforeDist = dist;\n                absoluteDist = dist;\n            },\n        }, true));\n\n        [\n            beforeDelta,\n            beforeDist,\n            beforeRotation,\n        ] = getRotateInfo(moveable, rect, beforeInfo, beforeDist, startRotation, isSnap);\n\n        [\n            delta,\n            dist,\n            rotation,\n        ] = getRotateInfo(moveable, rect, afterInfo, dist, startRotation, isSnap);\n\n        [\n            absoluteDelta,\n            absoluteDist,\n            absoluteRotation,\n        ] = getRotateInfo(moveable, rect, absoluteInfo, absoluteDist, absoluteStartRotation, isSnap);\n\n        if (!absoluteDelta && !delta && !beforeDelta && !parentMoveable && !resolveMatrix) {\n            return;\n        }\n\n        const nextTransform = convertTransformFormat(\n            datas, `rotate(${rotation}deg)`, `rotate(${dist}deg)`,\n        );\n        if (resolveMatrix) {\n            datas.fixedPosition = getTranslateFixedPosition(\n                moveable,\n                datas.targetAllTransform,\n                datas.fixedDirection,\n                datas.fixedOffset,\n                datas,\n            );\n        }\n\n        const inverseDist = getRotateDist(moveable, dist, datas);\n        const inverseDelta = minus(\n            plus(groupDelta || [0, 0], inverseDist),\n            datas.prevInverseDist || [0, 0],\n        );\n        datas.prevInverseDist = inverseDist;\n        datas.requestValue = null;\n\n        const dragEvent = fillTransformEvent(\n            moveable,\n            nextTransform,\n            inverseDelta,\n            isPinch,\n            e,\n        );\n\n        let transformEvent: TransformObject = dragEvent;\n        const parentDistance = getDist(\n            [nextClientX, nextClientY],\n            absoluteInfo.startAbsoluteOrigin,\n        ) - absoluteInfo.startDist;\n\n        let resize: OnResize | undefined = undefined;\n\n        if (datas.resolveAble === \"resizable\") {\n            const resizeEvent = Resizable.dragControl(\n                moveable,\n                {\n                    ...setCustomDrag(e, moveable.state, [e.deltaX, e.deltaY], !!isPinch, false, \"resizable\"),\n                    resolveMatrix: true,\n                    parentDistance,\n                },\n            );\n\n            if (resizeEvent) {\n                resize = resizeEvent;\n                transformEvent = fillAfterTransform(transformEvent, resizeEvent, e);\n            }\n        }\n\n        const params = fillParams<OnRotate>(moveable, e, {\n            delta,\n            dist,\n            rotate: rotation,\n            rotation,\n\n            beforeDist,\n            beforeDelta,\n            beforeRotate: beforeRotation,\n            beforeRotation,\n\n            absoluteDist,\n            absoluteDelta,\n            absoluteRotate: absoluteRotation,\n            absoluteRotation,\n\n            isPinch: !!isPinch,\n            resize,\n            ...dragEvent,\n            ...transformEvent,\n        });\n        triggerEvent(moveable, \"onRotate\", params);\n\n        return params;\n    },\n    dragControlEnd(moveable: MoveableManagerInterface<RotatableProps>, e: any) {\n        const { datas } = e;\n\n        if (!datas.isRotate) {\n            return;\n        }\n        datas.isRotate = false;\n\n        const params = fillEndParams<OnRotateEnd>(moveable, e, {});\n\n        triggerEvent(moveable, \"onRotateEnd\", params);\n        return params;\n    },\n    dragGroupControlCondition: dragControlCondition as (moveable: any, e: any) => boolean,\n    dragGroupControlStart(moveable: MoveableGroupInterface<any, any>, e: any) {\n        const { datas } = e;\n        const {\n            left: parentLeft,\n            top: parentTop,\n            beforeOrigin: parentBeforeOrigin,\n        } = moveable.state;\n\n        const params = this.dragControlStart(moveable, e);\n\n        if (!params) {\n            return false;\n        }\n\n        params.set(datas.beforeDirection * moveable.rotation);\n\n        const events = triggerChildAbles(\n            moveable,\n            this,\n            \"dragControlStart\",\n            e,\n            (child, ev) => {\n                const { left, top, beforeOrigin } = child.state;\n                const childClient = plus(\n                    minus([left, top], [parentLeft, parentTop]),\n                    minus(beforeOrigin, parentBeforeOrigin),\n                );\n\n                ev.datas.startGroupClient = childClient;\n                ev.datas.groupClient = childClient;\n                return { ...ev, parentRotate: 0 };\n            },\n        );\n\n        const nextParams: OnRotateGroupStart = {\n            ...params,\n            targets: moveable.props.targets!,\n            events,\n        };\n        const result = triggerEvent(moveable, \"onRotateGroupStart\", nextParams);\n\n        datas.isRotate = result !== false;\n\n        return datas.isRotate ? params : false;\n    },\n    dragGroupControl(moveable: MoveableGroupInterface<any, any>, e: any) {\n        const { datas } = e;\n\n        if (!datas.isRotate) {\n            return;\n        }\n\n        catchEvent(moveable, \"onBeforeRotate\", parentEvent => {\n            triggerEvent(moveable, \"onBeforeRotateGroup\", fillParams<OnBeforeRotateGroup>(moveable, e, {\n                ...parentEvent,\n                targets: moveable.props.targets!,\n            }, true));\n        });\n        const params = this.dragControl(moveable, e);\n\n        if (!params) {\n            return;\n        }\n        const direction = datas.beforeDirection;\n        const parentRotate = params.beforeDist;\n        const rad = parentRotate / 180 * Math.PI;\n        const events = triggerChildAbles(\n            moveable,\n            this,\n            \"dragControl\",\n            e,\n            (_, ev) => {\n                const startGroupClient = ev.datas.startGroupClient;\n                const [prevClientX, prevClientY] = ev.datas.groupClient;\n                const [clientX, clientY] = rotateMatrix(startGroupClient, rad * direction);\n                const delta = [clientX - prevClientX, clientY - prevClientY];\n\n                ev.datas.groupClient = [clientX, clientY];\n                return { ...ev, parentRotate, groupDelta: delta };\n            },\n        );\n        moveable.rotation = direction * params.beforeRotation;\n\n        const nextParams: OnRotateGroup = {\n            targets: moveable.props.targets!,\n            events,\n            set(rotation: number) {\n                moveable.rotation = rotation;\n            },\n            setGroupRotation(rotation: number) {\n                moveable.rotation = rotation;\n            },\n            ...params,\n        };\n\n        triggerEvent(moveable, \"onRotateGroup\", nextParams);\n        return nextParams;\n    },\n    dragGroupControlEnd(moveable: MoveableGroupInterface<any, any>, e: any) {\n        const { isDrag, datas } = e;\n\n        if (!datas.isRotate) {\n            return;\n        }\n\n        this.dragControlEnd(moveable, e);\n        const events = triggerChildAbles(moveable, this, \"dragControlEnd\", e);\n\n        const nextParams = fillEndParams<OnRotateGroupEnd>(moveable, e, {\n            targets: moveable.props.targets!,\n            events,\n        });\n\n        triggerEvent(moveable, \"onRotateGroupEnd\", nextParams);\n        return isDrag;\n    },\n    /**\n     * @method Moveable.Rotatable#request\n     * @param {object} [e] - the Resizable's request parameter\n     * @param {number} [e.deltaRotate=0] -  delta number of rotation\n     * @param {number} [e.rotate=0] - absolute number of moveable's rotation\n     * @return {Moveable.Requester} Moveable Requester\n     * @example\n\n     * // Instantly Request (requestStart - request - requestEnd)\n     * moveable.request(\"rotatable\", { deltaRotate: 10 }, true);\n     *\n     * * moveable.request(\"rotatable\", { rotate: 10 }, true);\n     *\n     * // requestStart\n     * const requester = moveable.request(\"rotatable\");\n     *\n     * // request\n     * requester.request({ deltaRotate: 10 });\n     * requester.request({ deltaRotate: 10 });\n     * requester.request({ deltaRotate: 10 });\n     *\n     * requester.request({ rotate: 10 });\n     * requester.request({ rotate: 20 });\n     * requester.request({ rotate: 30 });\n     *\n     * // requestEnd\n     * requester.requestEnd();\n     */\n    request(moveable: MoveableManagerInterface<RotatableProps>) {\n        const datas = {};\n        let distRotate = 0;\n\n        const startRotation = moveable.getRotation();\n        return {\n            isControl: true,\n            requestStart() {\n                return { datas };\n            },\n            request(e: IObject<any>) {\n                if (\"deltaRotate\" in e) {\n                    distRotate += e.deltaRotate;\n                } else if (\"rotate\" in e) {\n                    distRotate = e.rotate - startRotation;\n                }\n\n                return { datas, parentDist: distRotate };\n            },\n            requestEnd() {\n                return { datas, isDrag: true };\n            },\n        };\n    },\n};\n/**\n * Whether or not target can be rotated. (default: false)\n * @name Moveable.Rotatable#rotatable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.rotatable = true;\n */\n/**\n * You can specify the position of the rotation. (default: \"top\")\n * @name Moveable.Rotatable#rotationPosition\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   rotationPosition: \"top\",\n * });\n *\n * moveable.rotationPosition = \"bottom\"\n */\n\n/**\n * throttle of angle(degree) when rotate.\n * @name Moveable.Rotatable#throttleRotate\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.throttleRotate = 1;\n */\n\n/**\n * When the rotate starts, the rotateStart event is called.\n * @memberof Moveable.Rotatable\n * @event rotateStart\n * @param {Moveable.Rotatable.OnRotateStart} - Parameters for the rotateStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { rotatable: true });\n * moveable.on(\"rotateStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n\n/**\n* When rotating, the rotate event is called.\n* @memberof Moveable.Rotatable\n* @event rotate\n* @param {Moveable.Rotatable.OnRotate} - Parameters for the rotate event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, { rotatable: true });\n* moveable.on(\"rotate\", ({ target, transform, dist }) => {\n*     target.style.transform = transform;\n* });\n*/\n/**\n * When the rotate finishes, the rotateEnd event is called.\n * @memberof Moveable.Rotatable\n * @event rotateEnd\n * @param {Moveable.Rotatable.OnRotateEnd} - Parameters for the rotateEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { rotatable: true });\n * moveable.on(\"rotateEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n\n/**\n * When the group rotate starts, the `rotateGroupStart` event is called.\n * @memberof Moveable.Rotatable\n * @event rotateGroupStart\n * @param {Moveable.Rotatable.OnRotateGroupStart} - Parameters for the `rotateGroupStart` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n *     rotatable: true\n * });\n * moveable.on(\"rotateGroupStart\", ({ targets }) => {\n *     console.log(\"onRotateGroupStart\", targets);\n * });\n */\n\n/**\n* When the group rotate, the `rotateGroup` event is called.\n* @memberof Moveable.Rotatable\n* @event rotateGroup\n* @param {Moveable.Rotatable.OnRotateGroup} - Parameters for the `rotateGroup` event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     target: [].slice.call(document.querySelectorAll(\".target\")),\n*     rotatable: true\n* });\n* moveable.on(\"rotateGroup\", ({ targets, events }) => {\n*     console.log(\"onRotateGroup\", targets);\n*     events.forEach(ev => {\n*         const target = ev.target;\n*         // ev.drag is a drag event that occurs when the group rotate.\n*         const left = ev.drag.beforeDist[0];\n*         const top = ev.drag.beforeDist[1];\n*         const deg = ev.beforeDist;\n*     });\n* });\n*/\n\n/**\n * When the group rotate finishes, the `rotateGroupEnd` event is called.\n * @memberof Moveable.Rotatable\n * @event rotateGroupEnd\n * @param {Moveable.Rotatable.OnRotateGroupEnd} - Parameters for the `rotateGroupEnd` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n *     rotatable: true\n * });\n * moveable.on(\"rotateGroupEnd\", ({ targets, isDrag }) => {\n *     console.log(\"onRotateGroupEnd\", targets, isDrag);\n * });\n */\n", "import { throttle } from \"@daybrush/utils\";\nimport {\n    RenderGuidelineInfo, Renderer, RenderGuidelineInnerInfo,\n    MoveableManagerInterface, SnappableProps, SnapGuideline,\n    SnappableRenderType, SnappableState,\n    SnapDirectionPoses,\n} from \"../../types\";\nimport { prefix, groupBy } from \"../../utils\";\nimport { HORIZONTAL_NAMES_MAP, VERTICAL_NAMES_MAP } from \"./utils\";\n\nexport function renderGuideline(info: RenderGuidelineInfo, React: Renderer): any {\n    const { direction, classNames, size, pos, zoom, key } = info;\n    const isHorizontal = direction === \"horizontal\";\n    const scaleType = isHorizontal ? \"Y\" : \"X\";\n    // const scaleType2 = isHorizontal ? \"Y\" : \"X\";\n\n    return React.createElement(\"div\", {\n        key,\n        className: classNames.join(\" \"),\n        style: {\n            [isHorizontal ? \"width\" : \"height\"]: `${size}`,\n            transform: `translate(${pos[0]}, ${pos[1]}) translate${scaleType}(-50%) scale${scaleType}(${zoom})`,\n        },\n    });\n}\n\nexport function renderInnerGuideline(info: RenderGuidelineInnerInfo, React: Renderer): any {\n    return renderGuideline({\n        ...info,\n        classNames: [\n            prefix(\"line\", \"guideline\", info.direction),\n            ...info.classNames,\n        ].filter(className => className) as string[],\n        size: info.size || `${info.sizeValue}px`,\n        pos: info.pos || info.posValue.map(v => `${throttle(v, 0.1)}px`),\n    }, React);\n}\n\nexport function renderSnapPoses(\n    moveable: MoveableManagerInterface,\n    direction: string,\n    snapPoses: SnappableRenderType[],\n    minPos: number,\n    targetPos: number,\n    size: number,\n    index: number,\n    React: Renderer\n) {\n    const { zoom } = moveable.props;\n    return snapPoses.map(({ type, pos }, i) => {\n        const renderPos = [0, 0];\n\n        renderPos[index] = minPos;\n        renderPos[index ? 0 : 1] = -targetPos + pos;\n\n        return renderInnerGuideline(\n            {\n                key: `${direction}TargetGuideline${i}`,\n                classNames: [prefix(\"target\", \"bold\", type)],\n                posValue: renderPos,\n                sizeValue: size,\n                zoom: zoom!,\n                direction: direction,\n            },\n            React\n        );\n    });\n}\nexport function renderGuidelines(\n    moveable: MoveableManagerInterface<SnappableProps>,\n    type: \"vertical\" | \"horizontal\",\n    guidelines: SnapGuideline[],\n    targetPos: number[],\n    targetRect: SnapDirectionPoses,\n    React: Renderer\n): any[] {\n    const { zoom, isDisplayInnerSnapDigit } = moveable.props;\n\n    const mainNames = type === \"horizontal\" ? VERTICAL_NAMES_MAP : HORIZONTAL_NAMES_MAP;\n    const targetStart = targetRect[mainNames.start]!;\n    const targetEnd = targetRect[mainNames.end]!;\n    return guidelines.filter(({ hide, elementRect }) => {\n        if (hide) {\n            return false;\n        }\n        if (isDisplayInnerSnapDigit && elementRect) {\n            // inner\n            const rect = elementRect.rect;\n\n            if (rect[mainNames.start]! <= targetStart && targetEnd <= rect[mainNames.end]!) {\n                return false;\n            }\n        }\n        return true;\n    }).map((guideline, i) => {\n        const { pos, size, element, className } = guideline;\n\n        const renderPos = [\n            -targetPos[0] + pos[0],\n            -targetPos[1] + pos[1],\n        ];\n\n        return renderInnerGuideline(\n            {\n                key: `${type}-default-guideline-${i}`,\n                classNames: element ? [prefix(\"bold\"), className] : [prefix(\"normal\"), className],\n                direction: type,\n                posValue: renderPos,\n                sizeValue: size,\n                zoom: zoom!,\n            },\n            React\n        );\n    });\n}\n\nexport function renderDigitLine(\n    moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n    type: \"vertical\" | \"horizontal\",\n    lineType: \"dashed\" | \"gap\",\n    index: number,\n    gap: number,\n    renderPos: number[],\n    className: string | undefined,\n    React: Renderer,\n): any {\n    const {\n        snapDigit = 0,\n        isDisplaySnapDigit = true,\n        snapDistFormat = (v: number, type: \"vertical\" | \"horizontal\") => {\n            // Type can be used render different values.\n            if (type === 'vertical') {\n                return v;\n            }\n            return v;\n        },\n        zoom,\n    } = moveable.props;\n    const scaleType = type === \"horizontal\" ? \"X\" : \"Y\";\n    const sizeName = type === \"vertical\" ? \"height\" : \"width\";\n    const absGap = Math.abs(gap!);\n    const snapSize = isDisplaySnapDigit\n        ? parseFloat(absGap.toFixed(snapDigit))\n        : 0;\n    return <div\n        key={`${type}-${lineType}-guideline-${index}`}\n        className={prefix(\"guideline-group\", type)}\n        style={{\n            left: `${renderPos[0]}px`,\n            top: `${renderPos[1]}px`,\n            [sizeName]: `${absGap}px`,\n        }}\n    >\n        {renderInnerGuideline(\n            {\n                direction: type,\n                classNames: [prefix(lineType), className],\n                size: \"100%\",\n                posValue: [0, 0],\n                sizeValue: absGap,\n                zoom: zoom!,\n            },\n            React\n        )}\n        <div\n            className={prefix(\"size-value\", \"gap\")}\n            style={{\n                transform: `translate${scaleType}(-50%) scale(${zoom})`,\n            }}\n        >\n            {snapSize > 0 ? snapDistFormat(snapSize, type) : \"\"}\n        </div>\n    </div>;\n}\n\nexport function groupByElementGuidelines(\n    type: \"vertical\" | \"horizontal\",\n    guidelines: SnapGuideline[],\n    targetRect: SnapDirectionPoses,\n    isDisplayInnerSnapDigit: boolean,\n) {\n    const index = type === \"vertical\" ? 0 : 1;\n    const otherIndex = type === \"vertical\" ? 1 : 0;\n    const names = index ? VERTICAL_NAMES_MAP : HORIZONTAL_NAMES_MAP;\n    const targetStart = targetRect[names.start]!;\n    const targetEnd = targetRect[names.end]!;\n    return groupBy(guidelines, (guideline) => {\n        return guideline.pos[index];\n    }).map(nextGuidelines => {\n        const start: SnapGuideline[] = [];\n        const end: SnapGuideline[] = [];\n        const inner: SnapGuideline[] = [];\n\n        nextGuidelines.forEach(guideline => {\n            const element = guideline.element!;\n            const rect = guideline.elementRect!.rect;\n            if (rect[names.end]! < targetStart) {\n                start.push(guideline);\n            } else if (targetEnd < rect[names.start]!) {\n                end.push(guideline);\n            } else if (rect[names.start]! <= targetStart && targetEnd <= rect[names.end]! && isDisplayInnerSnapDigit) {\n                const pos = guideline.pos;\n                const elementRect1 = { element, rect: { ...rect, [names.end]: rect[names.start]! } };\n                const elementRect2 = { element, rect: { ...rect, [names.start]: rect[names.end]! } };\n                const nextPos1 = [0, 0];\n                const nextPos2 = [0, 0];\n                nextPos1[index] = pos[index];\n                nextPos1[otherIndex] = pos[otherIndex];\n\n                nextPos2[index] = pos[index];\n                nextPos2[otherIndex] = pos[otherIndex] + guideline.size;\n\n\n                start.push({\n                    type,\n                    pos: nextPos1,\n                    size: 0,\n                    elementRect: elementRect1,\n                    direction: \"\",\n                    elementDirection: \"end\",\n                });\n                end.push({\n                    type,\n                    pos: nextPos2,\n                    size: 0,\n                    elementRect: elementRect2,\n                    direction: \"\",\n                    elementDirection: \"start\",\n                });\n                // inner.push(guideline);\n            }\n        });\n\n        start.sort((a, b) => {\n            return b.pos[otherIndex] - a.pos[otherIndex];\n        });\n        end.sort((a, b) => {\n            return a.pos[otherIndex] - b.pos[otherIndex];\n        });\n        return {\n            total: nextGuidelines,\n            start,\n            end,\n            inner,\n        };\n    });\n}\nexport function renderDashedGuidelines(\n    moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n    guidelines: SnapGuideline[],\n    targetPos: number[],\n    targetRect: SnapDirectionPoses,\n    React: Renderer,\n): any[] {\n    const {\n        isDisplayInnerSnapDigit,\n    } = moveable.props;\n    const rendered: any[] = [];\n\n    ([\"vertical\", \"horizontal\"] as const).forEach(type => {\n        const nextGuidelines = guidelines.filter(guideline => guideline.type === type);\n        const index = type === \"vertical\" ? 1 : 0;\n        const otherIndex = index ? 0 : 1;\n\n        const groups = groupByElementGuidelines(type, nextGuidelines, targetRect, isDisplayInnerSnapDigit!);\n        const mainNames = index ? HORIZONTAL_NAMES_MAP : VERTICAL_NAMES_MAP;\n        const sideNames = index ? VERTICAL_NAMES_MAP : HORIZONTAL_NAMES_MAP;\n        const targetStart = targetRect[mainNames.start]!;\n        const targetEnd = targetRect[mainNames.end]!;\n\n        groups.forEach(({ total, start, end, inner }) => {\n            const sidePos = targetPos[otherIndex] + total[0].pos[otherIndex] - targetRect[sideNames.start]!;\n\n            let prevRect = targetRect;\n\n            start.forEach(guideline => {\n                const nextRect = guideline.elementRect!.rect;\n                const size = prevRect[mainNames.start]! - nextRect[mainNames.end]!;\n\n                if (size > 0) {\n                    const renderPos = [0, 0];\n\n                    renderPos[index] = targetPos[index] + prevRect[mainNames.start]! - targetStart - size;\n                    renderPos[otherIndex] = sidePos;\n\n                    rendered.push(renderDigitLine(\n                        moveable,\n                        type,\n                        \"dashed\",\n                        rendered.length,\n                        size,\n                        renderPos,\n                        guideline.className,\n                        React\n                    ));\n                }\n                prevRect = nextRect;\n            });\n\n            prevRect = targetRect;\n            end.forEach(guideline => {\n                const nextRect = guideline.elementRect!.rect;\n                const size = nextRect[mainNames.start]! - prevRect[mainNames.end]!;\n\n                if (size > 0) {\n                    const renderPos = [0, 0];\n\n                    renderPos[index] = targetPos[index] + prevRect[mainNames.end]! - targetStart;\n                    renderPos[otherIndex] = sidePos;\n\n                    rendered.push(renderDigitLine(\n                        moveable,\n                        type,\n                        \"dashed\",\n                        rendered.length,\n                        size,\n                        renderPos,\n                        guideline.className,\n                        React\n                    ));\n                }\n                prevRect = nextRect;\n            });\n\n            inner.forEach(guideline => {\n                const nextRect = guideline.elementRect!.rect;\n\n                const size1 = targetStart - nextRect[mainNames.start]!;\n                const size2 = nextRect[mainNames.end]! - targetEnd;\n                const renderPos1 = [0, 0];\n                const renderPos2 = [0, 0];\n\n                renderPos1[index] = targetPos[index] - size1;\n                renderPos1[otherIndex] = sidePos;\n\n                renderPos2[index] = targetPos[index] + targetEnd - targetStart;\n                renderPos2[otherIndex] = sidePos;\n\n                rendered.push(renderDigitLine(\n                    moveable,\n                    type,\n                    \"dashed\",\n                    rendered.length,\n                    size1,\n                    renderPos1,\n                    guideline.className,\n                    React\n                ));\n                rendered.push(renderDigitLine(\n                    moveable,\n                    type,\n                    \"dashed\",\n                    rendered.length,\n                    size2,\n                    renderPos2,\n                    guideline.className,\n                    React\n                ));\n            });\n        });\n    });\n    return rendered;\n}\nexport function renderGapGuidelines(\n    moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n    guidelines: SnapGuideline[],\n    targetPos: number[],\n    targetRect: SnapDirectionPoses,\n    React: any\n): any[] {\n    const rendered: any[] = [];\n    ([\"horizontal\", \"vertical\"] as const).forEach(type => {\n        const nextGuidelines = guidelines.filter(guideline => guideline.type === type).slice(0, 1);\n        const index = type === \"vertical\" ? 0 : 1;\n        const otherIndex = index ? 0 : 1;\n        const mainNames = index ? HORIZONTAL_NAMES_MAP : VERTICAL_NAMES_MAP;\n        const sideNames = index ? VERTICAL_NAMES_MAP : HORIZONTAL_NAMES_MAP;\n        const targetStart = targetRect[mainNames.start]!;\n        const targetEnd = targetRect[mainNames.end]!;\n        const targetSideStart = targetRect[sideNames.start]!;\n        const targetSideEnd = targetRect[sideNames.end]!;\n\n\n        nextGuidelines.forEach(({ gap, gapRects }) => {\n            const sideStartPos = Math.max(\n                targetSideStart,\n                ...gapRects!.map(({ rect }) => rect[sideNames.start]!),\n            );\n            const sideEndPos = Math.min(\n                targetSideEnd,\n                ...gapRects!.map(({ rect }) => rect[sideNames.end]!),\n            );\n            const sideCenterPos = (sideStartPos + sideEndPos) / 2;\n\n            if (sideStartPos === sideEndPos || sideCenterPos === (targetSideStart + targetSideEnd)/ 2) {\n                return;\n            }\n            gapRects!.forEach(({ rect, className }) => {\n                const renderPos = [targetPos[0], targetPos[1]];\n\n                if (rect[mainNames.end]! < targetStart) {\n                    renderPos[index] += rect[mainNames.end]! - targetStart;\n                } else if (targetEnd < rect[mainNames.start]!) {\n                    renderPos[index] += rect[mainNames.start]! - targetStart - gap!;\n                } else {\n                    return;\n                }\n\n                renderPos[otherIndex] += sideCenterPos - targetSideStart;\n                rendered.push(renderDigitLine(\n                    moveable,\n                    index ? \"vertical\" : \"horizontal\",\n                    \"gap\",\n                    rendered.length,\n                    gap!,\n                    renderPos,\n                    className,\n                    React\n                ));\n            });\n        });\n    });\n    return rendered;\n}\n", "import { convertUnitSize, dot, flat, isNumber, isObject, throttle } from \"@daybrush/utils\";\nimport { diff } from \"@egjs/children-differ\";\nimport {\n    MoveableManagerInterface, SnappableProps,\n    SnappableState, SnapGuideline, SnapDirectionPoses,\n    PosGuideline, ElementGuidelineValue,\n    SnapElementRect,\n    NumericPosGuideline,\n} from \"../../types\";\nimport { getRect, getAbsolutePosesByState, getRefTarget, calculateInversePosition, prefix, abs } from \"../../utils\";\nimport {\n    splitSnapDirectionPoses, getSnapDirections,\n    HORIZONTAL_NAMES_MAP, VERTICAL_NAMES_MAP, calculateContainerPos, SNAP_SKIP_NAMES_MAP,\n} from \"./utils\";\n\nexport function getTotalGuidelines(\n    moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n) {\n    const state = moveable.state;\n    const {\n        containerClientRect,\n        hasFixed,\n    } = state;\n    const {\n        overflow,\n        scrollHeight: containerHeight,\n        scrollWidth: containerWidth,\n        clientHeight: containerClientHeight,\n        clientWidth: containerClientWidth,\n        clientLeft,\n        clientTop,\n    } = containerClientRect;\n    const {\n        snapGap = true,\n        verticalGuidelines,\n        horizontalGuidelines,\n        snapThreshold = 5,\n        maxSnapElementGuidelineDistance = Infinity,\n        isDisplayGridGuidelines,\n    } = moveable.props;\n    const { top, left, bottom, right } = getRect(getAbsolutePosesByState(moveable.state));\n    const targetRect = { top, left, bottom, right, center: (left + right) / 2, middle: (top + bottom) / 2 };\n    const elementGuidelines = getElementGuidelines(moveable);\n    let totalGuidelines: SnapGuideline[] = [...elementGuidelines];\n\n    const snapThresholdMultiples = (state.snapThresholdInfo?.multiples ?? [1, 1]).map(n => n * snapThreshold);\n\n    if (snapGap) {\n        totalGuidelines.push(...getGapGuidelines(\n            moveable,\n            targetRect,\n            snapThresholdMultiples,\n        ));\n    }\n    const snapOffset = {\n        ...(state.snapOffset || {\n            left: 0,\n            top: 0,\n            bottom: 0,\n            right: 0,\n        }),\n    };\n\n    totalGuidelines.push(...getGridGuidelines(\n        moveable,\n        overflow ? containerWidth! : containerClientWidth!,\n        overflow ? containerHeight! : containerClientHeight!,\n        clientLeft,\n        clientTop,\n        snapOffset,\n        isDisplayGridGuidelines,\n    ));\n\n\n    if (hasFixed) {\n        const { left, top } = containerClientRect;\n\n        snapOffset.left += left;\n        snapOffset.top += top;\n        snapOffset.right += left;\n        snapOffset.bottom += top;\n    }\n\n    totalGuidelines.push(...getDefaultGuidelines(\n        horizontalGuidelines || false,\n        verticalGuidelines || false,\n        overflow ? containerWidth! : containerClientWidth!,\n        overflow ? containerHeight! : containerClientHeight!,\n        clientLeft,\n        clientTop,\n        snapOffset,\n    ));\n\n    totalGuidelines = totalGuidelines.filter(({ element, elementRect, type }) => {\n        if (!element || !elementRect) {\n            return true;\n        }\n        const rect = elementRect.rect;\n\n        return checkBetweenRects(targetRect, rect, type, maxSnapElementGuidelineDistance);\n    });\n\n    return totalGuidelines;\n}\n\nexport function getGapGuidelines(\n    moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n    targetRect: SnapDirectionPoses,\n    snapThresholds: number[],\n) {\n    const {\n        maxSnapElementGuidelineDistance = Infinity,\n        maxSnapElementGapDistance = Infinity,\n    } = moveable.props;\n    const elementRects = moveable.state.elementRects;\n    const gapGuidelines: SnapGuideline[] = [];\n    [\n        [\"vertical\", VERTICAL_NAMES_MAP, HORIZONTAL_NAMES_MAP] as const,\n        [\"horizontal\", HORIZONTAL_NAMES_MAP, VERTICAL_NAMES_MAP] as const,\n    ].forEach(([type, mainNames, sideNames]) => {\n        const targetStart = targetRect[mainNames.start]!;\n        const targetEnd = targetRect[mainNames.end]!;\n        const targetCenter = targetRect[mainNames.center]!;\n        const targetStart2 = targetRect[sideNames.start]!;\n        const targetEnd2 = targetRect[sideNames.end]!;\n\n        // element : moveable\n        const snapThresholdMap = {\n            left: snapThresholds[0],\n            top: snapThresholds[1],\n        };\n\n        function getDist(elementRect: SnapElementRect) {\n            const rect = elementRect.rect;\n            const snapThreshold = snapThresholdMap[mainNames.start];\n\n            if (rect[mainNames.end]! < targetStart + snapThreshold) {\n                return targetStart - rect[mainNames.end]!;\n            } else if (targetEnd - snapThreshold < rect[mainNames.start]!) {\n                return rect[mainNames.start]! - targetEnd;\n            } else {\n                return -1;\n            }\n        }\n        const nextElementRects = elementRects.filter(elementRect => {\n            const rect = elementRect.rect;\n\n            if (rect[sideNames.start]! > targetEnd2 || rect[sideNames.end]! < targetStart2) {\n                return false;\n            }\n\n            return getDist(elementRect) > 0;\n        }).sort((a, b) => {\n            return getDist(a) - getDist(b);\n        });\n\n        const groups: SnapElementRect[][] = [];\n\n        nextElementRects.forEach(snapRect1 => {\n            nextElementRects.forEach(snapRect2 => {\n                if (snapRect1 === snapRect2) {\n                    return;\n                }\n                const { rect: rect1 } = snapRect1;\n                const { rect: rect2 } = snapRect2;\n\n                const rect1Start = rect1[sideNames.start]!;\n                const rect1End = rect1[sideNames.end]!;\n                const rect2Start = rect2[sideNames.start]!;\n                const rect2End = rect2[sideNames.end]!;\n\n                if (rect1Start > rect2End || rect2Start > rect1End) {\n                    return;\n                }\n\n                groups.push([snapRect1, snapRect2]);\n            });\n        });\n\n        groups.forEach(([snapRect1, snapRect2]) => {\n            const { rect: rect1 } = snapRect1;\n            const { rect: rect2 } = snapRect2;\n\n            const rect1Start = rect1[mainNames.start]!;\n            const rect1End = rect1[mainNames.end]!;\n            const rect2Start = rect2[mainNames.start]!;\n            const rect2End = rect2[mainNames.end]!;\n            const snapThreshold = snapThresholdMap[mainNames.start];\n            let gap = 0;\n            let pos = 0;\n            let isStart = false;\n            let isCenter = false;\n            let isEnd = false;\n\n            if (rect1End <= targetStart && targetEnd <= rect2Start) {\n                // (l)element1(r) : (l)target(r) : (l)element2(r)\n                isCenter = true;\n                gap = ((rect2Start - rect1End) - (targetEnd - targetStart)) / 2;\n                pos = rect1End + gap + (targetEnd - targetStart) / 2;\n\n                if (abs(pos - targetCenter) > snapThreshold) {\n                    return;\n                }\n            } else if (rect1End < rect2Start && rect2End < targetStart + snapThreshold) {\n                // (l)element1(r) : (l)element2(r) : (l)target\n                isStart = true;\n\n                gap = rect2Start - rect1End;\n                pos = rect2End + gap;\n\n                if (abs(pos - targetStart) > snapThreshold) {\n                    return;\n                }\n            } else if (rect1End < rect2Start && targetEnd - snapThreshold < rect1Start) {\n                // target(r) : (l)element1(r) : (l)element2(r)\n\n                isEnd = true;\n                gap = rect2Start - rect1End;\n                pos = rect1Start - gap;\n\n                if (abs(pos - targetEnd) > snapThreshold) {\n                    return;\n                }\n            } else {\n                return;\n            }\n            if (!gap) {\n                return;\n            }\n            if (!checkBetweenRects(targetRect, rect2, type, maxSnapElementGuidelineDistance)) {\n                return;\n            }\n            if (gap > maxSnapElementGapDistance) {\n                return;\n            }\n            gapGuidelines.push({\n                type,\n                pos: type === \"vertical\" ? [pos, 0] : [0, pos],\n                element: snapRect2.element,\n                size: 0,\n                className: snapRect2.className,\n                isStart,\n                isCenter,\n                isEnd,\n                gap,\n                hide: true,\n                gapRects: [snapRect1, snapRect2],\n                direction: \"\",\n                elementDirection: \"\",\n            });\n        });\n    });\n    return gapGuidelines;\n}\nexport function startGridGroupGuidelines(\n    moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n    clientLeft: number,\n    clientTop: number,\n    snapOffset: { left: number, top: number, right: number, bottom: number },\n) {\n    const props = moveable.props;\n    const state = moveable.state;\n    const {\n        snapGridAll,\n    } = props;\n    const {\n        snapGridWidth = 0,\n        snapGridHeight = 0,\n    } = props;\n    const {\n        snapRenderInfo,\n    } = state;\n    const hasDirection = snapRenderInfo && (snapRenderInfo.direction?.[0] || snapRenderInfo.direction?.[1]);\n    const moveables = moveable.moveables;\n    const ignores = [false, false];\n\n    // snap group's all child to grid.\n    if (\n        snapGridAll\n        && moveables\n        && hasDirection\n        && (snapGridWidth || snapGridHeight)\n    ) {\n        if (state.snapThresholdInfo) {\n            return;\n        }\n        state.snapThresholdInfo = {\n            multiples: [1, 1],\n            offset: [0, 0],\n        };\n\n        const rect = moveable.getRect();\n        const children = rect.children;\n        const direction = snapRenderInfo.direction!;\n\n\n        if (children) {\n            const result = direction.map((dir, i) => {\n                const {\n                    snapSize,\n                    posName,\n                    sizeName,\n                    clientOffset,\n                } = i === 0 ? {\n                    snapSize: snapGridWidth,\n                    posName: \"left\",\n                    sizeName: \"width\",\n                    clientOffset: snapOffset.left - clientLeft,\n                } as const : {\n                    snapSize: snapGridHeight,\n                    posName: \"top\",\n                    sizeName: \"height\",\n                    clientOffset: snapOffset.top - clientTop,\n                } as const;\n\n                if (!snapSize) {\n                    return {\n                        dir,\n                        multiple: 1,\n                        snapSize,\n                        snapOffset: 0,\n                    };\n                }\n                const rectSize = rect[sizeName];\n                const rectPos = rect[posName];\n\n                // 사이즈보다 만약 작다면 어떻게 해야되죠?\n                const childSizes = flat(children.map(child => {\n                    return [\n                        (child[posName] - rectPos),\n                        (child[sizeName]),\n                        (rectSize - child[sizeName] - child[posName] + rectPos),\n                    ];\n                })).filter(v => v).sort((a, b) => {\n                    return a - b;\n                });\n\n                const firstChildSize = childSizes[0];\n                const childSnapSizes = childSizes.map(size => throttle(size / firstChildSize, 0.1) * snapSize);\n                let n = 1;\n\n                const rectRatio = throttle(rectSize / firstChildSize, 0.1);\n\n                for (n = 1; n <= 10; ++n) {\n                    if (childSnapSizes.every(childSize => {\n                        return childSize * n % 1 === 0;\n                    })) {\n                        break;\n                    }\n                }\n\n                // dir 1 (fixed -1)\n                // dir 0 (fixed 0)\n                // dir -1 (fixed 1)\n\n                const ratio = (-dir + 1) / 2;\n                const offsetPos = dot(\n                    rectPos - clientOffset,\n                    rectPos - clientOffset + rectSize,\n                    ratio, 1 - ratio,\n                );\n\n                return {\n                    multiple: rectRatio * n,\n                    dir,\n                    snapSize,\n                    snapOffset: Math.round(offsetPos / snapSize),\n                };\n            });\n\n            const multiples = result.map(r => r.multiple || 1);\n            state.snapThresholdInfo.multiples = multiples;\n            state.snapThresholdInfo.offset = result.map(r => r.snapOffset);\n\n            result.forEach((r, i) => {\n                if (r.snapSize) {\n                    ignores[i] = true;\n                }\n            });\n        }\n    } else {\n        state.snapThresholdInfo = null;\n    }\n}\n\n\nexport function getGridGuidelines(\n    moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n    containerWidth: number,\n    containerHeight: number,\n    clientLeft = 0,\n    clientTop = 0,\n    snapOffset: { left: number, top: number, right: number, bottom: number },\n    isDisplayGridGuidelines?: boolean,\n): SnapGuideline[] {\n    const props = moveable.props;\n    const state = moveable.state;\n    let {\n        snapGridWidth = 0,\n        snapGridHeight = 0,\n    } = props;\n    const guidelines: SnapGuideline[] = [];\n    const {\n        left: snapOffsetLeft,\n        top: snapOffsetTop,\n    } = snapOffset;\n    let startOffset = [0, 0];\n\n    startGridGroupGuidelines(\n        moveable,\n        clientLeft,\n        clientTop,\n        snapOffset,\n    );\n\n    const snapThresholdInfo = state.snapThresholdInfo;\n    const defaultSnapGridWidth = snapGridWidth;\n    const defaultSnapGridHeight = snapGridHeight;\n\n    if (snapThresholdInfo) {\n        snapGridWidth *= snapThresholdInfo.multiples[0] || 1;\n        snapGridHeight *= snapThresholdInfo.multiples[1] || 1;\n        startOffset = snapThresholdInfo.offset;\n    }\n\n    if (snapGridHeight) {\n        const pushGuideline = (pos: number) => {\n            guidelines.push({\n                type: \"horizontal\",\n                pos: [\n                    snapOffsetLeft,\n                    throttle(startOffset[1] * defaultSnapGridHeight + pos - clientTop + snapOffsetTop, 0.1),\n                ],\n                className: prefix(\"grid-guideline\"),\n                size: containerWidth!,\n                hide: !isDisplayGridGuidelines,\n                direction: \"\",\n                grid: true,\n            });\n        };\n        for (let pos = 0; pos <= containerHeight * 2; pos += snapGridHeight) {\n            pushGuideline(pos);\n        }\n        for (let pos = -snapGridHeight; pos >= -containerHeight; pos -= snapGridHeight) {\n            pushGuideline(pos);\n        }\n    }\n\n    if (snapGridWidth) {\n        const pushGuideline = (pos: number) => {\n            guidelines.push({\n                type: \"vertical\",\n                pos: [\n                    throttle(startOffset[0] * defaultSnapGridWidth + pos - clientLeft + snapOffsetLeft, 0.1),\n                    snapOffsetTop,\n                ],\n                className: prefix(\"grid-guideline\"),\n                size: containerHeight!,\n                hide: !isDisplayGridGuidelines,\n                direction: \"\",\n                grid: true,\n            });\n        };\n        for (let pos = 0; pos <= containerWidth * 2; pos += snapGridWidth) {\n            pushGuideline(pos);\n        }\n        for (let pos = -snapGridWidth; pos >= -containerWidth; pos -= snapGridWidth) {\n            pushGuideline(pos);\n        }\n    }\n\n    return guidelines;\n}\n\nexport function checkBetweenRects(\n    rect1: SnapDirectionPoses,\n    rect2: SnapDirectionPoses,\n    type: \"horizontal\" | \"vertical\",\n    distance: number,\n) {\n    if (type === \"horizontal\") {\n        return abs(rect1.right! - rect2.left!) <= distance\n            || abs(rect1.left! - rect2.right!) <= distance\n            || rect1.left! <= rect2.right! && rect2.left! <= rect1.right!;\n    } else if (type === \"vertical\") {\n        return abs(rect1.bottom! - rect2.top!) <= distance\n            || abs(rect1.top! - rect2.bottom!) <= distance\n            || rect1.top! <= rect2.bottom! && rect2.top! <= rect1.bottom!;\n    }\n    return true;\n}\n\n\nexport function getElementGuidelines(\n    moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n) {\n    const state = moveable.state;\n\n    const {\n        elementGuidelines = [],\n    } = moveable.props;\n\n    if (!elementGuidelines.length) {\n        state.elementRects = [];\n        return [];\n    }\n\n    const prevValues = (state.elementRects || []).filter(snapRect => !snapRect.refresh);\n    const nextElementGuidelines = elementGuidelines.map(el => {\n        if (isObject(el) && \"element\" in el) {\n            return {\n                ...el,\n                element: getRefTarget(el.element, true)!,\n            };\n        }\n        return {\n            element: getRefTarget(el, true)!,\n        };\n    }).filter(value => {\n        return value.element;\n    }) as ElementGuidelineValue[];\n\n    const {\n        maintained,\n        added,\n    } = diff(prevValues.map(v => v.element), nextElementGuidelines.map(v => v.element));\n\n\n    const nextValues: SnapElementRect[] = [];\n    maintained.forEach(([prevIndex, nextIndex]) => {\n        nextValues[nextIndex] = prevValues[prevIndex];\n    });\n\n    getSnapElementRects(moveable, added.map(index => nextElementGuidelines[index])).map((rect, i) => {\n        nextValues[added[i]] = rect;\n    });\n\n\n    state.elementRects = nextValues;\n    const elementSnapDirections = getSnapDirections(moveable.props.elementSnapDirections);\n    const nextGuidelines: SnapGuideline[] = [];\n\n    nextValues.forEach(snapRect => {\n        const {\n            element,\n            top: topValue = elementSnapDirections.top,\n            left: leftValue = elementSnapDirections.left,\n            right: rightValue = elementSnapDirections.right,\n            bottom: bottomValue = elementSnapDirections.bottom,\n            center: centerValue = elementSnapDirections.center,\n            middle: middleValue = elementSnapDirections.middle,\n            className,\n            rect,\n        } = snapRect;\n        const {\n            horizontal,\n            vertical,\n            horizontalNames,\n            verticalNames,\n        } = splitSnapDirectionPoses({\n            top: topValue,\n            right: rightValue,\n            left: leftValue,\n            bottom: bottomValue,\n            center: centerValue,\n            middle: middleValue,\n        }, rect);\n        const rectTop = rect.top!;\n        const rectLeft = rect.left!;\n        const width = rect.right! - rectLeft;\n        const height = rect.bottom! - rectTop;\n        const sizes = [width, height];\n\n        vertical.forEach((pos, i) => {\n            nextGuidelines.push({\n                type: \"vertical\", element, pos: [\n                    throttle(pos, 0.1),\n                    rectTop,\n                ], size: height,\n                sizes,\n                className,\n                elementRect: snapRect,\n                elementDirection: SNAP_SKIP_NAMES_MAP[verticalNames[i]] || verticalNames[i],\n                direction: \"\",\n            });\n        });\n        horizontal.forEach((pos, i) => {\n            nextGuidelines.push({\n                type: \"horizontal\",\n                element,\n                pos: [\n                    rectLeft,\n                    throttle(pos, 0.1),\n                ],\n                size: width,\n                sizes,\n                className,\n                elementRect: snapRect,\n                elementDirection: SNAP_SKIP_NAMES_MAP[horizontalNames[i]] || horizontalNames[i],\n                direction: \"\",\n            });\n        });\n    });\n\n    return nextGuidelines;\n}\n\n\nfunction getObjectGuidelines(\n    guidelines: Array<PosGuideline | number | string> | false,\n    containerSize: number,\n): NumericPosGuideline[] {\n    return guidelines ? guidelines.map(info => {\n        const posGuideline = isObject(info) ? info : { pos: info };\n        const pos = posGuideline.pos;\n\n        if (isNumber(pos)) {\n            return posGuideline as NumericPosGuideline;\n        } else {\n            return {\n                ...posGuideline,\n                pos: convertUnitSize(pos, containerSize),\n            };\n        }\n    }) : [];\n}\n\nexport function getDefaultGuidelines(\n    horizontalGuidelines: Array<PosGuideline | number | string> | false,\n    verticalGuidelines: Array<PosGuideline | number | string> | false,\n    width: number,\n    height: number,\n    clientLeft = 0,\n    clientTop = 0,\n    snapOffset = { left: 0, top: 0, right: 0, bottom: 0 },\n): SnapGuideline[] {\n    const guidelines: SnapGuideline[] = [];\n    const {\n        left: snapOffsetLeft,\n        top: snapOffsetTop,\n        bottom: snapOffsetBottom,\n        right: snapOffsetRight,\n    } = snapOffset;\n    const snapWidth = width! + snapOffsetRight - snapOffsetLeft;\n    const snapHeight = height! + snapOffsetBottom - snapOffsetTop;\n\n    getObjectGuidelines(horizontalGuidelines, snapHeight).forEach(posInfo => {\n        guidelines.push({\n            type: \"horizontal\",\n            pos: [\n                snapOffsetLeft,\n                throttle(posInfo.pos - clientTop + snapOffsetTop, 0.1),\n            ],\n            size: snapWidth,\n            className: posInfo.className,\n            direction: \"\",\n        });\n    });\n    getObjectGuidelines(verticalGuidelines, snapWidth).forEach(posInfo => {\n        guidelines.push({\n            type: \"vertical\",\n            pos: [\n                throttle(posInfo.pos - clientLeft + snapOffsetLeft, 0.1),\n                snapOffsetTop,\n            ],\n            size: snapHeight,\n            className: posInfo.className,\n            direction: \"\",\n        });\n    });\n    return guidelines;\n}\n\n\n\nexport function getSnapElementRects(\n    moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n    values: ElementGuidelineValue[],\n): SnapElementRect[] {\n    if (!values.length) {\n        return [];\n    }\n    const groupable = moveable.props.groupable;\n    const state = moveable.state;\n    const {\n        containerClientRect,\n        // targetClientRect: {\n        //     top: clientTop,\n        //     left: clientLeft,\n        // },\n        rootMatrix,\n        is3d,\n        offsetDelta,\n    } = state;\n    const n = is3d ? 4 : 3;\n    const [containerLeft, containerTop] = calculateContainerPos(rootMatrix, containerClientRect, n);\n    // const poses = getAbsolutePosesByState(state);\n    // const {\n    //     minX: targetLeft,\n    //     minY: targetTop,\n    // } = getMinMaxs(poses);\n    // const [distLeft, distTop] = minus([targetLeft, targetTop], calculateInversePosition(rootMatrix, [\n    //     clientLeft - containerLeft,\n    //     clientTop - containerTop,\n    // ], n)).map(pos => roundSign(pos));\n\n    const offsetLeft = groupable ? 0 : offsetDelta[0];\n    const offsetTop = groupable ? 0 : offsetDelta[1];\n\n    return values.map(value => {\n        const rect = value.element.getBoundingClientRect();\n        const left = rect.left - containerLeft - offsetLeft;\n        const top = rect.top - containerTop - offsetTop;\n        const bottom = top + rect.height;\n        const right = left + rect.width;\n        const [elementLeft, elementTop] = calculateInversePosition(rootMatrix, [left, top], n);\n        const [elementRight, elementBottom] = calculateInversePosition(rootMatrix, [right, bottom], n);\n\n        return {\n            ...value,\n            rect: {\n                left: elementLeft,\n                right: elementRight,\n                top: elementTop,\n                bottom: elementBottom,\n                center: (elementLeft + elementRight) / 2,\n                middle: (elementTop + elementBottom) / 2,\n            },\n        };\n    });\n}\n\n", "import {\n    Renderer,\n    SnappableProps,\n    SnappableState,\n    SnapGuideline,\n    ScalableProps,\n    SnapPosInfo,\n    RotatableProps,\n    RectInfo,\n    MoveableManagerInterface,\n    SnappableRenderType,\n    BoundType,\n    MoveableGroupInterface,\n    SnapDirectionInfo,\n} from \"../types\";\nimport {\n    prefix,\n    calculatePoses,\n    getRect,\n    getAbsolutePosesByState,\n    getAbsolutePoses,\n    getClientRect,\n    getRefTarget,\n    getDragDistByState,\n    triggerEvent,\n    getDirectionCondition,\n    abs,\n    watchValue,\n} from \"../utils\";\nimport {\n    find,\n    findIndex, hasClass, throttle,\n} from \"@daybrush/utils\";\nimport {\n    getDragDist,\n    scaleMatrix,\n    getPosByDirection,\n} from \"../gesto/GestoUtils\";\nimport { minus, rotate, plus } from \"@scena/matrix\";\nimport { dragControlCondition as rotatableDragControlCondtion } from \"./Rotatable\";\nimport { FLOAT_POINT_NUM } from \"../consts\";\nimport {\n    getInnerBoundInfo,\n    getCheckInnerBoundLineInfos,\n    checkRotateInnerBounds,\n    checkInnerBoundPoses,\n} from \"./snappable/innerBounds\";\nimport {\n    checkBoundPoses,\n    checkRotateBounds,\n    getBounds,\n} from \"./snappable/bounds\";\nimport {\n    checkSnaps,\n    getSnapInfosByDirection,\n    getNearOffsetInfo,\n    getCheckSnapDirections,\n} from \"./snappable/snap\";\nimport {\n    renderSnapPoses,\n    renderGuidelines,\n    renderDashedGuidelines,\n    renderGapGuidelines,\n} from \"./snappable/render\";\nimport {\n    getInitialBounds,\n    hasGuidelines,\n} from \"./snappable/utils\";\nimport {\n    checkMaxBounds,\n    checkMoveableSnapBounds,\n    getSnapBoundInfo,\n} from \"./snappable/snapBounds\";\nimport { getTotalGuidelines } from \"./snappable/getTotalGuidelines\";\n\n\nexport interface SnapPoses {\n    vertical: number[];\n    horizontal: number[];\n}\n\nexport function checkSnapInfo(\n    moveable: MoveableManagerInterface<SnappableProps, SnappableState>\n) {\n    const state = moveable.state;\n    const container = state.container;\n    const snapContainer = moveable.props.snapContainer || container!;\n\n    if (state.snapContainer === snapContainer && state.guidelines && state.guidelines.length) {\n        return false;\n    }\n\n    const containerClientRect = state.containerClientRect;\n    const snapOffset = {\n        left: 0,\n        top: 0,\n        bottom: 0,\n        right: 0,\n    };\n\n    if (container !== snapContainer) {\n        const snapContainerTarget = getRefTarget(snapContainer, true);\n\n        if (snapContainerTarget) {\n            const snapContainerRect = getClientRect(snapContainerTarget);\n            const offset1 = getDragDistByState(state, [\n                snapContainerRect.left - containerClientRect.left,\n                snapContainerRect.top - containerClientRect.top,\n            ]);\n            const offset2 = getDragDistByState(state, [\n                snapContainerRect.right - containerClientRect.right,\n                snapContainerRect.bottom - containerClientRect.bottom,\n            ]);\n\n            snapOffset.left = throttle(offset1[0], 0.00001);\n            snapOffset.top = throttle(offset1[1], 0.00001);\n            snapOffset.right = throttle(offset2[0], 0.00001);\n            snapOffset.bottom = throttle(offset2[1], 0.00001);\n        }\n    }\n\n    state.snapContainer = snapContainer;\n    state.snapOffset = snapOffset;\n    state.guidelines = getTotalGuidelines(moveable);\n    state.enableSnap = true;\n    return true;\n}\n\nfunction getNextFixedPoses(\n    matrix: number[],\n    width: number,\n    height: number,\n    fixedDirection: number[],\n    fixedPos: number[],\n    is3d: boolean\n) {\n    const nextPoses = calculatePoses(matrix, width, height, is3d ? 4 : 3);\n    const nextFixedPos = getPosByDirection(nextPoses, fixedDirection);\n\n    return getAbsolutePoses(nextPoses, minus(fixedPos, nextFixedPos));\n}\n\nexport function normalized(value: number) {\n    return value ? value / abs(value) : 0;\n}\n\nexport function getSizeOffsetInfo(\n    moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n    poses: number[][],\n    direction: number[],\n    keepRatio: boolean,\n    isRequest: boolean,\n    datas: any\n) {\n    const { fixedDirection } = datas;\n    const directions = getCheckSnapDirections(direction, fixedDirection, keepRatio);\n    const innerBoundLineInfos = getCheckInnerBoundLineInfos(moveable, poses, direction, keepRatio);\n    const offsets = [\n        ...getSnapBoundInfo(\n            moveable,\n            poses,\n            directions,\n            keepRatio,\n            isRequest,\n            datas\n        ),\n        ...getInnerBoundInfo(\n            moveable,\n            innerBoundLineInfos,\n            datas\n        ),\n    ];\n    const widthOffsetInfo = getNearOffsetInfo(offsets, 0);\n    const heightOffsetInfo = getNearOffsetInfo(offsets, 1);\n\n    return {\n        width: {\n            isBound: widthOffsetInfo.isBound,\n            offset: widthOffsetInfo.offset[0],\n        },\n        height: {\n            isBound: heightOffsetInfo.isBound,\n            offset: heightOffsetInfo.offset[1],\n        },\n    };\n}\n\nexport function recheckSizeByTwoDirection(\n    moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n    poses: number[][],\n    width: number,\n    height: number,\n    maxWidth: number,\n    maxHeight: number,\n    direction: number[],\n    isRequest: boolean,\n    datas: any\n) {\n    const snapPos = getPosByDirection(poses, direction);\n\n    const {\n        horizontal: { offset: horizontalOffset },\n        vertical: { offset: verticalOffset },\n    } = checkMoveableSnapBounds(moveable, isRequest, {\n        vertical: [snapPos[0]],\n        horizontal: [snapPos[1]],\n    });\n\n    if (throttle(verticalOffset, FLOAT_POINT_NUM) || throttle(horizontalOffset, FLOAT_POINT_NUM)) {\n        const [nextWidthOffset, nextHeightOffset] = getDragDist({\n            datas,\n            distX: -verticalOffset,\n            distY: -horizontalOffset,\n        });\n        const nextWidth = Math.min(\n            maxWidth || Infinity,\n            width + direction[0] * nextWidthOffset\n        );\n        const nextHeight = Math.min(\n            maxHeight || Infinity,\n            height + direction[1] * nextHeightOffset\n        );\n\n        return [nextWidth - width, nextHeight - height];\n    }\n    return [0, 0];\n}\n\nexport function checkSizeDist(\n    moveable: MoveableManagerInterface<any, any>,\n    getNextPoses: (widthOffset: number, heightOffset: number) => number[][],\n    width: number,\n    height: number,\n    direction: number[],\n    fixedPosition: number[],\n    isRequest: boolean,\n    datas: any\n) {\n    const poses = getAbsolutePosesByState(moveable.state);\n    const keepRatio = moveable.props.keepRatio;\n\n    let widthOffset = 0;\n    let heightOffset = 0;\n\n    for (let i = 0; i < 2; ++i) {\n        const nextPoses = getNextPoses(widthOffset, heightOffset);\n        const {\n            width: widthOffsetInfo,\n            height: heightOffsetInfo,\n        } = getSizeOffsetInfo(\n            moveable,\n            nextPoses,\n            direction,\n            keepRatio,\n            isRequest,\n            datas\n        );\n\n        const isWidthBound = widthOffsetInfo.isBound;\n        const isHeightBound = heightOffsetInfo.isBound;\n        let nextWidthOffset = widthOffsetInfo.offset;\n        let nextHeightOffset = heightOffsetInfo.offset;\n\n\n        if (i === 1) {\n            if (!isWidthBound) {\n                nextWidthOffset = 0;\n            }\n            if (!isHeightBound) {\n                nextHeightOffset = 0;\n            }\n        }\n        if (i === 0 && isRequest && !isWidthBound && !isHeightBound) {\n            return [0, 0];\n        }\n        if (keepRatio) {\n            const widthDist =\n                abs(nextWidthOffset) * (width ? 1 / width : 1);\n            const heightDist =\n                abs(nextHeightOffset) * (height ? 1 / height : 1);\n            const isGetWidthOffset =\n                isWidthBound && isHeightBound\n                    ? widthDist < heightDist\n                    : isHeightBound ||\n                    (!isWidthBound && widthDist < heightDist);\n            if (isGetWidthOffset) {\n                // width : height = ? : heightOffset\n                nextWidthOffset = (width * nextHeightOffset) / height;\n            } else {\n                // width : height = widthOffset : ?\n                nextHeightOffset = (height * nextWidthOffset) / width;\n            }\n        }\n        widthOffset += nextWidthOffset;\n        heightOffset += nextHeightOffset;\n    }\n\n    if (!keepRatio && direction[0] && direction[1]) {\n        const { maxWidth, maxHeight } = checkMaxBounds(\n            moveable,\n            poses,\n            direction,\n            fixedPosition,\n            datas\n        );\n\n        const [nextWidthOffset, nextHeightOffset] = recheckSizeByTwoDirection(\n            moveable,\n            getNextPoses(widthOffset, heightOffset).map(pos => pos.map(p => throttle(p, FLOAT_POINT_NUM))),\n            width + widthOffset,\n            height + heightOffset,\n            maxWidth,\n            maxHeight,\n            direction,\n            isRequest,\n            datas\n        );\n\n        widthOffset += nextWidthOffset;\n        heightOffset += nextHeightOffset;\n    }\n\n    return [widthOffset, heightOffset];\n}\n\nexport function absDegree(deg: number) {\n    if (deg < 0) {\n        deg = deg % 360 + 360;\n    }\n    deg %= 360;\n    return deg;\n}\n\nexport function bumpDegree(baseDeg: number, snapDeg: number) {\n    // baseDeg -80\n    // snapDeg 270\n    // return -90\n    snapDeg = absDegree(snapDeg);\n\n    const count = Math.floor(baseDeg / 360);\n\n\n    const deg1 = count * 360 + 360 - snapDeg;\n    const deg2 = count * 360 + snapDeg;\n\n    return abs(baseDeg - deg1) < abs(baseDeg - deg2) ? deg1 : deg2;\n}\n\nexport function getMinDegreeDistance(deg1: number, deg2: number) {\n    deg1 = absDegree(deg1);\n    deg2 = absDegree(deg2);\n\n    const deg3 = absDegree(deg1 - deg2);\n\n    return Math.min(deg3, 360 - deg3);\n}\n\nexport function checkSnapRotate(\n    moveable: MoveableManagerInterface<SnappableProps & RotatableProps, any>,\n    rect: RectInfo,\n    dist: number,\n    rotation: number,\n) {\n    const props = moveable.props;\n    const snapRotationThreshold = props[NAME_snapRotationThreshold] ?? 5;\n    const snapRotationDegrees = props[NAME_snapRotationDegrees];\n\n    if (hasGuidelines(moveable, \"rotatable\")) {\n        const { pos1, pos2, pos3, pos4, origin: origin2 } = rect;\n        const rad = (dist * Math.PI) / 180;\n        const prevPoses = [pos1, pos2, pos3, pos4].map((pos) => minus(pos, origin2));\n        const nextPoses = prevPoses.map((pos) => rotate(pos, rad));\n\n        // console.log(moveable.state.left, moveable.state.top, moveable.state.origin);\n        // console.log(pos1, pos2, pos3, pos4, origin, rad, prevPoses, nextPoses);\n        const result = [\n            ...checkRotateBounds(moveable, prevPoses, nextPoses, origin2, dist),\n            ...checkRotateInnerBounds(\n                moveable,\n                prevPoses,\n                nextPoses,\n                origin2,\n                dist\n            ),\n        ];\n        result.sort((a, b) => abs(a - dist) - abs(b - dist));\n        const isSnap = result.length > 0;\n\n        if (isSnap) {\n            return {\n                isSnap,\n                dist: isSnap ? result[0] : dist,\n            };\n        }\n    }\n    if (snapRotationDegrees?.length && snapRotationThreshold) {\n\n\n        const sorted = snapRotationDegrees.slice().sort((a, b) => {\n            return getMinDegreeDistance(a, rotation) - getMinDegreeDistance(b, rotation);\n        });\n        const firstDegree = sorted[0];\n\n        if (getMinDegreeDistance(firstDegree, rotation) <= snapRotationThreshold) {\n\n            return {\n                isSnap: true,\n                dist: dist + bumpDegree(rotation, firstDegree) - rotation,\n            };\n        }\n    }\n    return {\n        isSnap: false,\n        dist,\n    };\n\n}\n\nexport function checkSnapResize(\n    moveable: MoveableManagerInterface<{}, {}>,\n    width: number,\n    height: number,\n    direction: number[],\n    fixedPosition: number[],\n    isRequest: boolean,\n    datas: any\n) {\n    if (!hasGuidelines(moveable, \"resizable\")) {\n        return [0, 0];\n    }\n    const { fixedDirection, nextAllMatrix } = datas;\n    const { allMatrix, is3d } = moveable.state;\n\n    return checkSizeDist(\n        moveable,\n        (widthOffset: number, heightOffset: number) => {\n            return getNextFixedPoses(\n                nextAllMatrix || allMatrix,\n                width + widthOffset,\n                height + heightOffset,\n                fixedDirection,\n                fixedPosition,\n                is3d\n            );\n        },\n        width,\n        height,\n        direction,\n        fixedPosition,\n        isRequest,\n        datas\n    );\n}\nexport function checkSnapScale(\n    moveable: MoveableManagerInterface<ScalableProps, any>,\n    scale: number[],\n    direction: number[],\n    isRequest: boolean,\n    datas: any\n) {\n    if (!hasGuidelines(moveable, \"scalable\")) {\n        return [0, 0];\n    }\n    const { startOffsetWidth, startOffsetHeight, fixedPosition, fixedDirection, is3d } = datas;\n    const sizeDist = checkSizeDist(\n        moveable,\n        (widthOffset: number, heightOffset: number) => {\n            return getNextFixedPoses(\n                scaleMatrix(\n                    datas,\n                    plus(scale, [widthOffset / startOffsetWidth, heightOffset / startOffsetHeight]),\n                ),\n                startOffsetWidth,\n                startOffsetHeight,\n                fixedDirection,\n                fixedPosition,\n                is3d\n            );\n        },\n        startOffsetWidth,\n        startOffsetHeight,\n        direction,\n        fixedPosition,\n        isRequest,\n        datas\n    );\n    return [sizeDist[0] / startOffsetWidth, sizeDist[1] / startOffsetHeight];\n}\n\nexport function startCheckSnapDrag(\n    moveable: MoveableManagerInterface<any, any>,\n    datas: any\n) {\n    datas.absolutePoses = getAbsolutePosesByState(moveable.state);\n}\n\n\n\nfunction getSnapGuidelines(posInfos: SnapPosInfo[]) {\n    const guidelines: Array<{ guideline: SnapGuideline, posInfo: SnapPosInfo }> = [];\n\n    posInfos.forEach((posInfo) => {\n        posInfo.guidelineInfos.forEach(({ guideline }) => {\n            if (find(guidelines, info => info.guideline === guideline)) {\n                return;\n            }\n            guideline.direction = \"\";\n            guidelines.push({ guideline, posInfo });\n        });\n    });\n\n    return guidelines.map(({ guideline, posInfo }) => {\n        return {\n            ...guideline,\n            direction: posInfo.direction,\n        };\n    });\n}\n\nfunction addBoundGuidelines(\n    moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n    verticalPoses: number[],\n    horizontalPoses: number[],\n    verticalSnapPoses: SnappableRenderType[],\n    horizontalSnapPoses: SnappableRenderType[],\n    externalBounds?: BoundType | false | null\n) {\n    const {\n        vertical: verticalBoundInfos,\n        horizontal: horizontalBoundInfos,\n    } = checkBoundPoses(\n        getBounds(moveable, externalBounds),\n        verticalPoses,\n        horizontalPoses\n    );\n\n    const boundMap = getInitialBounds();\n\n\n    verticalBoundInfos.forEach((info) => {\n        if (info.isBound) {\n            if (info.direction === \"start\") {\n                boundMap.left = true;\n            }\n            if (info.direction === \"end\") {\n                boundMap.right = true;\n            }\n            verticalSnapPoses.push({\n                type: \"bounds\",\n                pos: info.pos,\n            });\n        }\n    });\n    horizontalBoundInfos.forEach((info) => {\n        if (info.isBound) {\n            if (info.direction === \"start\") {\n                boundMap.top = true;\n            }\n            if (info.direction === \"end\") {\n                boundMap.bottom = true;\n            }\n            horizontalSnapPoses.push({\n                type: \"bounds\",\n                pos: info.pos,\n            });\n        }\n    });\n    const {\n        boundMap: innerBoundMap,\n        vertical: verticalInnerBoundPoses,\n        horizontal: horizontalInnerBoundPoses,\n    } = checkInnerBoundPoses(moveable);\n\n    verticalInnerBoundPoses.forEach((innerPos) => {\n        if (\n            findIndex(\n                verticalSnapPoses,\n                ({ type, pos }) => type === \"bounds\" && pos === innerPos\n            ) >= 0\n        ) {\n            return;\n        }\n        verticalSnapPoses.push({\n            type: \"bounds\",\n            pos: innerPos,\n        });\n    });\n\n    horizontalInnerBoundPoses.forEach((innerPos) => {\n        if (\n            findIndex(\n                horizontalSnapPoses,\n                ({ type, pos }) => type === \"bounds\" && pos === innerPos\n            ) >= 0\n        ) {\n            return;\n        }\n        horizontalSnapPoses.push({\n            type: \"bounds\",\n            pos: innerPos,\n        });\n    });\n\n    return {\n        boundMap,\n        innerBoundMap,\n    };\n}\n\nconst directionCondition = getDirectionCondition(\"\", [\"resizable\", \"scalable\"]);\n\n\nconst NAME_snapRotationThreshold = \"snapRotationThreshold\";\nconst NAME_snapRotationDegrees = \"snapRotationDegrees\";\n\n/**\n * @namespace Moveable.Snappable\n * @description Whether or not target can be snapped to the guideline. (default: false)\n * @sort 2\n */\nexport default {\n    name: \"snappable\",\n    dragRelation: \"strong\",\n    props: [\n        \"snappable\",\n        \"snapContainer\",\n        \"snapDirections\",\n        \"elementSnapDirections\",\n        \"snapGap\",\n        \"snapGridWidth\",\n        \"snapGridHeight\",\n        \"isDisplaySnapDigit\",\n        \"isDisplayInnerSnapDigit\",\n        \"isDisplayGridGuidelines\",\n        \"snapDigit\",\n        \"snapThreshold\",\n        \"snapRenderThreshold\",\n        \"snapGridAll\",\n        NAME_snapRotationThreshold,\n        NAME_snapRotationDegrees,\n        \"horizontalGuidelines\",\n        \"verticalGuidelines\",\n        \"elementGuidelines\",\n        \"bounds\",\n        \"innerBounds\",\n        \"snapDistFormat\",\n        \"maxSnapElementGuidelineDistance\",\n        \"maxSnapElementGapDistance\",\n    ] as const,\n    events: [\"snap\", \"bound\"] as const,\n    css: [\n        `:host {\n--bounds-color: #d66;\n}\n.guideline {\npointer-events: none;\nz-index: 2;\n}\n.guideline.bounds {\nbackground: #d66;\nbackground: var(--bounds-color);\n}\n.guideline-group {\nposition: absolute;\ntop: 0;\nleft: 0;\n}\n.guideline-group .size-value {\nposition: absolute;\ncolor: #f55;\nfont-size: 12px;\nfont-size: calc(12px * var(--zoom));\nfont-weight: bold;\n}\n.guideline-group.horizontal .size-value {\ntransform-origin: 50% 100%;\ntransform: translateX(-50%);\nleft: 50%;\nbottom: 5px;\nbottom: calc(2px + 3px * var(--zoom));\n}\n.guideline-group.vertical .size-value {\ntransform-origin: 0% 50%;\ntop: 50%;\ntransform: translateY(-50%);\nleft: 5px;\nleft: calc(2px + 3px * var(--zoom));\n}\n.guideline.gap {\nbackground: #f55;\n}\n.size-value.gap {\ncolor: #f55;\n}\n`,\n    ],\n    render(\n        moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n        React: Renderer\n    ): any[] {\n        const state = moveable.state;\n        const {\n            top: targetTop,\n            left: targetLeft,\n            pos1,\n            pos2,\n            pos3,\n            pos4,\n            snapRenderInfo,\n        } = state;\n        const {\n            snapRenderThreshold = 1,\n        } = moveable.props;\n\n        if (!snapRenderInfo || !snapRenderInfo.render || !hasGuidelines(moveable, \"\")) {\n            // reset store\n            watchValue(\n                moveable,\n                \"boundMap\",\n                getInitialBounds(),\n                v => JSON.stringify(v),\n            );\n            watchValue(\n                moveable,\n                \"innerBoundMap\",\n                getInitialBounds(),\n                v => JSON.stringify(v),\n            );\n            return [];\n        }\n        state.guidelines = getTotalGuidelines(moveable);\n\n\n        const minLeft = Math.min(pos1[0], pos2[0], pos3[0], pos4[0]);\n        const minTop = Math.min(pos1[1], pos2[1], pos3[1], pos4[1]);\n        const externalPoses = snapRenderInfo.externalPoses || [];\n        const poses = getAbsolutePosesByState(moveable.state);\n        const verticalSnapPoses: SnappableRenderType[] = [];\n        const horizontalSnapPoses: SnappableRenderType[] = [];\n        const verticalGuidelines: SnapGuideline[] = [];\n        const horizontalGuidelines: SnapGuideline[] = [];\n        const snapInfos: Array<{\n            vertical: SnapDirectionInfo;\n            horizontal: SnapDirectionInfo;\n        }> = [];\n        const { width, height, top, left, bottom, right } = getRect(poses);\n        const targetRect = { left, right, top, bottom, center: (left + right) / 2, middle: (top + bottom) / 2 };\n        const hasExternalPoses = externalPoses.length > 0;\n        const externalRect = hasExternalPoses\n            ? getRect(externalPoses)\n            : ({} as ReturnType<typeof getRect>);\n\n        if (!snapRenderInfo.request) {\n            if (snapRenderInfo.direction) {\n                snapInfos.push(\n                    getSnapInfosByDirection(\n                        moveable,\n                        poses,\n                        snapRenderInfo.direction,\n                        snapRenderThreshold,\n                    )\n                );\n            }\n            if (snapRenderInfo.snap) {\n                const rect = getRect(poses);\n                if (snapRenderInfo.center) {\n                    (rect as any).middle = (rect.top + rect.bottom) / 2;\n                    (rect as any).center = (rect.left + rect.right) / 2;\n                }\n                snapInfos.push(checkSnaps(moveable, rect, snapRenderThreshold));\n            }\n            if (hasExternalPoses) {\n                if (snapRenderInfo.center) {\n                    (externalRect as any).middle =\n                        (externalRect.top + externalRect.bottom) / 2;\n                    (externalRect as any).center =\n                        (externalRect.left + externalRect.right) / 2;\n                }\n                snapInfos.push(checkSnaps(moveable, externalRect, snapRenderThreshold));\n            }\n            snapInfos.forEach((snapInfo) => {\n                const {\n                    vertical: { posInfos: verticalPosInfos },\n                    horizontal: { posInfos: horizontalPosInfos },\n                } = snapInfo;\n                verticalSnapPoses.push(\n                    ...verticalPosInfos.filter(({ guidelineInfos }) => {\n                        return guidelineInfos.some(({ guideline }) => !guideline.hide);\n                    }).map(\n                        (posInfo) => ({\n                            type: \"snap\",\n                            pos: posInfo.pos,\n                        } as const)\n                    )\n                );\n                horizontalSnapPoses.push(\n                    ...horizontalPosInfos.filter(({ guidelineInfos }) => {\n                        return guidelineInfos.some(({ guideline }) => !guideline.hide);\n                    }).map(\n                        (posInfo) => ({\n                            type: \"snap\",\n                            pos: posInfo.pos,\n                        } as const)\n                    )\n                );\n\n                verticalGuidelines.push(...getSnapGuidelines(verticalPosInfos));\n                horizontalGuidelines.push(...getSnapGuidelines(horizontalPosInfos));\n            });\n        }\n\n        const {\n            boundMap,\n            innerBoundMap,\n        } = addBoundGuidelines(\n            moveable,\n            [left, right],\n            [top, bottom],\n            verticalSnapPoses,\n            horizontalSnapPoses\n        );\n        if (hasExternalPoses) {\n            addBoundGuidelines(\n                moveable,\n                [externalRect.left, externalRect.right],\n                [externalRect.top, externalRect.bottom],\n                verticalSnapPoses,\n                horizontalSnapPoses,\n                snapRenderInfo.externalBounds\n            );\n        }\n        const allGuidelines = [...verticalGuidelines, ...horizontalGuidelines];\n        const elementGuidelines = allGuidelines.filter(guideline => guideline.element && !guideline.gapRects);\n        const gapGuidelines = allGuidelines.filter(guideline => guideline.gapRects).sort((a, b) => {\n            return a.gap! - b.gap!;\n        });\n\n        triggerEvent(\n            moveable,\n            \"onSnap\",\n            {\n                guidelines: allGuidelines.filter(({ element }) => !element),\n                elements: elementGuidelines,\n                gaps: gapGuidelines,\n            },\n            true\n        );\n\n        const nextBoundMap = watchValue(\n            moveable,\n            \"boundMap\",\n            boundMap,\n            v => JSON.stringify(v),\n            getInitialBounds(),\n        );\n        const nextInnerBoundMap = watchValue(\n            moveable,\n            \"innerBoundMap\",\n            innerBoundMap,\n            v => JSON.stringify(v),\n            getInitialBounds(),\n        );\n\n        if (boundMap === nextBoundMap || innerBoundMap === nextInnerBoundMap) {\n            triggerEvent(\n                moveable,\n                \"onBound\",\n                {\n                    bounds: boundMap,\n                    innerBounds: innerBoundMap,\n                },\n                true\n            );\n        }\n\n\n\n        // verticalSnapPoses.\n        return [\n            ...renderDashedGuidelines(\n                moveable,\n                elementGuidelines,\n                [minLeft, minTop],\n                targetRect,\n                React,\n            ),\n            ...renderGapGuidelines(\n                moveable,\n                gapGuidelines,\n                [minLeft, minTop],\n                targetRect,\n                React,\n            ),\n            ...renderGuidelines(\n                moveable,\n                \"horizontal\",\n                horizontalGuidelines,\n                [targetLeft, targetTop],\n                targetRect,\n                React\n            ),\n            ...renderGuidelines(\n                moveable,\n                \"vertical\",\n                verticalGuidelines,\n                [targetLeft, targetTop],\n                targetRect,\n                React\n            ),\n            ...renderSnapPoses(\n                moveable,\n                \"horizontal\",\n                horizontalSnapPoses,\n                minLeft,\n                targetTop,\n                width,\n                0,\n                React\n            ),\n            ...renderSnapPoses(\n                moveable,\n                \"vertical\",\n                verticalSnapPoses,\n                minTop,\n                targetLeft,\n                height,\n                1,\n                React\n            ),\n        ];\n    },\n    dragStart(\n        moveable: MoveableManagerInterface<SnappableProps, SnappableState>,\n        e: any\n    ) {\n        moveable.state.snapRenderInfo = {\n            request: e.isRequest,\n            snap: true,\n            center: true,\n        };\n        checkSnapInfo(moveable);\n    },\n    drag(\n        moveable: MoveableManagerInterface<SnappableProps, SnappableState>\n    ) {\n        const state = moveable.state;\n        if (!checkSnapInfo(moveable)) {\n            state.guidelines = getTotalGuidelines(moveable);\n        }\n        if (state.snapRenderInfo) {\n            state.snapRenderInfo.render = true;\n        }\n    },\n    pinchStart(\n        moveable: MoveableManagerInterface<SnappableProps, SnappableState>\n    ) {\n        this.unset(moveable);\n    },\n    dragEnd(\n        moveable: MoveableManagerInterface<SnappableProps, SnappableState>\n    ) {\n        this.unset(moveable);\n    },\n    dragControlCondition(moveable: MoveableManagerInterface, e: any) {\n        if (directionCondition(moveable, e) || rotatableDragControlCondtion(moveable, e)) {\n            return true;\n        }\n        if (!e.isRequest && e.inputEvent) {\n            return hasClass(e.inputEvent.target, prefix(\"snap-control\"));\n        }\n    },\n    dragControlStart(\n        moveable: MoveableManagerInterface<SnappableProps, SnappableState>\n    ) {\n        moveable.state.snapRenderInfo = null;\n        checkSnapInfo(moveable);\n    },\n    dragControl(\n        moveable: MoveableManagerInterface<SnappableProps, SnappableState>\n    ) {\n        this.drag(moveable);\n    },\n    dragControlEnd(\n        moveable: MoveableManagerInterface<SnappableProps, SnappableState>\n    ) {\n        this.unset(moveable);\n    },\n    dragGroupStart(moveable: any, e: any) {\n        this.dragStart(moveable, e);\n    },\n    dragGroup(\n        moveable: MoveableGroupInterface<SnappableProps, SnappableState>\n    ) {\n        this.drag(moveable);\n    },\n    dragGroupEnd(\n        moveable: MoveableGroupInterface<SnappableProps, SnappableState>\n    ) {\n        this.unset(moveable);\n    },\n    dragGroupControlStart(\n        moveable: MoveableGroupInterface<SnappableProps, SnappableState>\n    ) {\n        moveable.state.snapRenderInfo = null;\n        checkSnapInfo(moveable);\n    },\n    dragGroupControl(\n        moveable: MoveableManagerInterface<SnappableProps, SnappableState>\n    ) {\n        this.drag(moveable);\n    },\n    dragGroupControlEnd(\n        moveable: MoveableGroupInterface<SnappableProps, SnappableState>\n    ) {\n        this.unset(moveable);\n    },\n    unset(moveable: any) {\n        const state = moveable.state;\n\n        state.enableSnap = false;\n        state.guidelines = [];\n        state.snapRenderInfo = null;\n        state.elementRects = [];\n    },\n};\n\n\n/**\n * Whether or not target can be snapped to the guideline. (default: false)\n * @name Moveable.Snappable#snappable\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.snappable = true;\n */\n/**\n *  A snap container that is the basis for snap, bounds, and innerBounds. (default: null = container)\n * @name Moveable.Snappable#snapContainer\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.querySelector(\".container\"));\n *\n * moveable.snapContainer = document.body;\n */\n/**\n * You can specify the directions to snap to the target. (default: { left: true, top: true, right: true, bottom: true })\n * @name Moveable.Snappable#snapDirections\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   snappable: true,\n *   snapDirections: true,\n * });\n * // snap center\n * moveable.snapDirections = { left: true, top: true, right: true, bottom: true, center: true, middle: true };\n */\n\n/**\n * You can specify the snap directions of elements. (default: { left: true, ftrue, right: true, bottom: true })\n * @name Moveable.Snappable#elementSnapDirections\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   snappable: true,\n *   elementSnapDirections: true,\n * });\n * // snap center\n * moveable.elementSnapDirections = { left: true, top: true, right: true, bottom: true, center: true, middle: true };\n */\n/**\n * When you drag, make the gap snap in the element guidelines. (default: true)\n * @name Moveable.Snappable#snapGap\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   snappable: true,\n *   snapElement: true,\n *   snapGap: true,\n * });\n *\n * moveable.snapGap = false;\n */\n/**\n * Distance value that can snap to guidelines. (default: 5)\n * @name Moveable.Snappable#snapThreshold\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.snapThreshold = 5;\n */\n\n/**\n * Add guidelines in the horizontal direction. (default: [])\n * @name Moveable.Snappable#horizontalGuidelines\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.horizontalGuidelines = [100, 200, 500];\n */\n\n/**\n * Add guidelines in the vertical direction. (default: [])\n * @name Moveable.Snappable#verticalGuidelines\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.verticalGuidelines = [100, 200, 500];\n */\n/**\n * Add guidelines for the element. (default: [])\n * @name Moveable.Snappable#elementGuidelines\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.elementGuidelines = [\n *   document.querySelector(\".element\"),\n * ];\n */\n/**\n * You can set up boundaries.\n * @name Moveable.Snappable#bounds\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\n * @default null\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.bounds = { left: 0, right: 1000, top: 0, bottom: 1000};\n */\n/**\n * You can set up inner boundaries.\n * @name Moveable.Snappable#innerBounds\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\n * @default null\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.innerBounds = { left: 500, top: 500, width: 100, height: 100};\n */\n/**\n * snap distance digits (default: 0)\n * @name Moveable.Snappable#snapDigit\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.snapDigit = 0\n */\n\n/**\n * If width size is greater than 0, you can vertical snap to the grid. (default: 0)\n * @name Moveable.Snappable#snapGridWidth\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.snapGridWidth = 5;\n */\n\n/**\n * If height size is greater than 0, you can horizontal snap to the grid. (default: 0)\n * @name Moveable.Snappable#snapGridHeight\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.snapGridHeight = 5;\n */\n/**\n * Whether to show snap distance (default: true)\n * @name Moveable.Snappable#isDisplaySnapDigit\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.isDisplaySnapDigit = true;\n */\n\n/**\n * Whether to show element inner snap distance (default: false)\n * @name Moveable.Snappable#isDisplayInnerSnapDigit\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.isDisplayInnerSnapDigit = true;\n */\n\n\n/**\n * You can set the text format of the distance shown in the guidelines. (default: self)\n * @name Moveable.Snappable#snapDistFormat\n * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Snappable.html#.SnappableOptions}\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *  snappable: true,\n *  snapDistFormat: (v, type) => v,\n * });\n * moveable.snapDistFormat = (v, type) => `${v}px`;\n */\n\n/**\n * When you drag or dragControl, the `snap` event is called.\n * @memberof Moveable.Snappable\n * @event snap\n * @param {Moveable.Snappable.OnSnap} - Parameters for the `snap` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     snappable: true\n * });\n * moveable.on(\"snap\", e => {\n *     console.log(\"onSnap\", e);\n * });\n */\n", "import { PREFIX, IS_WEBKIT605, TINY_NUM } from \"./consts\";\nimport { prefixNames } from \"framework-utils\";\nimport {\n    isUndefined, isObject, splitUnit,\n    IObject, hasClass, isArray, isString, getRad,\n    isFunction, convertUnitSize, between, getKeys, decamelize, isNumber,\n    getDocumentBody,\n    getDocumentElement,\n    getWindow,\n    isNode,\n    isWindow,\n    counter,\n} from \"@daybrush/utils\";\nimport {\n    multiply, invert,\n    convertDimension, createIdentityMatrix,\n    createOriginMatrix, convertPositionMatrix, calculate,\n    multiplies,\n    minus,\n    createScaleMatrix,\n    plus,\n    convertMatrixtoCSS,\n    rotate,\n} from \"@scena/matrix\";\nimport {\n    MoveableManagerState, Able, MoveableClientRect,\n    MoveableProps, ArrayFormat, MoveableRefType,\n    MatrixInfo, ExcludeEndParams, ExcludeParams,\n    ElementSizes, TransformObject,\n    MoveableRefTargetsResultType, MoveableRefTargetType, MoveableManagerInterface, CSSObject, PaddingBox,\n} from \"./types\";\nimport { parse, toMat, calculateMatrixDist, parseMat } from \"css-to-mat\";\nimport { getBeforeRenderableDatas, getDragDist } from \"./gesto/GestoUtils\";\nimport { getGestoData } from \"./gesto/GestoData\";\nimport { GetStyle, getCachedStyle } from \"./store/Store\";\nimport { normalized } from \"./ables/Snappable\";\n\nexport function round(num: number) {\n    return Math.round(num);\n}\nexport function multiply2(pos1: number[], pos2: number[]) {\n    return [\n        pos1[0] * pos2[0],\n        pos1[1] * pos2[1],\n    ];\n}\nexport function prefix(...classNames: string[]) {\n    return prefixNames(PREFIX, ...classNames);\n}\n\nexport function defaultSync(fn: () => void) {\n    fn();\n}\n\nexport function createIdentityMatrix3() {\n    return createIdentityMatrix(3);\n}\n\nexport function getTransformMatrix(transform: string | number[]) {\n    if (!transform || transform === \"none\") {\n        return [1, 0, 0, 1, 0, 0];\n\n    }\n    if (isObject(transform)) {\n        return transform;\n    }\n    return parseMat(transform);\n}\nexport function getAbsoluteMatrix(matrix: number[], n: number, origin: number[]) {\n    return multiplies(\n        n,\n        createOriginMatrix(origin, n),\n        matrix,\n        createOriginMatrix(origin.map(a => -a), n),\n    );\n}\nexport function measureSVGSize(el: SVGElement, unit: string, isHorizontal: boolean) {\n    if (unit === \"%\") {\n        const viewBox = getSVGViewBox(el.ownerSVGElement!);\n\n        return viewBox[isHorizontal ? \"width\" : \"height\"] / 100;\n    }\n    return 1;\n}\nexport function getBeforeTransformOrigin(el: SVGElement) {\n    const relativeOrigin = getTransformOrigin(getComputedStyle(el, \":before\"));\n\n    return relativeOrigin.map((o, i) => {\n        const { value, unit } = splitUnit(o);\n\n        return value * measureSVGSize(el, unit, i === 0);\n    });\n}\nexport function getTransformOriginArray(transformOrigin: string) {\n    return transformOrigin ? transformOrigin.split(\" \") : [\"0\", \"0\"];\n}\nexport function getTransformOrigin(style: CSSStyleDeclaration) {\n    return getTransformOriginArray(style.transformOrigin);\n}\nexport function getElementTransform(\n    target: HTMLElement | SVGElement,\n): string {\n    const getStyle = getCachedStyle(target);\n    const computedTransform = getStyle(\"transform\");\n\n    if (computedTransform && computedTransform !== \"none\") {\n        return computedTransform;\n    }\n    if (\"transform\" in target) {\n        const list = (target as any).transform as SVGAnimatedTransformList;\n        const baseVal = list.baseVal;\n\n        if (!baseVal) {\n            return \"\";\n        }\n        const length = baseVal.length;\n\n        if (!length) {\n            return \"\";\n        }\n\n        const matrixes: string[] = [];\n\n        for (let i = 0; i < length; ++i) {\n            const matrix = baseVal[i].matrix;\n\n            matrixes.push(`matrix(${([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"] as const).map(chr => matrix[chr]).join(\", \")})`);\n        }\n        return matrixes.join(\" \");\n\n    }\n    return \"\";\n}\n\nexport function getOffsetInfo(\n    el: SVGElement | HTMLElement | null | undefined,\n    lastParent: SVGElement | HTMLElement | null | undefined,\n    isParent?: boolean,\n    checkZoom?: boolean,\n    getTargetStyle?: GetStyle,\n) {\n\n    const documentElement = getDocumentElement(el!) || getDocumentBody(el!);\n    let hasSlot = false;\n    let target: HTMLElement | SVGElement | null | undefined;\n    let parentSlotElement: HTMLElement | null | undefined;\n\n    if (!el || isParent) {\n        target = el;\n    } else {\n        const assignedSlotParentElement = el?.assignedSlot?.parentElement;\n        const parentElement = el.parentElement;\n\n        if (assignedSlotParentElement) {\n            hasSlot = true;\n            parentSlotElement = parentElement;\n            target = assignedSlotParentElement;\n        } else {\n            target = parentElement;\n        }\n    }\n\n    let isCustomElement = false;\n    let isEnd = el === lastParent || target === lastParent;\n    let position = \"relative\";\n    let offsetZoom = 1;\n\n\n    const targetZoom = parseFloat(getTargetStyle?.(\"zoom\")) || 1;\n    const targetPosition = getTargetStyle?.(\"position\");\n\n\n\n    while (target && target !== documentElement) {\n        if (lastParent === target) {\n            isEnd = true;\n        }\n        const getStyle = getCachedStyle(target);\n        const tagName = target.tagName.toLowerCase();\n        const transform = getElementTransform(target as SVGElement);\n        const willChange = getStyle(\"willChange\");\n        const zoom = parseFloat(getStyle(\"zoom\")) || 1;\n\n        position = getStyle(\"position\");\n        if (checkZoom && zoom !== 1) {\n            offsetZoom = zoom;\n            break;\n        }\n        if (\n            // offsetParent is the parentElement if the target's zoom is not 1 and not absolute.\n            !isParent && checkZoom && targetZoom !== 1 && targetPosition && targetPosition !== \"absolute\"\n            || tagName === \"svg\"\n            || position !== \"static\"\n            || (transform && transform !== \"none\")\n            || willChange === \"transform\"\n        ) {\n            break;\n        }\n        const slotParentNode = el?.assignedSlot?.parentNode;\n        const targetParentNode = target.parentNode;\n\n        if (slotParentNode) {\n            hasSlot = true;\n            parentSlotElement = targetParentNode as HTMLElement;\n        }\n        const parentNode = targetParentNode;\n\n        if (parentNode && parentNode.nodeType === 11) {\n            // Shadow Root\n            target = (parentNode as ShadowRoot).host as HTMLElement;\n            isCustomElement = true;\n            position = getCachedStyle(target)(\"position\");\n            break;\n        }\n        target = parentNode as HTMLElement | SVGElement;\n        position = \"relative\";\n    }\n    return {\n        offsetZoom,\n        hasSlot,\n        parentSlotElement,\n        isCustomElement,\n        isStatic: position === \"static\",\n        isEnd: isEnd || !target || target === documentElement,\n        offsetParent: target as HTMLElement || documentElement,\n    };\n}\n\nexport function getOffsetPosInfo(\n    el: HTMLElement | SVGElement,\n    target: HTMLElement | SVGElement,\n) {\n    const tagName = el.tagName.toLowerCase();\n    let offsetLeft = (el as HTMLElement).offsetLeft;\n    let offsetTop = (el as HTMLElement).offsetTop;\n    const getStyle = getCachedStyle(el);\n    // svg\n    const isSVG = isUndefined(offsetLeft);\n    let hasOffset = !isSVG;\n    let origin: number[];\n    let targetOrigin: number[];\n    // inner svg element\n    if (!hasOffset && (tagName !== \"svg\" || (target as SVGElement).ownerSVGElement)) {\n        origin = IS_WEBKIT605\n            ? getBeforeTransformOrigin(el as SVGElement)\n            : getTransformOriginArray(getStyle(\"transformOrigin\")).map(pos => parseFloat(pos));\n\n        targetOrigin = origin.slice();\n        hasOffset = true;\n\n        if (tagName === \"svg\") {\n            offsetLeft = 0;\n            offsetTop = 0;\n        } else {\n            [\n                offsetLeft, offsetTop, origin[0], origin[1],\n            ] = getSVGGraphicsOffset(\n                el as SVGGraphicsElement,\n                origin,\n                el === target && target.tagName.toLowerCase() === \"g\",\n            );\n        }\n    } else {\n        origin = getTransformOriginArray(getStyle(\"transformOrigin\")).map(pos => parseFloat(pos));\n        targetOrigin = origin.slice();\n    }\n    return {\n        tagName,\n        isSVG,\n        hasOffset,\n        offset: [offsetLeft || 0, offsetTop || 0],\n        origin,\n        targetOrigin,\n    };\n}\nexport function getBodyOffset(\n    el: HTMLElement | SVGElement,\n    isSVG: boolean,\n) {\n    const getStyle = getCachedStyle(el);\n    const getBodyStyle = getCachedStyle(getDocumentBody(el));\n    const bodyPosition = getBodyStyle(\"position\");\n    if (!isSVG && (!bodyPosition || bodyPosition === \"static\")) {\n        return [0, 0];\n    }\n\n    let marginLeft = parseInt(getBodyStyle(\"marginLeft\"), 10);\n    let marginTop = parseInt(getBodyStyle(\"marginTop\"), 10);\n\n    if (getStyle(\"position\") === \"absolute\") {\n        if (getStyle(\"top\") !== \"auto\" || getStyle(\"bottom\") !== \"auto\") {\n            marginTop = 0;\n        }\n        if (getStyle(\"left\") !== \"auto\" || getStyle(\"right\") !== \"auto\") {\n            marginLeft = 0;\n        }\n    }\n\n    return [marginLeft, marginTop];\n}\nexport function convert3DMatrixes(matrixes: MatrixInfo[]) {\n    matrixes.forEach(info => {\n        const matrix = info.matrix;\n\n        if (matrix) {\n            info.matrix = convertDimension(matrix, 3, 4);\n        }\n    });\n}\n\nexport function getPositionFixedInfo(el: HTMLElement | SVGElement) {\n    let fixedContainer = el.parentElement;\n    let hasTransform = false;\n    const body = getDocumentBody(el);\n\n    while (fixedContainer) {\n        const transform = getComputedStyle(fixedContainer).transform;\n\n\n        if (transform && transform !== \"none\") {\n            hasTransform = true;\n            break;\n        }\n        if (fixedContainer === body) {\n            break;\n        }\n        fixedContainer = fixedContainer.parentElement;\n    }\n\n    return {\n        fixedContainer: fixedContainer || body,\n        hasTransform,\n    };\n}\n\nexport function makeMatrixCSS(matrix: number[], is3d: boolean = matrix.length > 9) {\n    return `${is3d ? \"matrix3d\" : \"matrix\"}(${convertMatrixtoCSS(matrix, !is3d).join(\",\")})`;\n}\nexport function getSVGViewBox(el: SVGSVGElement) {\n    const clientWidth = el.clientWidth;\n    const clientHeight = el.clientHeight;\n\n    if (!el) {\n        return { x: 0, y: 0, width: 0, height: 0, clientWidth, clientHeight };\n    }\n    const viewBox = el.viewBox;\n    const baseVal = (viewBox && viewBox.baseVal) || { x: 0, y: 0, width: 0, height: 0 };\n\n    return {\n        x: baseVal.x,\n        y: baseVal.y,\n        width: baseVal.width || clientWidth,\n        height: baseVal.height || clientHeight,\n        clientWidth,\n        clientHeight,\n    };\n}\nexport function getSVGMatrix(\n    el: SVGSVGElement,\n    n: number,\n) {\n    const {\n        width: viewBoxWidth,\n        height: viewBoxHeight,\n        clientWidth,\n        clientHeight,\n    } = getSVGViewBox(el);\n    const scaleX = clientWidth / viewBoxWidth;\n    const scaleY = clientHeight / viewBoxHeight;\n\n    const preserveAspectRatio = el.preserveAspectRatio.baseVal;\n    // https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/preserveAspectRatio\n    const align = preserveAspectRatio.align;\n    // 1 : meet 2: slice\n    const meetOrSlice = preserveAspectRatio.meetOrSlice;\n    const svgOrigin = [0, 0];\n    const scale = [scaleX, scaleY];\n    const translate = [0, 0];\n\n    if (align !== 1) {\n        const xAlign = (align - 2) % 3;\n        const yAlign = Math.floor((align - 2) / 3);\n\n        svgOrigin[0] = viewBoxWidth * xAlign / 2;\n        svgOrigin[1] = viewBoxHeight * yAlign / 2;\n\n        const scaleDimension = meetOrSlice === 2 ? Math.max(scaleY, scaleX) : Math.min(scaleX, scaleY);\n\n        scale[0] = scaleDimension;\n        scale[1] = scaleDimension;\n\n        translate[0] = (clientWidth - viewBoxWidth) / 2 * xAlign;\n        translate[1] = (clientHeight - viewBoxHeight) / 2 * yAlign;\n    }\n    const scaleMatrix = createScaleMatrix(scale, n);\n    [\n        scaleMatrix[n * (n - 1)],\n        scaleMatrix[n * (n - 1) + 1],\n    ] = translate;\n\n    return getAbsoluteMatrix(\n        scaleMatrix,\n        n,\n        svgOrigin,\n    );\n}\nexport function getSVGGraphicsOffset(\n    el: SVGGraphicsElement,\n    origin: number[],\n    isGTarget?: boolean,\n) {\n    if (!el.getBBox || !isGTarget && el.tagName.toLowerCase() === \"g\") {\n        return [0, 0, 0, 0];\n    }\n    const getStyle = getCachedStyle(el);\n    const isFillBox = getStyle(\"transform-box\") === \"fill-box\";\n\n    const bbox = el.getBBox();\n    const viewBox = getSVGViewBox(el.ownerSVGElement!);\n    const left = bbox.x - viewBox.x;\n    const top = bbox.y - viewBox.y;\n    const originX = isFillBox ? origin[0] : origin[0] - left;\n    const originY = isFillBox ? origin[1] : origin[1] - top;\n\n    return [left, top, originX, originY];\n}\nexport function calculatePosition(matrix: number[], pos: number[], n: number) {\n    return calculate(matrix, convertPositionMatrix(pos, n), n);\n}\nexport function calculatePoses(matrix: number[], width: number, height: number, n: number) {\n    return [[0, 0], [width, 0], [0, height], [width, height]].map(pos => calculatePosition(matrix, pos, n));\n}\nexport function getRect(poses: number[][]) {\n    const posesX = poses.map(pos => pos[0]);\n    const posesY = poses.map(pos => pos[1]);\n    const left = Math.min(...posesX);\n    const top = Math.min(...posesY);\n    const right = Math.max(...posesX);\n    const bottom = Math.max(...posesY);\n    const rectWidth = right - left;\n    const rectHeight = bottom - top;\n\n    return {\n        left, top,\n        right, bottom,\n        width: rectWidth,\n        height: rectHeight,\n    };\n}\nexport function calculateRect(matrix: number[], width: number, height: number, n: number) {\n    const poses = calculatePoses(matrix, width, height, n);\n\n    return getRect(poses);\n}\nexport function getSVGOffset(\n    offsetInfo: MatrixInfo,\n    targetInfo: MatrixInfo,\n    container: HTMLElement | SVGElement,\n    n: number,\n    beforeMatrix: number[],\n) {\n    const target = offsetInfo.target;\n    const origin = offsetInfo.origin!;\n    const targetMatrix = targetInfo.matrix!;\n    const {\n        offsetWidth: width,\n        offsetHeight: height,\n    } = getSize(target);\n    const containerClientRect = container.getBoundingClientRect();\n    let margin = [0, 0];\n\n    if (container === getDocumentBody(container)) {\n        margin = getBodyOffset(target, true);\n    }\n\n    const rect = target.getBoundingClientRect();\n    const rectLeft\n        = rect.left - containerClientRect.left + container.scrollLeft\n        - (container.clientLeft || 0) + margin[0];\n    const rectTop\n        = rect.top - containerClientRect.top + container.scrollTop\n        - (container.clientTop || 0) + margin[1];\n    const rectWidth = rect.width;\n    const rectHeight = rect.height;\n\n    const mat = multiplies(\n        n,\n        beforeMatrix,\n        targetMatrix,\n    );\n    const {\n        left: prevLeft,\n        top: prevTop,\n        width: prevWidth,\n        height: prevHeight,\n    } = calculateRect(mat, width, height, n);\n    const posOrigin = calculatePosition(mat, origin, n);\n    const prevOrigin = minus(posOrigin, [prevLeft, prevTop]);\n    const rectOrigin = [\n        rectLeft + prevOrigin[0] * rectWidth / prevWidth,\n        rectTop + prevOrigin[1] * rectHeight / prevHeight,\n    ];\n    const offset = [0, 0];\n    let count = 0;\n\n    while (++count < 10) {\n        const inverseBeforeMatrix = invert(beforeMatrix, n);\n        [offset[0], offset[1]] = minus(\n            calculatePosition(inverseBeforeMatrix, rectOrigin, n),\n            calculatePosition(inverseBeforeMatrix, posOrigin, n),\n        );\n        const mat2 = multiplies(\n            n,\n            beforeMatrix,\n            createOriginMatrix(offset, n),\n            targetMatrix,\n        );\n        const {\n            left: nextLeft,\n            top: nextTop,\n        } = calculateRect(mat2, width, height, n);\n        const distLeft = nextLeft - rectLeft;\n        const distTop = nextTop - rectTop;\n\n        if (abs(distLeft) < 2 && abs(distTop) < 2) {\n            break;\n        }\n        rectOrigin[0] -= distLeft;\n        rectOrigin[1] -= distTop;\n    }\n    return offset.map(p => Math.round(p));\n}\n\nexport function calculateMoveableClientPositions(\n    rootMatrix: number[],\n    poses: number[][],\n    rootClientRect: MoveableClientRect,\n) {\n    const is3d = rootMatrix.length === 16;\n    const n = is3d ? 4 : 3;\n    const rootPoses = poses.map(pos => calculatePosition(rootMatrix, pos, n));\n    const { left, top } = rootClientRect;\n\n    return rootPoses.map(pos => {\n        return [pos[0] + left, pos[1] + top];\n    });\n\n}\n\nexport function getDistSize(vec: number[]) {\n    return Math.sqrt(vec[0] * vec[0] + vec[1] * vec[1]);\n}\nexport function getDiagonalSize(pos1: number[], pos2: number[]) {\n    return getDistSize([\n        pos2[0] - pos1[0],\n        pos2[1] - pos1[1],\n    ]);\n}\nexport function getLineStyle(pos1: number[], pos2: number[], zoom = 1, rad: number = getRad(pos1, pos2)) {\n    const width = getDiagonalSize(pos1, pos2);\n\n    return {\n        transform: `translateY(-50%) translate(${pos1[0]}px, ${pos1[1]}px) rotate(${rad}rad) scaleY(${zoom})`,\n        width: `${width}px`,\n    };\n}\nexport function getControlTransform(rotation: number, zoom: number, ...poses: number[][]) {\n    const length = poses.length;\n\n    const x = poses.reduce((prev, pos) => prev + pos[0], 0) / length;\n    const y = poses.reduce((prev, pos) => prev + pos[1], 0) / length;\n    return {\n        transform: `translateZ(0px) translate(${x}px, ${y}px) rotate(${rotation}rad) scale(${zoom})`,\n    };\n}\n\nexport function getProps<Props>(props: Props, ableName: keyof Props): Props {\n    const self = props[ableName];\n\n    if (isObject(self)) {\n        return {\n            ...props,\n            ...self,\n        };\n    }\n    return props;\n}\n\nexport function getSize(\n    target?: SVGElement | HTMLElement | null,\n): ElementSizes {\n    const hasOffset = target && !isUndefined((target as any).offsetWidth);\n\n    let offsetWidth = 0;\n    let offsetHeight = 0;\n    let clientWidth = 0;\n    let clientHeight = 0;\n    let cssWidth = 0;\n    let cssHeight = 0;\n    let contentWidth = 0;\n    let contentHeight = 0;\n\n    let minWidth = 0;\n    let minHeight = 0;\n    let minOffsetWidth = 0;\n    let minOffsetHeight = 0;\n\n    let maxWidth = Infinity;\n    let maxHeight = Infinity;\n    let maxOffsetWidth = Infinity;\n    let maxOffsetHeight = Infinity;\n    let inlineCSSWidth = 0;\n    let inlineCSSHeight = 0;\n    let svg = false;\n\n    if (target) {\n        if (!hasOffset && (target as SVGElement).ownerSVGElement) {\n            // check svg elements\n            const bbox = (target as SVGGraphicsElement).getBBox();\n\n            svg = true;\n            offsetWidth = bbox.width;\n            offsetHeight = bbox.height;\n            cssWidth = offsetWidth;\n            cssHeight = offsetHeight;\n            contentWidth = offsetWidth;\n            contentHeight = offsetHeight;\n            clientWidth = offsetWidth;\n            clientHeight = offsetHeight;\n        } else {\n            // check html elements\n            const getStyle = getCachedStyle(target);\n            const targetStyle = target.style;\n            const boxSizing = getStyle(\"boxSizing\") === \"border-box\";\n            const borderLeft = parseFloat(getStyle(\"borderLeftWidth\")) || 0;\n            const borderRight = parseFloat(getStyle(\"borderRightWidth\")) || 0;\n            const borderTop = parseFloat(getStyle(\"borderTopWidth\")) || 0;\n            const borderBottom = parseFloat(getStyle(\"borderBottomWidth\")) || 0;\n            const paddingLeft = parseFloat(getStyle(\"paddingLeft\")) || 0;\n            const paddingRight = parseFloat(getStyle(\"paddingRight\")) || 0;\n            const paddingTop = parseFloat(getStyle(\"paddingTop\")) || 0;\n            const paddingBottom = parseFloat(getStyle(\"paddingBottom\")) || 0;\n\n            const horizontalPadding = paddingLeft + paddingRight;\n            const verticalPadding = paddingTop + paddingBottom;\n            const horizontalBorder = borderLeft + borderRight;\n            const verticalBorder = borderTop + borderBottom;\n            const horizontalOffset = horizontalPadding + horizontalBorder;\n            const verticalOffset = verticalPadding + verticalBorder;\n            const position = getStyle(\"position\");\n\n            let containerWidth = 0;\n            let containerHeight = 0;\n\n            // SVGSVGElement, HTMLElement\n            if (\"clientLeft\" in target) {\n                let parentElement: HTMLElement | null = null;\n\n                if (position === \"absolute\") {\n                    const offsetInfo = getOffsetInfo(target, getDocumentBody(target));\n                    parentElement = offsetInfo.offsetParent;\n\n                } else {\n                    parentElement = target.parentElement;\n                }\n                if (parentElement) {\n                    const getParentStyle = getCachedStyle(parentElement);\n\n                    containerWidth = parseFloat(getParentStyle(\"width\"));\n                    containerHeight = parseFloat(getParentStyle(\"height\"));\n                }\n            }\n            minWidth = Math.max(\n                horizontalPadding,\n                convertUnitSize(getStyle(\"minWidth\"), containerWidth) || 0,\n            );\n            minHeight = Math.max(\n                verticalPadding,\n                convertUnitSize(getStyle(\"minHeight\"), containerHeight) || 0,\n            );\n            maxWidth = convertUnitSize(getStyle(\"maxWidth\"), containerWidth);\n            maxHeight = convertUnitSize(getStyle(\"maxHeight\"), containerHeight);\n\n            if (isNaN(maxWidth)) {\n                maxWidth = Infinity;\n            }\n            if (isNaN(maxHeight)) {\n                maxHeight = Infinity;\n            }\n            inlineCSSWidth = convertUnitSize(targetStyle.width, 0) || 0;\n            inlineCSSHeight = convertUnitSize(targetStyle.height, 0) || 0;\n            cssWidth = parseFloat(getStyle(\"width\")) || 0;\n            cssHeight = parseFloat(getStyle(\"height\")) || 0;\n\n\n            contentWidth = abs(cssWidth - inlineCSSWidth) < 1\n                ? between(minWidth, inlineCSSWidth || cssWidth, maxWidth)\n                : cssWidth;\n            contentHeight = abs(cssHeight - inlineCSSHeight) < 1\n                ? between(minHeight, inlineCSSHeight || cssHeight, maxHeight)\n                : cssHeight;\n\n            offsetWidth = contentWidth;\n            offsetHeight = contentHeight;\n            clientWidth = contentWidth;\n            clientHeight = contentHeight;\n\n            if (boxSizing) {\n                maxOffsetWidth = maxWidth;\n                maxOffsetHeight = maxHeight;\n                minOffsetWidth = minWidth;\n                minOffsetHeight = minHeight;\n                contentWidth = offsetWidth - horizontalOffset;\n                contentHeight = offsetHeight - verticalOffset;\n            } else {\n                maxOffsetWidth = maxWidth + horizontalOffset;\n                maxOffsetHeight = maxHeight + verticalOffset;\n                minOffsetWidth = minWidth + horizontalOffset;\n                minOffsetHeight = minHeight + verticalOffset;\n                offsetWidth = contentWidth + horizontalOffset;\n                offsetHeight = contentHeight + verticalOffset;\n            }\n            clientWidth = contentWidth + horizontalPadding;\n            clientHeight = contentHeight + verticalPadding;\n        }\n    }\n\n    return {\n        svg,\n        offsetWidth,\n        offsetHeight,\n        clientWidth,\n        clientHeight,\n        contentWidth,\n        contentHeight,\n        inlineCSSWidth,\n        inlineCSSHeight,\n        cssWidth,\n        cssHeight,\n        minWidth,\n        minHeight,\n        maxWidth,\n        maxHeight,\n        minOffsetWidth,\n        minOffsetHeight,\n        maxOffsetWidth,\n        maxOffsetHeight,\n    };\n}\nexport function getRotationRad(\n    poses: number[][],\n    direction: number,\n) {\n    return getRad(direction > 0 ? poses[0] : poses[1], direction > 0 ? poses[1] : poses[0]);\n}\n\nexport function resetClientRect(): MoveableClientRect {\n    return {\n        left: 0, top: 0,\n        width: 0, height: 0,\n        right: 0,\n        bottom: 0,\n        clientLeft: 0, clientTop: 0,\n        clientWidth: 0, clientHeight: 0,\n        scrollWidth: 0, scrollHeight: 0,\n    };\n}\n\nexport function getExtendsRect(\n    el: HTMLElement | SVGElement,\n    rect: MoveableClientRect,\n): MoveableClientRect {\n    const isRoot = el === getDocumentBody(el) || el === getDocumentElement(el);\n\n\n    const extendsRect = {\n        clientLeft: el.clientLeft,\n        clientTop: el.clientTop,\n        clientWidth: el.clientWidth,\n        clientHeight: el.clientHeight,\n        scrollWidth: el.scrollWidth,\n        scrollHeight: el.scrollHeight,\n        overflow: false,\n    };\n\n    if (isRoot) {\n        extendsRect.clientHeight = Math.max(rect.height, extendsRect.clientHeight);\n        extendsRect.scrollHeight = Math.max(rect.height, extendsRect.scrollHeight);\n    }\n\n    extendsRect.overflow = getCachedStyle(el)(\"overflow\") !== \"visible\";\n\n    return {\n        ...rect,\n        ...extendsRect,\n    };\n}\n\nexport function getClientRectByPosition(\n    position: { left: number, right: number, top: number, bottom: number },\n    base: MoveableClientRect,\n    el?: HTMLElement | SVGElement, isExtends?: boolean,\n) {\n    const {\n        left,\n        right,\n        top,\n        bottom,\n    } = position;\n    const baseTop = base.top;\n    const baseLeft = base.left;\n\n    const rect: MoveableClientRect = {\n        left: baseLeft + left,\n        top: baseTop + top,\n        right: baseLeft + right,\n        bottom: baseTop + bottom,\n        width: right - left,\n        height: bottom - top,\n    };\n\n\n    if (el && isExtends) {\n        return getExtendsRect(el, rect);\n    }\n    return rect;\n}\nexport function getClientRect(el: HTMLElement | SVGElement, isExtends?: boolean): MoveableClientRect {\n    let left = 0;\n    let top = 0;\n    let width = 0;\n    let height = 0;\n    // let isRoot = false;\n\n    if (el) {\n        const clientRect = el.getBoundingClientRect();\n\n        left = clientRect.left;\n        top = clientRect.top;\n        width = clientRect.width;\n        height = clientRect.height;\n    }\n\n    const rect: MoveableClientRect = {\n        left,\n        top,\n        width,\n        height,\n        right: left + width,\n        bottom: top + height,\n    };\n\n    if (el && isExtends) {\n        return getExtendsRect(el, rect);\n    }\n    return rect;\n}\n\n\nexport function getTotalOrigin(moveable: MoveableManagerInterface<any>) {\n    const {\n        groupable,\n        svgOrigin,\n    } = moveable.props;\n    const {\n        offsetWidth,\n        offsetHeight,\n        svg,\n        transformOrigin,\n    } = moveable.getState();\n\n    if (!groupable && svg && svgOrigin) {\n        return convertTransformOriginArray(svgOrigin, offsetWidth, offsetHeight);\n    }\n\n    return transformOrigin;\n}\n\n\nexport function getTotalDirection(\n    parentDirection: number[],\n    isPinch: boolean,\n    inputEvent: any,\n    datas: any,\n) {\n    let direction: number[] | undefined;\n\n    if (parentDirection) {\n        direction = parentDirection;\n    } else if (isPinch) {\n        direction = [0, 0];\n    } else {\n        const target = inputEvent.target;\n\n        direction = getDirection(target, datas);\n    }\n    return direction;\n}\nexport function getDirection(target: SVGElement | HTMLElement, datas: any) {\n    if (!target) {\n        return;\n    }\n    const deg = target.getAttribute(\"data-rotation\") || \"\";\n    const direciton = target.getAttribute(\"data-direction\")!;\n\n    datas.deg = deg;\n\n    if (!direciton) {\n        return;\n    }\n    const dir = [0, 0];\n\n    (direciton.indexOf(\"w\") > -1) && (dir[0] = -1);\n    (direciton.indexOf(\"e\") > -1) && (dir[0] = 1);\n    (direciton.indexOf(\"n\") > -1) && (dir[1] = -1);\n    (direciton.indexOf(\"s\") > -1) && (dir[1] = 1);\n\n    return dir;\n}\nexport function getAbsolutePoses(poses: number[][], dist: number[]) {\n    return [\n        plus(dist, poses[0]),\n        plus(dist, poses[1]),\n        plus(dist, poses[2]),\n        plus(dist, poses[3]),\n    ];\n}\nexport function getAbsolutePosesByState({\n    left,\n    top,\n    pos1,\n    pos2,\n    pos3,\n    pos4,\n}: {\n    left: number,\n    top: number,\n    pos1: number[],\n    pos2: number[],\n    pos3: number[],\n    pos4: number[],\n}) {\n    return getAbsolutePoses([pos1, pos2, pos3, pos4], [left, top]);\n}\n\nexport function roundSign(num: number) {\n    return Math.round(num % 1 === -0.5 ? num - 1 : num);\n}\n\nexport function unsetAbles(self: MoveableManagerInterface, isControl: boolean) {\n    self[isControl ? \"controlAbles\" : \"targetAbles\"].forEach(able => {\n        able.unset && able.unset(self);\n    });\n}\nexport function unsetGesto(self: MoveableManagerInterface, isControl: boolean) {\n    const gestoName = isControl ? \"controlGesto\" : \"targetGesto\";\n    const gesto = self[gestoName];\n\n    if (gesto?.isIdle() === false) {\n        unsetAbles(self, isControl);\n    }\n    gesto?.unset();\n    self[gestoName] = null as any;\n}\n\nexport function fillCSSObject(style: Record<string, any>, resolvedEvent?: any): CSSObject {\n    if (resolvedEvent) {\n        const originalDatas = getBeforeRenderableDatas(resolvedEvent);\n\n        originalDatas.nextStyle = {\n            ...originalDatas.nextStyle,\n            ...style,\n        };\n    }\n    return {\n        style,\n        cssText: getKeys(style).map(name => `${decamelize(name, \"-\")}: ${style[name]};`).join(\"\"),\n    };\n}\n\nexport function fillAfterTransform(\n    prevEvent: { style: Record<string, string>, transform: string },\n    nextEvent: { style: Record<string, string>, transform: string, afterTransform?: string },\n    resolvedEvent?: any\n): TransformObject {\n    const afterTransform = nextEvent.afterTransform || nextEvent.transform;\n\n    return {\n        ...fillCSSObject({\n            ...prevEvent.style,\n            ...nextEvent.style,\n            transform: afterTransform,\n        }, resolvedEvent),\n        afterTransform,\n        transform: prevEvent.transform,\n    };\n}\n\nexport function fillParams<T extends IObject<any>>(\n    moveable: any,\n    e: any,\n    params: ExcludeParams<T>,\n    isBeforeEvent?: boolean,\n): T {\n    const datas = e.datas;\n\n    if (!datas.datas) {\n        datas.datas = {};\n    }\n    const nextParams = {\n        ...params,\n        target: moveable.state.target,\n        clientX: e.clientX,\n        clientY: e.clientY,\n        inputEvent: e.inputEvent,\n        currentTarget: moveable,\n        moveable,\n        datas: datas.datas,\n        isRequest: e.isRequest,\n        isRequestChild: e.isRequestChild,\n        isFirstDrag: !!e.isFirstDrag,\n        isTrusted: e.isTrusted !== false,\n        stopAble() {\n            datas.isEventStart = false;\n        },\n        stopDrag() {\n            e.stop?.();\n        },\n    } as any;\n\n    if (!datas.isStartEvent) {\n        datas.isStartEvent = true;\n    } else if (!isBeforeEvent) {\n        datas.lastEvent = nextParams;\n    }\n    return nextParams;\n}\nexport function fillEndParams<T extends IObject<any>>(\n    moveable: any,\n    e: any,\n    params: ExcludeEndParams<T> & { isDrag?: boolean },\n): T {\n    const datas = e.datas;\n    const isDrag = \"isDrag\" in params ? params.isDrag : e.isDrag;\n\n    if (!datas.datas) {\n        datas.datas = {};\n    }\n\n    return {\n        isDrag,\n        ...params,\n        moveable,\n        target: moveable.state.target,\n        clientX: e.clientX,\n        clientY: e.clientY,\n        inputEvent: e.inputEvent,\n        currentTarget: moveable,\n        lastEvent: datas.lastEvent,\n        isDouble: e.isDouble,\n        datas: datas.datas,\n        isFirstDrag: !!e.isFirstDrag,\n    } as any;\n}\nexport function catchEvent<EventName extends keyof Props, Props extends IObject<any> = MoveableProps>(\n    moveable: any,\n    name: EventName,\n    callback: (e: Props[EventName] extends ((e: infer P) => any) | undefined ? P : IObject<any>) => void,\n): any {\n    moveable._emitter.on(name, callback);\n}\n\nexport function triggerEvent<EventName extends keyof Props, Props extends IObject<any> = MoveableProps>(\n    moveable: any,\n    name: EventName,\n    params: Props[EventName] extends ((e: infer P) => any) | undefined ? P : IObject<any>,\n    isManager?: boolean,\n    isRequest?: boolean,\n): any {\n    return moveable.triggerEvent(\n        name,\n        params,\n        isManager,\n        isRequest,\n    );\n}\n\nexport function getComputedStyle(el: Element, pseudoElt?: string | null) {\n    return getWindow(el).getComputedStyle(el, pseudoElt);\n}\n\nexport function filterAbles(\n    ables: Able[], methods: Array<keyof Able>,\n    triggerAblesSimultaneously?: boolean,\n) {\n    const enabledAbles: IObject<boolean> = {};\n    const ableGroups: IObject<boolean> = {};\n\n    return ables.filter(able => {\n        const name = able.name;\n\n        if (enabledAbles[name] || !methods.some(method => able[method])) {\n            return false;\n        }\n        if (!triggerAblesSimultaneously && able.ableGroup) {\n            if (ableGroups[able.ableGroup]) {\n                return false;\n            }\n            ableGroups[able.ableGroup] = true;\n        }\n        enabledAbles[name] = true;\n        return true;\n    });\n}\n\nexport function equals(a1: any, a2: any) {\n    return a1 === a2 || (a1 == null && a2 == null);\n}\n\nexport function selectValue<T = any>(...values: any[]): T {\n    const length = values.length - 1;\n    for (let i = 0; i < length; ++i) {\n        const value = values[i];\n\n        if (!isUndefined(value)) {\n            return value;\n        }\n    }\n\n    return values[length];\n}\n\nexport function groupBy<T>(arr: T[], func: (el: T, index: number, arr: T[]) => any) {\n    const groups: T[][] = [];\n    const groupKeys: any[] = [];\n\n    arr.forEach((el, index) => {\n        const groupKey = func(el, index, arr);\n        const keyIndex = groupKeys.indexOf(groupKey);\n        const group = groups[keyIndex] || [];\n\n        if (keyIndex === -1) {\n            groupKeys.push(groupKey);\n            groups.push(group);\n        }\n        group.push(el);\n    });\n    return groups;\n}\nexport function groupByMap<T>(arr: T[], func: (el: T, index: number, arr: T[]) => string | number) {\n    const groups: T[][] = [];\n    const groupKeys: IObject<T[]> = {};\n\n    arr.forEach((el, index) => {\n        const groupKey = func(el, index, arr);\n        let group = groupKeys[groupKey];\n\n        if (!group) {\n            group = [];\n            groupKeys[groupKey] = group;\n            groups.push(group);\n        }\n        group.push(el);\n    });\n    return groups;\n}\nexport function flat<T>(arr: T[][]): T[] {\n    return arr.reduce((prev, cur) => {\n        return prev.concat(cur);\n    }, []);\n}\n\nexport function equalSign(a: number, b: number) {\n    return (a >= 0 && b >= 0) || (a < 0 && b < 0);\n}\n\nexport function maxOffset(...args: number[]) {\n    args.sort((a, b) => abs(b) - abs(a));\n\n    return args[0];\n}\nexport function minOffset(...args: number[]) {\n    args.sort((a, b) => abs(a) - abs(b));\n\n    return args[0];\n}\n\nexport function calculateInversePosition(matrix: number[], pos: number[], n: number) {\n    return calculate(\n        invert(matrix, n),\n        convertPositionMatrix(pos, n),\n        n,\n    );\n}\nexport function convertDragDist(state: MoveableManagerState, e: any) {\n    const {\n        is3d,\n        rootMatrix,\n    } = state;\n    const n = is3d ? 4 : 3;\n    [\n        e.distX, e.distY,\n    ] = calculateInversePosition(rootMatrix, [e.distX, e.distY], n);\n\n    return e;\n}\n\nexport function calculatePadding(\n    matrix: number[],\n    pos: number[],\n    added: number[],\n    n: number,\n) {\n    if (!added[0] && !added[1]) {\n        return pos;\n    }\n\n    const xAdded = calculatePosition(matrix, [normalized(added[0] || 1), 0], n);\n    const yAdded = calculatePosition(matrix, [0, normalized(added[1] || 1)], n);\n    const nextAdded = calculatePosition(matrix, [\n        added[0] / getDistSize(xAdded),\n        added[1] / getDistSize(yAdded),\n    ], n);\n\n    return plus(pos, nextAdded);\n}\n\nexport function convertCSSSize(value: number, size: number, isRelative?: boolean) {\n    return isRelative ? `${value / size * 100}%` : `${value}px`;\n}\n\nexport function getTinyDist(v: number) {\n    return abs(v) <= TINY_NUM ? 0 : v;\n}\n\nexport function viewDraggingPrefix(ableName: string) {\n    return prefix(`${ableName}-view-dragging`);\n}\nexport function getDirectionViewClassName(ableName: string) {\n    return (moveable: MoveableManagerInterface) => {\n        if (!moveable.isDragging(ableName)) {\n            return \"\";\n        }\n        const data = getGestoData(moveable, ableName);\n        const deg = data.deg;\n        if (!deg) {\n            return \"\";\n        }\n        return prefix(`view-control-rotation${deg}`);\n    };\n}\nexport function getDirectionCondition(ableName: string, checkAbles: string[] = [ableName]) {\n    return (moveable: any, e: any) => {\n        if (e.isRequest) {\n            if (checkAbles.some(name => e.requestAble === name)) {\n                return e.parentDirection!;\n            } else {\n                return false;\n            }\n        }\n        const target = e.inputEvent.target;\n\n        return hasClass(target, prefix(\"direction\")) && (!ableName || hasClass(target, prefix(ableName)));\n    };\n}\n\nexport function convertTransformInfo(transforms: string[], state: MoveableManagerState, index: number) {\n    const matrixInfos = parse(transforms, {\n        \"x%\": v => v / 100 * state.offsetWidth,\n        \"y%\": v => v / 100 * state.offsetHeight,\n    });\n\n    const beforeFunctionTexts = transforms.slice(0, index < 0 ? undefined : index);\n    const beforeFunctionTexts2 = transforms.slice(0, index < 0 ? undefined : index + 1);\n    const targetFunctionText = transforms[index] || \"\";\n    const afterFunctionTexts = index < 0 ? [] : transforms.slice(index);\n    const afterFunctionTexts2 = index < 0 ? [] : transforms.slice(index + 1);\n\n    const beforeFunctions = matrixInfos.slice(0, index < 0 ? undefined : index);\n    const beforeFunctions2 = matrixInfos.slice(0, index < 0 ? undefined : index + 1);\n    const targetFunction = matrixInfos[index] ?? parse([\"\"])[0];\n    const afterFunctions = index < 0 ? [] : matrixInfos.slice(index);\n    const afterFunctions2 = index < 0 ? [] : matrixInfos.slice(index + 1);\n    const targetFunctions = targetFunction ? [targetFunction] : [];\n\n\n    const beforeFunctionMatrix = toMat(beforeFunctions);\n    const beforeFunctionMatrix2 = toMat(beforeFunctions2);\n    const afterFunctionMatrix = toMat(afterFunctions);\n    const afterFunctionMatrix2 = toMat(afterFunctions2);\n    const allFunctionMatrix = multiply(\n        beforeFunctionMatrix,\n        afterFunctionMatrix,\n        4,\n    );\n    return {\n        transforms,\n        beforeFunctionMatrix,\n        beforeFunctionMatrix2,\n        targetFunctionMatrix: toMat(targetFunctions),\n        afterFunctionMatrix,\n        afterFunctionMatrix2,\n        allFunctionMatrix,\n        beforeFunctions,\n        beforeFunctions2,\n        targetFunction: targetFunctions[0],\n        afterFunctions,\n        afterFunctions2,\n        beforeFunctionTexts,\n        beforeFunctionTexts2,\n        targetFunctionText,\n        afterFunctionTexts,\n        afterFunctionTexts2,\n    };\n}\n\nexport function isArrayFormat<T = any>(arr: any): arr is ArrayFormat<T> {\n    if (!arr || !isObject(arr)) {\n        return false;\n    }\n    if (isNode(arr)) {\n        return false;\n    }\n    return isArray(arr) || \"length\" in arr;\n}\n\nexport function getRefTarget<T extends Element = HTMLElement | SVGElement>(\n    target: MoveableRefType<T> | Window, isSelector: true): T | null;\nexport function getRefTarget<T extends Element = HTMLElement | SVGElement>(\n    target: MoveableRefType<T> | Window, isSelector?: boolean): T | string | null;\nexport function getRefTarget<T extends Element = HTMLElement | SVGElement>(\n    target: MoveableRefType<T> | Window,\n    isSelector?: boolean,\n): any {\n    if (!target) {\n        return null;\n    }\n    if (isNode(target)) {\n        return target;\n    }\n    if (isString(target)) {\n        if (isSelector) {\n            return document.querySelector(target);\n        }\n        return target;\n    }\n    if (isFunction(target)) {\n        return target();\n    }\n    if (isWindow(target)) {\n        return target;\n    }\n    if (\"current\" in target) {\n        return target.current;\n    }\n    return target;\n}\n\nexport function getRefTargets(\n    targets: MoveableRefTargetType,\n    isSelector: true): Array<HTMLElement | SVGElement | null>;\nexport function getRefTargets(\n    targets: MoveableRefTargetType,\n    isSelector?: boolean): MoveableRefTargetsResultType;\nexport function getRefTargets(targets: MoveableRefTargetType, isSelector?: boolean): any[] {\n    if (!targets) {\n        return [];\n    }\n    const userTargets = isArrayFormat(targets) ? [].slice.call(targets) : [targets];\n\n    return userTargets.reduce((prev, target) => {\n        if (isString(target) && isSelector) {\n            return [...prev, ...[].slice.call(document.querySelectorAll<HTMLElement>(target))];\n        }\n        if (isArray(target)) {\n            prev.push(getRefTargets(target, isSelector));\n        } else {\n            prev.push(getRefTarget(target, isSelector));\n        }\n        return prev;\n    }, [] as MoveableRefTargetsResultType);\n}\n\nexport function minmax(...values: number[]) {\n    return [Math.min(...values), Math.max(...values)];\n}\n\n\nexport function getAbsoluteRotation(pos1: number[], pos2: number[], direction: number) {\n    let deg = getRad(pos1, pos2) / Math.PI * 180;\n\n    deg = direction >= 0 ? deg : 180 - deg;\n    deg = deg >= 0 ? deg : 360 + deg;\n\n    return deg;\n}\n\n\nexport function getDragDistByState(state: MoveableManagerState, dist: number[]) {\n    const {\n        rootMatrix,\n        is3d,\n    } = state;\n    const n = is3d ? 4 : 3;\n\n    let inverseMatrix = invert(rootMatrix, n);\n\n    if (!is3d) {\n        inverseMatrix = convertDimension(inverseMatrix, 3, 4);\n    }\n    inverseMatrix[12] = 0;\n    inverseMatrix[13] = 0;\n    inverseMatrix[14] = 0;\n\n    return calculateMatrixDist(inverseMatrix, dist);\n}\n\nexport function getSizeDistByDist(\n    startSize: number[],\n    dist: number[],\n    ratio: number,\n    direction: number[],\n    keepRatio?: boolean,\n) {\n    const [startOffsetWidth, startOffsetHeight] = startSize;\n    let distWidth = 0;\n    let distHeight = 0;\n\n    if (keepRatio && startOffsetWidth && startOffsetHeight) {\n        const rad = getRad([0, 0], dist);\n        const standardRad = getRad([0, 0], direction);\n        const size = getDistSize(dist);\n        const signSize = Math.cos(rad - standardRad) * size;\n\n        if (!direction[0]) {\n            // top, bottom\n            distHeight = signSize;\n            distWidth = distHeight * ratio;\n        } else if (!direction[1]) {\n            // left, right\n            distWidth = signSize;\n            distHeight = distWidth / ratio;\n        } else {\n            // two-way\n            const startWidthSize = direction[0] * startOffsetWidth;\n            const startHeightSize = direction[1] * startOffsetHeight;\n\n            let secondRad = Math.atan2(startWidthSize + dist[0], startHeightSize + dist[1]);\n            let firstRad = Math.atan2(startWidthSize, startHeightSize);\n\n            if (secondRad < 0) {\n                secondRad += Math.PI * 2;\n            }\n            if (firstRad < 0) {\n                firstRad += Math.PI * 2;\n            }\n            let rad = 0;\n\n            if (abs(secondRad - firstRad) < Math.PI / 2 || abs(secondRad - firstRad) > Math.PI / 2 * 3) {\n                rad = secondRad - firstRad;\n            } else {\n                firstRad += Math.PI;\n                rad = secondRad - firstRad;\n            }\n            if (rad > Math.PI * 2) {\n                rad -= Math.PI * 2;\n            } else if (rad > Math.PI) {\n                rad = 2 * Math.PI - rad;\n            } else if (rad < -Math.PI) {\n                rad = -2 * Math.PI - rad;\n            }\n            //       180\n            // -1, -1,  // 1, -1\n            // 270            90\n            // -1, 1    // 1, 1\n            //       0\n            const distSize = getDistSize([startWidthSize + dist[0], startHeightSize + dist[1]]) * Math.cos(rad);\n\n            distWidth = distSize * Math.sin(firstRad) - startWidthSize;\n            distHeight = distSize * Math.cos(firstRad) - startHeightSize;\n\n            if (direction[0] < 0) {\n                distWidth *= -1;\n            }\n            if (direction[1] < 0) {\n                distHeight *= -1;\n            }\n        }\n    } else {\n        distWidth = direction[0] * dist[0];\n        distHeight = direction[1] * dist[1];\n    }\n\n    return [distWidth, distHeight];\n}\nexport function getOffsetSizeDist(\n    sizeDirection: number[],\n    keepRatio: boolean,\n    datas: any,\n    e: any,\n) {\n    const {\n        ratio,\n        startOffsetWidth,\n        startOffsetHeight,\n    } = datas;\n    let distWidth = 0;\n    let distHeight = 0;\n    const {\n        distX,\n        distY,\n        pinchScale,\n        parentDistance,\n        parentDist,\n        parentScale,\n    } = e;\n    const startFixedDirection = datas.fixedDirection;\n    const directionsDists = [0, 1].map(index => {\n        return abs(sizeDirection[index] - startFixedDirection[index]);\n    });\n    const directionRatios = [0, 1].map(index => {\n        let dist = directionsDists[index];\n\n        if (dist !== 0) {\n            dist = 2 / dist;\n        }\n        return dist;\n    });\n    if (parentDist) {\n        distWidth = parentDist[0];\n        distHeight = parentDist[1];\n\n        if (keepRatio) {\n            if (!distWidth) {\n                distWidth = distHeight * ratio;\n            } else if (!distHeight) {\n                distHeight = distWidth / ratio;\n            }\n        }\n    } else if (isNumber(pinchScale)) {\n        distWidth = (pinchScale - 1) * startOffsetWidth;\n        distHeight = (pinchScale - 1) * startOffsetHeight;\n    } else if (parentScale) {\n        distWidth = (parentScale[0] - 1) * startOffsetWidth;\n        distHeight = (parentScale[1] - 1) * startOffsetHeight;\n    } else if (parentDistance) {\n        const scaleX = startOffsetWidth * directionsDists[0];\n        const scaleY = startOffsetHeight * directionsDists[1];\n        const ratioDistance = getDistSize([scaleX, scaleY]);\n\n        distWidth = parentDistance / ratioDistance * scaleX * directionRatios[0];\n        distHeight = parentDistance / ratioDistance * scaleY * directionRatios[1];\n    } else {\n        let dist = getDragDist({ datas, distX, distY });\n\n        dist = directionRatios.map((ratio, i) => {\n            return dist[i] * ratio;\n        });\n\n        [distWidth, distHeight] = getSizeDistByDist(\n            [startOffsetWidth, startOffsetHeight],\n            dist,\n            ratio,\n            sizeDirection,\n            keepRatio,\n        );\n    }\n    return {\n        // direction,\n        // sizeDirection,\n        distWidth,\n        distHeight,\n    };\n}\n\nexport function convertTransformUnit(\n    origin: string,\n    xy?: boolean,\n): { x?: string; y?: string; value?: string; } {\n    if (xy) {\n        if (origin === \"left\") {\n            return { x: \"0%\", y: \"50%\" };\n        } else if (origin === \"top\") {\n            return { x: \"50%\", y: \"50%\" };\n        } else if (origin === \"center\") {\n            return { x: \"50%\", y: \"50%\" };\n        } else if (origin === \"right\") {\n            return { x: \"100%\", y: \"50%\" };\n        } else if (origin === \"bottom\") {\n            return { x: \"50%\", y: \"100%\" };\n        }\n        const [left, right] = origin.split(\" \");\n        const leftOrigin = convertTransformUnit(left || \"\");\n        const rightOrigin = convertTransformUnit(right || \"\");\n        const originObject = {\n            ...leftOrigin,\n            ...rightOrigin,\n        };\n\n        const nextOriginObject = {\n            x: \"50%\",\n            y: \"50%\",\n        };\n        if (originObject.x) {\n            nextOriginObject.x = originObject.x;\n        }\n        if (originObject.y) {\n            nextOriginObject.y = originObject.y;\n        }\n        if (originObject.value) {\n            if (originObject.x && !originObject.y) {\n                nextOriginObject.y = originObject.value;\n            }\n            if (!originObject.x && originObject.y) {\n                nextOriginObject.x = originObject.value;\n            }\n        }\n        return nextOriginObject;\n    }\n    if (origin === \"left\") {\n        return { x: \"0%\" };\n    }\n    if (origin === \"right\") {\n        return { x: \"100%\" };\n    }\n    if (origin === \"top\") {\n        return { y: \"0%\" };\n    }\n    if (origin === \"bottom\") {\n        return { y: \"100%\" };\n    }\n    if (!origin) {\n        return {};\n    }\n    if (origin === \"center\") {\n        return { value: \"50%\" };\n    }\n    return { value: origin };\n}\nexport function convertTransformOriginArray(transformOrigin: string, width: number, height: number) {\n    const { x, y } = convertTransformUnit(transformOrigin, true);\n\n    return [\n        convertUnitSize(x!, width) || 0,\n        convertUnitSize(y!, height) || 0,\n    ];\n}\n\nexport function rotatePosesInfo(poses: number[][], origin: number[], rad: number) {\n    const prevPoses = poses.map((pos) => minus(pos, origin));\n    const nextPoses = prevPoses.map((pos) => rotate(pos, rad));\n\n    return {\n        prev: prevPoses,\n        next: nextPoses,\n        result: nextPoses.map(pos => plus(pos, origin)),\n    };\n}\n\n\n\nexport function isDeepArrayEquals(arr1: any[], arr2: any[]): boolean {\n    return arr1.length === arr2.length && arr1.every((value1, i) => {\n        const value2 = arr2[i];\n        const isArray1 = isArray(value1);\n        const isArray2 = isArray(value2);\n        if (isArray1 && isArray2) {\n            return isDeepArrayEquals(value1, value2);\n        } else if (!isArray1 && !isArray2) {\n            return value1 === value2;\n        }\n        return false;\n    });\n}\n\n\nexport function watchValue<T>(\n    moveable: any,\n    property: string,\n    nextValue: T,\n    valueKey: (value: T) => string | number,\n    defaultValue?: T,\n): T {\n    const store = (moveable as any)._store;\n    let prevValue = store[property];\n\n    if (!(property in store)) {\n        if (defaultValue != null) {\n            store[property] = defaultValue;\n            prevValue = defaultValue;\n        } else {\n            store[property] = nextValue;\n            return nextValue;\n        }\n    }\n    if (prevValue === nextValue || valueKey(prevValue) === valueKey(nextValue)) {\n        return prevValue;\n    }\n\n    store[property] = nextValue;\n    return nextValue;\n}\n\n\nexport function sign(value: number) {\n    return value >= 0 ? 1 : -1;\n}\n\n\nexport function abs(value: number) {\n    return Math.abs(value);\n}\n\n\nexport function countEach<T>(count: number, callback: (index: number) => T): T[] {\n    return counter(count).map(index => callback(index));\n}\n\n\nexport function getPaddingBox(padding: PaddingBox | number) {\n    if (isNumber(padding)) {\n        return {\n            top: padding,\n            left: padding,\n            right: padding,\n            bottom: padding,\n        };\n    }\n\n    return {\n        left: padding.left || 0,\n        top: padding.top || 0,\n        right: padding.right || 0,\n        bottom: padding.bottom || 0,\n    };\n}\n", "import { makeAble } from \"./AbleManager\";\nimport { triggerEvent, fillParams, fillEndParams } from \"../utils\";\nimport {\n    PinchableProps, Able, SnappableState,\n    OnPinchStart, OnPinch, OnPinchEnd, MoveableManagerInterface, MoveableGroupInterface,\n} from \"../types\";\n\n/**\n * @namespace Moveable.Pinchable\n * @description Whether or not target can be pinched with draggable, resizable, scalable, rotatable (default: false)\n */\nexport default makeAble(\"pinchable\", {\n    props: [\n        \"pinchable\",\n    ] as const,\n    events: [\n        \"pinchStart\",\n        \"pinch\",\n        \"pinchEnd\",\n        \"pinchGroupStart\",\n        \"pinchGroup\",\n        \"pinchGroupEnd\",\n    ] as const,\n    dragStart() {\n        return true;\n    },\n    pinchStart(\n        moveable: MoveableManagerInterface<PinchableProps, SnappableState>,\n        e: any,\n    ) {\n        const { datas, targets, angle, originalDatas } = e;\n        const { pinchable, ables } = moveable.props;\n\n        if (!pinchable) {\n            return false;\n        }\n        const eventName = `onPinch${targets ? \"Group\" : \"\"}Start` as \"onPinchStart\";\n        const controlEventName = `drag${targets ? \"Group\" : \"\"}ControlStart` as \"dragControlStart\";\n\n        const pinchAbles = (pinchable === true ? moveable.controlAbles : ables!.filter(able => {\n            return pinchable.indexOf(able.name as any) > -1;\n        })).filter(able => able.canPinch && able[controlEventName]);\n\n        const params = fillParams<OnPinchStart>(moveable, e, {}) as any;\n\n        if (targets) {\n            params.targets = targets;\n        }\n        const result = triggerEvent(moveable, eventName, params);\n\n        datas.isPinch = result !== false;\n        datas.ables = pinchAbles;\n\n        const isPinch = datas.isPinch;\n\n        if (!isPinch) {\n            return false;\n        }\n        pinchAbles.forEach(able => {\n            originalDatas[able.name] = originalDatas[able.name] || {};\n\n            if (!able[controlEventName]) {\n                return;\n            }\n            const ableEvent: any = {\n                ...e,\n                datas: originalDatas[able.name],\n                parentRotate: angle,\n                isPinch: true,\n            };\n            able[controlEventName]!(moveable, ableEvent);\n        });\n\n        moveable.state.snapRenderInfo = {\n            request: e.isRequest,\n            direction: [0, 0],\n        };\n        return isPinch;\n    },\n    pinch(\n        moveable: MoveableManagerInterface<PinchableProps>,\n        e: any,\n    ) {\n        const {\n            datas, scale: pinchScale, distance,\n            originalDatas,\n            inputEvent, targets,\n            angle,\n        } = e;\n        if (!datas.isPinch) {\n            return;\n        }\n        const parentDistance = distance * (1 - 1 / pinchScale);\n        const params = fillParams<OnPinch>(moveable, e, {}) as any;\n\n        if (targets) {\n            params.targets = targets;\n        }\n        const eventName = `onPinch${targets ? \"Group\" : \"\"}` as \"onPinch\";\n        triggerEvent(moveable, eventName, params);\n\n        const ables: Able[] = datas.ables;\n        const controlEventName = `drag${targets ? \"Group\" : \"\"}Control` as \"dragControl\";\n\n        ables.forEach(able => {\n            if (!able[controlEventName]) {\n                return;\n            }\n            able[controlEventName]!(moveable, {\n                ...e,\n                datas: originalDatas[able.name],\n                inputEvent,\n                resolveMatrix: true,\n                pinchScale: pinchScale,\n                parentDistance,\n                parentRotate: angle,\n                isPinch: true,\n            } as any);\n        });\n        return params;\n    },\n    pinchEnd(\n        moveable: MoveableManagerInterface<PinchableProps>,\n        e: any,\n    ) {\n        const { datas, isPinch, inputEvent, targets, originalDatas } = e;\n        if (!datas.isPinch) {\n            return;\n        }\n        const eventName = `onPinch${targets ? \"Group\" : \"\"}End` as \"onPinchEnd\";\n\n        const params = fillEndParams<OnPinchEnd>(moveable, e, { isDrag: isPinch }) as any;\n\n        if (targets) {\n            params.targets = targets;\n        }\n        triggerEvent(moveable, eventName, params);\n        const ables: Able[] = datas.ables;\n        const controlEventName = `drag${targets ? \"Group\" : \"\"}ControlEnd` as \"dragControlEnd\";\n\n        ables.forEach(able => {\n            if (!able[controlEventName]) {\n                return;\n            }\n            able[controlEventName]!(moveable, {\n                ...e,\n                isDrag: isPinch,\n                datas: originalDatas[able.name],\n                inputEvent,\n                isPinch: true,\n            } as any);\n        });\n        return isPinch;\n    },\n    pinchGroupStart(moveable: MoveableGroupInterface<any, any>, e: any) {\n        return this.pinchStart!(moveable, { ...e, targets: moveable.props.targets });\n    },\n    pinchGroup(moveable: MoveableGroupInterface, e: any) {\n        return this.pinch!(moveable, { ...e, targets: moveable.props.targets });\n    },\n    pinchGroupEnd(moveable: MoveableGroupInterface, e: any) {\n        return this.pinchEnd!(moveable, { ...e, targets: moveable.props.targets });\n    },\n});\n\n/**\n * Whether or not target can be pinched with draggable, resizable, scalable, rotatable (default: false)\n * @name Moveable.Pinchable#pinchable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.pinchable = true;\n */\n\n/**\n * When the pinch starts, the pinchStart event is called with part of scaleStart, rotateStart, resizeStart\n * @memberof Moveable.Pinchable\n * @event pinchStart\n * @param {Moveable.Pinchable.OnPinchStart} - Parameters for the pinchStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     rotatable: true,\n *     scalable: true,\n *     pinchable: true, // [\"rotatable\", \"scalable\"]\n * });\n * moveable.on(\"pinchStart\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"rotateStart\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"scaleStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n/**\n * When pinching, the pinch event is called with part of scale, rotate, resize\n * @memberof Moveable.Pinchable\n * @event pinch\n * @param {Moveable.Pinchable.OnPinch} - Parameters for the pinch event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     rotatable: true,\n *     scalable: true,\n *     pinchable: true, // [\"rotatable\", \"scalable\"]\n * });\n * moveable.on(\"pinch\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"rotate\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"scale\", ({ target }) => {\n *     console.log(target);\n * });\n */\n/**\n * When the pinch finishes, the pinchEnd event is called.\n * @memberof Moveable.Pinchable\n * @event pinchEnd\n * @param {Moveable.Pinchable.OnPinchEnd} - Parameters for the pinchEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     rotatable: true,\n *     scalable: true,\n *     pinchable: true, // [\"rotatable\", \"scalable\"]\n * });\n * moveable.on(\"pinchEnd\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"rotateEnd\", ({ target }) => {\n *     console.log(target);\n * });\n * moveable.on(\"scaleEnd\", ({ target }) => {\n *     console.log(target);\n * });\n */\n\n/**\n * When the group pinch starts, the `pinchGroupStart` event is called.\n * @memberof Moveable.Pinchable\n * @event pinchGroupStart\n * @param {Moveable.Pinchable.OnPinchGroupStart} - Parameters for the `pinchGroupStart` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n *     pinchable: true\n * });\n * moveable.on(\"pinchGroupStart\", ({ targets }) => {\n *     console.log(\"onPinchGroupStart\", targets);\n * });\n */\n\n/**\n * When the group pinch, the `pinchGroup` event is called.\n * @memberof Moveable.Pinchable\n * @event pinchGroup\n * @param {Moveable.Pinchable.OnPinchGroup} - Parameters for the `pinchGroup` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n *     pinchable: true\n * });\n * moveable.on(\"pinchGroup\", ({ targets, events }) => {\n *     console.log(\"onPinchGroup\", targets);\n * });\n */\n\n/**\n * When the group pinch finishes, the `pinchGroupEnd` event is called.\n * @memberof Moveable.Pinchable\n * @event pinchGroupEnd\n * @param {Moveable.Pinchable.OnPinchGroupEnd} - Parameters for the `pinchGroupEnd` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n *     pinchable: true\n * });\n * moveable.on(\"pinchGroupEnd\", ({ targets, isDrag }) => {\n *     console.log(\"onPinchGroupEnd\", targets, isDrag);\n * });\n */\n", "import {\n    triggerEvent, multiply2,\n    fillParams, fillEndParams, getAbsolutePosesByState,\n    catchEvent, getOffsetSizeDist, getDirectionCondition,\n    getDirectionViewClassName, getTotalDirection, sign, countEach, abs,\n} from \"../utils\";\nimport { MIN_SCALE } from \"../consts\";\nimport {\n    setDragStart, resolveTransformEvent,\n    convertTransformFormat,\n    getScaleDist,\n    fillTransformStartEvent,\n    fillTransformEvent,\n    setDefaultTransformIndex,\n    getTranslateFixedPosition,\n} from \"../gesto/GestoUtils\";\nimport { getRenderDirections } from \"../renderDirections\";\nimport {\n    ScalableProps, OnScaleGroup, OnScaleGroupEnd,\n    OnScaleGroupStart, DraggableProps, OnDragStart,\n    SnappableState, GroupableProps, OnScaleStart,\n    OnScale, OnScaleEnd, MoveableManagerInterface, MoveableGroupInterface,\n    OnBeforeScaleGroup,\n    OnBeforeScale,\n} from \"../types\";\nimport {\n    fillChildEvents,\n    startChildDist,\n    triggerChildAbles,\n} from \"../groupUtils\";\nimport Draggable from \"./Draggable\";\nimport { calculate, createRotateMatrix, plus, minus } from \"@scena/matrix\";\nimport CustomGesto from \"../gesto/CustomGesto\";\nimport { checkSnapScale } from \"./Snappable\";\nimport {\n    isArray, IObject, getDist,\n    throttle,\n    calculateBoundSize,\n} from \"@daybrush/utils\";\nimport { getFixedDirectionInfo } from \"../utils/getFixedDirection\";\n\nconst directionCondition = getDirectionCondition(\"scalable\");\n\n/**\n * @namespace Scalable\n * @memberof Moveable\n * @description Scalable indicates whether the target's x and y can be scale of transform.\n */\nexport default {\n    name: \"scalable\",\n    ableGroup: \"size\",\n    canPinch: true,\n    props: [\n        \"scalable\",\n        \"throttleScale\",\n        \"renderDirections\",\n        \"keepRatio\",\n        \"edge\",\n        \"displayAroundControls\",\n    ] as const,\n    events: [\n        \"scaleStart\",\n        \"beforeScale\",\n        \"scale\",\n        \"scaleEnd\",\n        \"scaleGroupStart\",\n        \"beforeScaleGroup\",\n        \"scaleGroup\",\n        \"scaleGroupEnd\",\n    ] as const,\n    render: getRenderDirections(\"scalable\"),\n    dragControlCondition: directionCondition,\n    viewClassName: getDirectionViewClassName(\"scalable\"),\n    dragControlStart(\n        moveable: MoveableManagerInterface<ScalableProps & DraggableProps, SnappableState>,\n        e: any) {\n        const { datas, isPinch, inputEvent, parentDirection } = e;\n\n        const direction = getTotalDirection(\n            parentDirection,\n            isPinch,\n            inputEvent,\n            datas,\n        );\n        const {\n            width,\n            height,\n            targetTransform,\n            target,\n            pos1,\n            pos2,\n            pos4,\n        } = moveable.state;\n\n        if (!direction || !target) {\n            return false;\n        }\n        if (!isPinch) {\n            setDragStart(moveable, e);\n        }\n        datas.datas = {};\n        datas.transform = targetTransform;\n        datas.prevDist = [1, 1];\n        datas.direction = direction;\n        datas.startOffsetWidth = width;\n        datas.startOffsetHeight = height;\n        datas.startValue = [1, 1];\n\n        // const scaleWidth = getDist(pos1, pos2);\n        // const scaleHeight = getDist(pos2, pos4);\n        const isWidth = (!direction[0] && !direction[1]) || direction[0] || !direction[1];\n\n        // datas.scaleWidth = scaleWidth;\n        // datas.scaleHeight = scaleHeight;\n        // datas.scaleXRatio = scaleWidth / width;\n        // datas.scaleYRatio = scaleHeight / height;\n\n        setDefaultTransformIndex(moveable, e, \"scale\");\n\n        datas.isWidth = isWidth;\n\n\n        function setRatio(ratio: number) {\n            datas.ratio = ratio && isFinite(ratio) ? ratio : 0;\n        }\n\n        datas.startPositions = getAbsolutePosesByState(moveable.state);\n        function setFixedDirection(fixedDirection: number[]) {\n            const result = getFixedDirectionInfo(datas.startPositions, fixedDirection);\n\n            datas.fixedDirection = result.fixedDirection;\n            datas.fixedPosition = result.fixedPosition;\n            datas.fixedOffset = result.fixedOffset;\n        }\n\n        datas.setFixedDirection = setFixedDirection;\n        setRatio(getDist(pos1, pos2) / getDist(pos2, pos4));\n        setFixedDirection([-direction[0], -direction[1]]);\n\n        const setMinScaleSize = (min: number[]) => {\n            datas.minScaleSize = min;\n        };\n        const setMaxScaleSize = (max: number[]) => {\n            datas.maxScaleSize = max;\n        };\n        // const setMinScale = (min: number[]) => {\n        // };\n        // const setMaxScale = (max: number[]) => {\n        // };\n\n        setMinScaleSize([-Infinity, -Infinity]);\n        setMaxScaleSize([Infinity, Infinity]);\n        const params = fillParams<OnScaleStart>(moveable, e, {\n            direction,\n            set: (scale: number[]) => {\n                datas.startValue = scale;\n            },\n            setRatio,\n            setFixedDirection,\n            setMinScaleSize,\n            setMaxScaleSize,\n            ...fillTransformStartEvent(moveable, e),\n            dragStart: Draggable.dragStart(\n                moveable,\n                new CustomGesto().dragStart([0, 0], e),\n            ) as OnDragStart,\n        });\n        const result = triggerEvent(moveable, \"onScaleStart\", params);\n\n        datas.startFixedDirection = datas.fixedDirection;\n\n        if (result !== false) {\n            datas.isScale = true;\n            moveable.state.snapRenderInfo = {\n                request: e.isRequest,\n                direction,\n            };\n\n        }\n        return datas.isScale ? params : false;\n    },\n    dragControl(\n        moveable: MoveableManagerInterface<ScalableProps & DraggableProps & GroupableProps, SnappableState>,\n        e: any) {\n        resolveTransformEvent(moveable, e, \"scale\");\n        const {\n            datas,\n            parentKeepRatio,\n            parentFlag,\n            isPinch,\n            dragClient,\n            isRequest,\n            useSnap,\n            resolveMatrix,\n        } = e;\n        const {\n            prevDist,\n            direction,\n            startOffsetWidth,\n            startOffsetHeight,\n            isScale,\n            startValue,\n            isWidth,\n            ratio,\n        } = datas;\n\n        if (!isScale) {\n            return false;\n        }\n\n        const props = moveable.props;\n        const {\n            throttleScale,\n            parentMoveable,\n        } = props;\n        let sizeDirection = direction;\n\n        if (!direction[0] && !direction[1]) {\n            sizeDirection = [1, 1];\n        }\n        const keepRatio = (ratio && (parentKeepRatio != null ? parentKeepRatio : props.keepRatio)) || false;\n        const state = moveable.state;\n\n        const tempScaleValue = [\n            startValue[0],\n            startValue[1],\n        ];\n\n        function getNextScale() {\n            const {\n                distWidth,\n                distHeight,\n            } = getOffsetSizeDist(sizeDirection, keepRatio, datas, e);\n\n\n            const distX = startOffsetWidth ? (startOffsetWidth + distWidth) / startOffsetWidth : 1;\n            const distY = startOffsetHeight ? (startOffsetHeight + distHeight) / startOffsetHeight : 1;\n\n            if (!startValue[0]) {\n                tempScaleValue[0] = distWidth / startOffsetWidth;\n            }\n            if (!startValue[1]) {\n                tempScaleValue[1] = distHeight / startOffsetHeight;\n            }\n            let scaleX = (sizeDirection[0] || keepRatio ? distX : 1) * tempScaleValue[0];\n            let scaleY = (sizeDirection[1] || keepRatio ? distY : 1) * tempScaleValue[1];\n\n            if (scaleX === 0) {\n                scaleX = sign(prevDist[0]) * MIN_SCALE;\n            }\n            if (scaleY === 0) {\n                scaleY = sign(prevDist[1]) * MIN_SCALE;\n            }\n            return [scaleX, scaleY];\n        }\n\n\n        let scale = getNextScale();\n\n        if (!isPinch && moveable.props.groupable) {\n            const snapRenderInfo = state.snapRenderInfo || {};\n            const stateDirection = snapRenderInfo.direction;\n\n            if (isArray(stateDirection) && (stateDirection[0] || stateDirection[1])) {\n                state.snapRenderInfo = { direction, request: e.isRequest };\n            }\n        }\n\n        triggerEvent(moveable, \"onBeforeScale\", fillParams<OnBeforeScale>(moveable, e, {\n            scale,\n            setFixedDirection(nextFixedDirection: number[]) {\n                datas.setFixedDirection(nextFixedDirection);\n\n                scale = getNextScale();\n                return scale;\n            },\n            startFixedDirection: datas.startFixedDirection,\n            setScale(nextScale: number[]) {\n                scale = nextScale;\n            },\n        }, true));\n\n        let dist = [\n            scale[0] / tempScaleValue[0],\n            scale[1] / tempScaleValue[1],\n        ];\n        let fixedPosition = dragClient;\n        let snapDist = [0, 0];\n\n        const distSign = sign(dist[0] * dist[1]);\n        const isSelfPinch = !dragClient && !parentFlag && isPinch;\n\n        if (isSelfPinch || resolveMatrix) {\n            fixedPosition = getTranslateFixedPosition(\n                moveable,\n                datas.targetAllTransform,\n                [0, 0],\n                [0, 0],\n                datas,\n            );\n        } else if (!dragClient) {\n            fixedPosition = datas.fixedPosition;\n        }\n        if (!isPinch) {\n            snapDist = checkSnapScale(\n                moveable,\n                dist,\n                direction,\n                !useSnap && isRequest,\n                datas,\n            );\n        }\n\n        if (keepRatio) {\n            if (sizeDirection[0] && sizeDirection[1] && snapDist[0] && snapDist[1]) {\n                if (Math.abs(snapDist[0] * startOffsetWidth) > Math.abs(snapDist[1] * startOffsetHeight)) {\n                    snapDist[1] = 0;\n                } else {\n                    snapDist[0] = 0;\n                }\n            }\n\n            const isNoSnap = !snapDist[0] && !snapDist[1];\n\n            if (isNoSnap) {\n\n                // throttle scale value (not absolute scale size)\n                if (isWidth) {\n                    dist[0] = throttle(dist[0] * tempScaleValue[0], throttleScale!) / tempScaleValue[0];\n                } else {\n                    dist[1] = throttle(dist[1] * tempScaleValue[1], throttleScale!) / tempScaleValue[1];\n                }\n            }\n            if (\n                (sizeDirection[0] && !sizeDirection[1])\n                || (snapDist[0] && !snapDist[1])\n                || (isNoSnap && isWidth)\n            ) {\n                dist[0] += snapDist[0];\n                const snapHeight = startOffsetWidth * dist[0] * tempScaleValue[0] / ratio;\n\n                dist[1] = sign(distSign * dist[0]) * abs(snapHeight / startOffsetHeight / tempScaleValue[1]);\n            } else if (\n                (!sizeDirection[0] && sizeDirection[1])\n                || (!snapDist[0] && snapDist[1])\n                || (isNoSnap && !isWidth)\n            ) {\n                dist[1] += snapDist[1];\n                const snapWidth = startOffsetHeight * dist[1] * tempScaleValue[1] * ratio;\n\n                dist[0] = sign(distSign * dist[1]) * abs(snapWidth / startOffsetWidth / tempScaleValue[0]);\n            }\n        } else {\n            dist[0] += snapDist[0];\n            dist[1] += snapDist[1];\n\n            if (!snapDist[0]) {\n                dist[0] = throttle(dist[0] * tempScaleValue[0], throttleScale!) / tempScaleValue[0];\n            }\n            if (!snapDist[1]) {\n                dist[1] = throttle(dist[1] * tempScaleValue[1], throttleScale!) / tempScaleValue[1];\n            }\n        }\n\n        if (dist[0] === 0) {\n            dist[0] = sign(prevDist[0]) * MIN_SCALE;\n        }\n        if (dist[1] === 0) {\n            dist[1] = sign(prevDist[1]) * MIN_SCALE;\n        }\n        scale = multiply2(dist, [tempScaleValue[0], tempScaleValue[1]]);\n\n\n        const startOffsetSize = [\n            startOffsetWidth,\n            startOffsetHeight,\n        ];\n        let scaleSize = [\n            startOffsetWidth * scale[0],\n            startOffsetHeight * scale[1],\n        ];\n\n        scaleSize = calculateBoundSize(\n            scaleSize,\n            datas.minScaleSize,\n            datas.maxScaleSize,\n            keepRatio ? ratio : false,\n        );\n\n        // if (keepRatio && (isGroup || keepRatioFinally)) {\n        //     if (isWidth) {\n        //         boundingHeight = boundingWidth / ratio;\n        //     } else {\n        //         boundingWidth = boundingHeight * ratio;\n        //     }\n        // }\n        scale = countEach(2, i => {\n            return startOffsetSize[i] ? scaleSize[i] / startOffsetSize[i] : scaleSize[i];\n        });\n        dist = countEach(2, i => {\n            return scale[i] / tempScaleValue[i];\n        });\n\n        const delta = countEach(2, i => prevDist[i] ? dist[i] / prevDist[i] : dist[i]);\n\n\n        const distText = `scale(${dist.join(\", \")})`;\n        const scaleText = `scale(${scale.join(\", \")})`;\n        const nextTransform = convertTransformFormat(\n            datas, scaleText, distText);\n        const isZeroScale = !startValue[0] || !startValue[1];\n\n        const inverseDist = getScaleDist(\n            moveable,\n            isZeroScale ? scaleText : distText,\n            datas.fixedDirection,\n            fixedPosition,\n            datas.fixedOffset,\n            datas,\n            isZeroScale,\n        );\n        const inverseDelta = isSelfPinch ? inverseDist : minus(inverseDist, datas.prevInverseDist || [0, 0]);\n\n        datas.prevDist = dist;\n        datas.prevInverseDist = inverseDist;\n        if (\n            scale[0] === prevDist[0] && scale[1] === prevDist[1]\n            && inverseDelta.every(num => !num)\n            && !parentMoveable\n            && !isSelfPinch\n        ) {\n            return false;\n        }\n\n\n        const params = fillParams<OnScale>(moveable, e, {\n            offsetWidth: startOffsetWidth,\n            offsetHeight: startOffsetHeight,\n            direction,\n\n            scale,\n            dist,\n            delta,\n\n            isPinch: !!isPinch,\n            ...fillTransformEvent(\n                moveable,\n                nextTransform,\n                inverseDelta,\n                isPinch,\n                e,\n            ),\n        });\n        triggerEvent(moveable, \"onScale\", params);\n\n        return params;\n    },\n    dragControlEnd(moveable: MoveableManagerInterface<ScalableProps>, e: any) {\n        const { datas } = e;\n        if (!datas.isScale) {\n            return false;\n        }\n\n        datas.isScale = false;\n\n        const scaleEndParam = fillEndParams<OnScaleEnd>(moveable, e, {});\n        triggerEvent(moveable, \"onScaleEnd\", scaleEndParam);\n        return scaleEndParam;\n    },\n    dragGroupControlCondition: directionCondition,\n    dragGroupControlStart(moveable: MoveableGroupInterface<any, any>, e: any) {\n        const { datas } = e;\n\n        const params = this.dragControlStart(moveable, e);\n\n        if (!params) {\n            return false;\n        }\n        const originalEvents = fillChildEvents(moveable, \"resizable\", e);\n\n\n        datas.moveableScale = moveable.scale;\n\n        const events = triggerChildAbles(\n            moveable,\n            this,\n            \"dragControlStart\",\n            e,\n            (child, ev) => {\n                return startChildDist(moveable, child, datas, ev);\n            },\n        );\n\n        const setFixedDirection = (fixedDirection: number[]) => {\n            params.setFixedDirection(fixedDirection);\n            events.forEach((ev, i) => {\n                ev.setFixedDirection(fixedDirection);\n                startChildDist(moveable, ev.moveable, datas, originalEvents[i]);\n            });\n        };\n\n        datas.setFixedDirection = setFixedDirection;\n        const nextParams: OnScaleGroupStart = {\n            ...params,\n            targets: moveable.props.targets!,\n            events,\n            setFixedDirection,\n        };\n        const result = triggerEvent(moveable, \"onScaleGroupStart\", nextParams);\n\n        datas.isScale = result !== false;\n        return datas.isScale ? nextParams : false;\n    },\n    dragGroupControl(moveable: MoveableGroupInterface<any, any>, e: any) {\n        const { datas } = e;\n        if (!datas.isScale) {\n            return;\n        }\n\n        catchEvent(moveable, \"onBeforeScale\", parentEvent => {\n            triggerEvent(moveable, \"onBeforeScaleGroup\", fillParams<OnBeforeScaleGroup>(moveable, e, {\n                ...parentEvent,\n                targets: moveable.props.targets!,\n            }, true));\n        });\n\n        const params = this.dragControl(moveable, e);\n        if (!params) {\n            return;\n        }\n        const { dist } = params;\n        const moveableScale = datas.moveableScale;\n        moveable.scale = [\n            dist[0] * moveableScale[0],\n            dist[1] * moveableScale[1],\n        ];\n        const keepRatio = moveable.props.keepRatio;\n\n\n        const fixedPosition = datas.fixedPosition;\n        const events = triggerChildAbles(\n            moveable,\n            this,\n            \"dragControl\",\n            e,\n            (_, ev) => {\n                const [clientX, clientY] = calculate(\n                    createRotateMatrix(moveable.rotation / 180 * Math.PI, 3),\n                    [\n                        ev.datas.originalX * dist[0],\n                        ev.datas.originalY * dist[1],\n                        1,\n                    ],\n                    3,\n                );\n\n                return {\n                    ...ev,\n                    parentDist: null,\n                    parentScale: dist,\n                    parentKeepRatio: keepRatio,\n                    // recalculate child fixed position for parent group's dragging.\n                    dragClient: plus(fixedPosition, [clientX, clientY]),\n                };\n            },\n        );\n        const nextParams: OnScaleGroup = {\n            targets: moveable.props.targets!,\n            events,\n            ...params,\n        };\n\n        triggerEvent(moveable, \"onScaleGroup\", nextParams);\n        return nextParams;\n    },\n    dragGroupControlEnd(moveable: MoveableGroupInterface<any, any>, e: any) {\n        const { isDrag, datas } = e;\n\n        if (!datas.isScale) {\n            return;\n        }\n        this.dragControlEnd(moveable, e);\n        const events = triggerChildAbles(moveable, this, \"dragControlEnd\", e);\n\n        const nextParams = fillEndParams<OnScaleGroupEnd>(moveable, e, {\n            targets: moveable.props.targets!,\n            events,\n        });\n\n        triggerEvent(moveable, \"onScaleGroupEnd\", nextParams);\n        return isDrag;\n    },\n    /**\n     * @method Moveable.Scalable#request\n     * @param {Moveable.Scalable.ScalableRequestParam} e - the Scalable's request parameter\n     * @return {Moveable.Requester} Moveable Requester\n     * @example\n\n     * // Instantly Request (requestStart - request - requestEnd)\n     * moveable.request(\"scalable\", { deltaWidth: 10, deltaHeight: 10 }, true);\n     *\n     * // requestStart\n     * const requester = moveable.request(\"scalable\");\n     *\n     * // request\n     * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n     * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n     * requester.request({ deltaWidth: 10, deltaHeight: 10 });\n     *\n     * // requestEnd\n     * requester.requestEnd();\n     */\n    request() {\n        const datas = {};\n        let distWidth = 0;\n        let distHeight = 0;\n        let useSnap = false;\n\n        return {\n            isControl: true,\n            requestStart(e: IObject<any>) {\n                useSnap = e.useSnap;\n\n                return {\n                    datas,\n                    parentDirection: e.direction || [1, 1],\n                    useSnap,\n                };\n            },\n            request(e: IObject<any>) {\n                distWidth += e.deltaWidth;\n                distHeight += e.deltaHeight;\n\n                return {\n                    datas,\n                    parentDist: [distWidth, distHeight],\n                    parentKeepRatio: e.keepRatio,\n                    useSnap,\n                };\n            },\n            requestEnd() {\n                return { datas, isDrag: true, useSnap };\n            },\n        };\n    },\n};\n\n/**\n * Whether or not target can scaled.\n *\n * @name Moveable.Scalable#scalable\n * @default false\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.scalable = true;\n */\n\n/**\n * throttle of scaleX, scaleY when scale.\n * @name Moveable.Scalable#throttleScale\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.throttleScale = 0.1;\n */\n/**\n * Set directions to show the control box. (default: [\"n\", \"nw\", \"ne\", \"s\", \"se\", \"sw\", \"e\", \"w\"])\n * @name Moveable.Scalable#renderDirections\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     scalable: true,\n *   renderDirections: [\"n\", \"nw\", \"ne\", \"s\", \"se\", \"sw\", \"e\", \"w\"],\n * });\n *\n * moveable.renderDirections = [\"nw\", \"ne\", \"sw\", \"se\"];\n */\n/**\n * When resize or scale, keeps a ratio of the width, height. (default: false)\n * @name Moveable.Scalable#keepRatio\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     scalable: true,\n * });\n *\n * moveable.keepRatio = true;\n */\n/**\n * When the scale starts, the scaleStart event is called.\n * @memberof Moveable.Scalable\n * @event scaleStart\n * @param {Moveable.Scalable.OnScaleStart} - Parameters for the scaleStart event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { scalable: true });\n * moveable.on(\"scaleStart\", ({ target }) => {\n *     console.log(target);\n * });\n */\n/**\n * When scaling, `beforeScale` is called before `scale` occurs. In `beforeScale`, you can get and set the pre-value before scaling.\n * @memberof Moveable.Scalable\n * @event beforeScale\n * @param {Moveable.Scalable.OnBeforeScale} - Parameters for the `beforeScale` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { scalable: true });\n * moveable.on(\"beforeScale\", ({ setFixedDirection }) => {\n *     if (shiftKey) {\n *        setFixedDirection([0, 0]);\n *     }\n * });\n * moveable.on(\"scale\", ({ target, transform, dist }) => {\n *     target.style.transform = transform;\n * });\n */\n\n/**\n * When scaling, the `scale` event is called.\n * @memberof Moveable.Scalable\n * @event scale\n * @param {Moveable.Scalable.OnScale} - Parameters for the `scale` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { scalable: true });\n * moveable.on(\"scale\", ({ target, transform, dist }) => {\n *     target.style.transform = transform;\n * });\n */\n/**\n * When the scale finishes, the `scaleEnd` event is called.\n * @memberof Moveable.Scalable\n * @event scaleEnd\n * @param {Moveable.Scalable.OnScaleEnd} - Parameters for the `scaleEnd` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { scalable: true });\n * moveable.on(\"scaleEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n\n/**\n* When the group scale starts, the `scaleGroupStart` event is called.\n* @memberof Moveable.Scalable\n* @event scaleGroupStart\n* @param {Moveable.Scalable.OnScaleGroupStart} - Parameters for the `scaleGroupStart` event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     target: [].slice.call(document.querySelectorAll(\".target\")),\n*     scalable: true\n* });\n* moveable.on(\"scaleGroupStart\", ({ targets }) => {\n*     console.log(\"onScaleGroupStart\", targets);\n* });\n*/\n\n/**\n* When the group scale, the `scaleGroup` event is called.\n* @memberof Moveable.Scalable\n* @event scaleGroup\n* @param {Moveable.Scalable.OnScaleGroup} - Parameters for the `scaleGroup` event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     target: [].slice.call(document.querySelectorAll(\".target\")),\n*     scalable: true\n* });\n* moveable.on(\"scaleGroup\", ({ targets, events }) => {\n*     console.log(\"onScaleGroup\", targets);\n*     events.forEach(ev => {\n*         const target = ev.target;\n*         // ev.drag is a drag event that occurs when the group scale.\n*         const left = ev.drag.beforeDist[0];\n*         const top = ev.drag.beforeDist[1];\n*         const scaleX = ev.scale[0];\n*         const scaleY = ev.scale[1];\n*     });\n* });\n*/\n\n/**\n * When the group scale finishes, the `scaleGroupEnd` event is called.\n * @memberof Moveable.Scalable\n * @event scaleGroupEnd\n * @param {Moveable.Scalable.OnScaleGroupEnd} - Parameters for the `scaleGroupEnd` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n *     scalable: true\n * });\n * moveable.on(\"scaleGroupEnd\", ({ targets, isDrag }) => {\n *     console.log(\"onScaleGroupEnd\", targets, isDrag);\n * });\n */\n", "import {\n    prefix, getLineStyle, getDirection, getAbsolutePosesByState,\n    triggerEvent, fillParams, fillEndParams, getDirectionViewClassName, fillCSSObject,\n} from \"../utils\";\nimport {\n    convertDimension, invert, multiply,\n    calculate,\n    createIdentityMatrix,\n    ignoreDimension,\n    minus,\n    createWarpMatrix,\n    plus,\n} from \"@scena/matrix\";\nimport { NEARBY_POS } from \"../consts\";\nimport {\n    setDragStart, getDragDist, getPosIndexesByDirection, setDefaultTransformIndex,\n    fillTransformStartEvent, resolveTransformEvent,\n    convertTransformFormat, fillOriginalTransform, getTransfromMatrix,\n} from \"../gesto/GestoUtils\";\nimport {\n    WarpableProps, ScalableProps, ResizableProps,\n    Renderer, SnappableProps, SnappableState,\n    OnWarpStart, OnWarp, OnWarpEnd, MoveableManagerInterface,\n} from \"../types\";\nimport { hasClass, dot, getRad } from \"@daybrush/utils\";\nimport { renderAllDirections } from \"../renderDirections\";\nimport { hasGuidelines } from \"./snappable/utils\";\nimport { checkMoveableSnapBounds } from \"./snappable/snapBounds\";\n\nfunction getMiddleLinePos(pos1: number[], pos2: number[]) {\n    return pos1.map((pos, i) => dot(pos, pos2[i], 1, 2));\n}\n\nfunction getTriangleRad(pos1: number[], pos2: number[], pos3: number[]) {\n    // pos1 Rad\n    const rad1 = getRad(pos1, pos2);\n    const rad2 = getRad(pos1, pos3);\n\n    const rad = rad2 - rad1;\n\n    return rad >= 0 ? rad : rad + 2 * Math.PI;\n}\n\nfunction isValidPos(poses1: number[][], poses2: number[][]) {\n    const rad1 = getTriangleRad(poses1[0], poses1[1], poses1[2]);\n    const rad2 = getTriangleRad(poses2[0], poses2[1], poses2[2]);\n    const pi = Math.PI;\n\n    if ((rad1 >= pi && rad2 <= pi) || (rad1 <= pi && rad2 >= pi)) {\n        return false;\n    }\n    return true;\n}\n\n/**\n * @namespace Moveable.Warpable\n * @description Warpable indicates whether the target can be warped(distorted, bented).\n */\nexport default {\n    name: \"warpable\",\n    ableGroup: \"size\",\n    props: [\n        \"warpable\",\n        \"renderDirections\",\n        \"edge\",\n        \"displayAroundControls\",\n    ] as const,\n    events: [\n        \"warpStart\",\n        \"warp\",\n        \"warpEnd\",\n    ] as const,\n    viewClassName: getDirectionViewClassName(\"warpable\"),\n    render(moveable: MoveableManagerInterface<ResizableProps & ScalableProps & WarpableProps>, React: Renderer): any[] {\n        const { resizable, scalable, warpable, zoom } = moveable.props;\n\n        if (resizable || scalable || !warpable) {\n            return [];\n        }\n        const { pos1, pos2, pos3, pos4 } = moveable.state;\n\n        const linePosFrom1 = getMiddleLinePos(pos1, pos2);\n        const linePosFrom2 = getMiddleLinePos(pos2, pos1);\n        const linePosFrom3 = getMiddleLinePos(pos1, pos3);\n        const linePosFrom4 = getMiddleLinePos(pos3, pos1);\n        const linePosTo1 = getMiddleLinePos(pos3, pos4);\n        const linePosTo2 = getMiddleLinePos(pos4, pos3);\n        const linePosTo3 = getMiddleLinePos(pos2, pos4);\n        const linePosTo4 = getMiddleLinePos(pos4, pos2);\n\n        return [\n            <div className={prefix(\"line\")}\n                key=\"middeLine1\" style={getLineStyle(linePosFrom1, linePosTo1, zoom)}></div>,\n            <div className={prefix(\"line\")}\n                key=\"middeLine2\" style={getLineStyle(linePosFrom2, linePosTo2, zoom)}></div>,\n            <div className={prefix(\"line\")}\n                key=\"middeLine3\" style={getLineStyle(linePosFrom3, linePosTo3, zoom)}></div>,\n            <div className={prefix(\"line\")}\n                key=\"middeLine4\" style={getLineStyle(linePosFrom4, linePosTo4, zoom)}></div>,\n            ...renderAllDirections(moveable, \"warpable\", React),\n        ];\n    },\n    dragControlCondition(moveable: any, e: any) {\n        if (e.isRequest) {\n            return false;\n        }\n        const target = e.inputEvent.target;\n\n        return hasClass(target, prefix(\"direction\")) && hasClass(target, prefix(\"warpable\"));\n    },\n    dragControlStart(\n        moveable: MoveableManagerInterface<WarpableProps, SnappableState>,\n        e: any,\n    ) {\n        const { datas, inputEvent } = e;\n        const { target } = moveable.props;\n        const { target: inputTarget } = inputEvent;\n        const direction = getDirection(inputTarget, datas);\n\n        if (!direction || !target) {\n            return false;\n        }\n        const state = moveable.state;\n        const {\n            transformOrigin, is3d,\n            targetTransform, targetMatrix,\n            width, height,\n            left, top,\n        } = state;\n\n        datas.datas = {};\n        datas.targetTransform = targetTransform;\n        datas.warpTargetMatrix = is3d ? targetMatrix : convertDimension(targetMatrix, 3, 4);\n        datas.targetInverseMatrix = ignoreDimension(invert(datas.warpTargetMatrix, 4), 3, 4);\n        datas.direction = direction;\n        datas.left = left;\n        datas.top = top;\n        datas.poses = [\n            [0, 0],\n            [width, 0],\n            [0, height],\n            [width, height],\n        ].map(p => minus(p, transformOrigin));\n\n        datas.nextPoses = datas.poses.map(([x, y]: number[]) => calculate(datas.warpTargetMatrix, [x, y, 0, 1], 4));\n        datas.startValue = createIdentityMatrix(4);\n        datas.prevMatrix = createIdentityMatrix(4);\n        datas.absolutePoses = getAbsolutePosesByState(state);\n        datas.posIndexes = getPosIndexesByDirection(direction);\n\n        setDragStart(moveable, e);\n        setDefaultTransformIndex(moveable, e, \"matrix3d\");\n\n        state.snapRenderInfo = {\n            request: e.isRequest,\n            direction,\n        };\n\n        const params = fillParams<OnWarpStart>(moveable, e, {\n            set: (matrix: number[]) => {\n                datas.startValue = matrix;\n            },\n            ...fillTransformStartEvent(moveable, e),\n        });\n        const result = triggerEvent(moveable, \"onWarpStart\", params);\n        if (result !== false) {\n            datas.isWarp = true;\n        }\n        return datas.isWarp;\n    },\n    dragControl(\n        moveable: MoveableManagerInterface<WarpableProps & SnappableProps, SnappableState>,\n        e: any,\n    ) {\n        const { datas, isRequest } = e;\n        let { distX, distY } = e;\n        const {\n            targetInverseMatrix, prevMatrix, isWarp, startValue,\n            poses,\n            posIndexes,\n            absolutePoses,\n        } = datas;\n\n        if (!isWarp) {\n            return false;\n        }\n        resolveTransformEvent(moveable, e, \"matrix3d\");\n        if (hasGuidelines(moveable, \"warpable\")) {\n            const selectedPoses: number[][] = posIndexes.map((index: number) => absolutePoses[index]);\n\n            if (selectedPoses.length > 1) {\n                selectedPoses.push([\n                    (selectedPoses[0][0] + selectedPoses[1][0]) / 2,\n                    (selectedPoses[0][1] + selectedPoses[1][1]) / 2,\n                ]);\n            }\n\n            const {\n                horizontal: horizontalSnapInfo,\n                vertical: verticalSnapInfo,\n            } = checkMoveableSnapBounds(\n                moveable,\n                isRequest,\n                {\n                    horizontal: selectedPoses.map(pos => pos[1] + distY),\n                    vertical: selectedPoses.map(pos => pos[0] + distX),\n                },\n            );\n\n            distY -= horizontalSnapInfo.offset;\n            distX -= verticalSnapInfo.offset;\n        }\n\n        const dist = getDragDist({ datas, distX, distY }, true);\n        const nextPoses = datas.nextPoses.slice();\n\n        posIndexes.forEach((index: number) => {\n            nextPoses[index] = plus(nextPoses[index], dist);\n        });\n\n        if (!NEARBY_POS.every(\n            nearByPoses => isValidPos(nearByPoses.map(i => poses[i]), nearByPoses.map(i => nextPoses[i])),\n        )) {\n            return false;\n        }\n        const h = createWarpMatrix(\n            poses[0],\n            poses[2],\n            poses[1],\n            poses[3],\n            nextPoses[0],\n            nextPoses[2],\n            nextPoses[1],\n            nextPoses[3],\n        );\n\n        if (!h.length) {\n            return false;\n        }\n        // B * A * M\n        const afterMatrix = multiply(targetInverseMatrix, h, 4);\n\n        // B * M * A\n        const matrix = getTransfromMatrix(datas, afterMatrix, true);\n\n        const delta = multiply(invert(prevMatrix, 4), matrix, 4);\n\n        datas.prevMatrix = matrix;\n        const totalMatrix = multiply(startValue, matrix, 4);\n        const nextTransform = convertTransformFormat(\n            datas, `matrix3d(${totalMatrix.join(\", \")})`, `matrix3d(${matrix.join(\", \")})`);\n\n        fillOriginalTransform(e, nextTransform);\n        triggerEvent(moveable, \"onWarp\", fillParams<OnWarp>(moveable, e, {\n            delta,\n            matrix: totalMatrix,\n            dist: matrix,\n            multiply,\n            transform: nextTransform,\n            ...fillCSSObject({\n                transform: nextTransform,\n            }, e),\n        }));\n        return true;\n    },\n    dragControlEnd(\n        moveable: MoveableManagerInterface<WarpableProps>,\n        e: any,\n    ) {\n        const { datas, isDrag } = e;\n        if (!datas.isWarp) {\n            return false;\n        }\n        datas.isWarp = false;\n\n        triggerEvent(moveable, \"onWarpEnd\", fillEndParams<OnWarpEnd>(moveable, e, {}));\n        return isDrag;\n    },\n};\n\n/**\n * Whether or not target can be warped. (default: false)\n * @name Moveable.Warpable#warpable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.warpable = true;\n */\n\n/**\n* Set directions to show the control box. (default: [\"n\", \"nw\", \"ne\", \"s\", \"se\", \"sw\", \"e\", \"w\"])\n* @name Moveable.Warpable#renderDirections\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     warpable: true,\n*     renderDirections: [\"n\", \"nw\", \"ne\", \"s\", \"se\", \"sw\", \"e\", \"w\"],\n* });\n*\n* moveable.renderDirections = [\"nw\", \"ne\", \"sw\", \"se\"];\n*/\n/**\n* When the warp starts, the warpStart event is called.\n* @memberof Moveable.Warpable\n* @event warpStart\n* @param {Moveable.Warpable.OnWarpStart} - Parameters for the warpStart event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, { warpable: true });\n* moveable.on(\"warpStart\", ({ target }) => {\n*     console.log(target);\n* });\n*/\n/**\n * When warping, the warp event is called.\n * @memberof Moveable.Warpable\n * @event warp\n * @param {Moveable.Warpable.OnWarp} - Parameters for the warp event\n * @example\n * import Moveable from \"moveable\";\n * let matrix = [\n *  1, 0, 0, 0,\n *  0, 1, 0, 0,\n *  0, 0, 1, 0,\n *  0, 0, 0, 1,\n * ];\n * const moveable = new Moveable(document.body, { warpable: true });\n * moveable.on(\"warp\", ({ target, transform, delta, multiply }) => {\n *    // target.style.transform = transform;\n *    matrix = multiply(matrix, delta);\n *    target.style.transform = `matrix3d(${matrix.join(\",\")})`;\n * });\n */\n/**\n * When the warp finishes, the warpEnd event is called.\n * @memberof Moveable.Warpable\n * @event warpEnd\n * @param {Moveable.Warpable.OnWarpEnd} - Parameters for the warpEnd event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, { warpable: true });\n * moveable.on(\"warpEnd\", ({ target, isDrag }) => {\n *     console.log(target, isDrag);\n * });\n */\n", "import { prefix } from \"./utils\";\n\nexport const AREA_PIECES = /*#__PURE__*/prefix(\"area-pieces\");\nexport const AREA_PIECE = /*#__PURE__*/prefix(\"area-piece\");\nexport const AVOID = /*#__PURE__*/prefix(\"avoid\");\nexport const VIEW_DRAGGING = prefix(\"view-dragging\");\n", "import {\n    createWarpMatrix,\n} from \"@scena/matrix\";\nimport { ref } from \"framework-utils\";\nimport { getRect, calculateInversePosition, makeMatrixCSS, prefix } from \"../utils\";\nimport {\n    Renderer, GroupableProps, DragAreaProps, MoveableManagerInterface, MoveableGroupInterface,\n} from \"../types\";\nimport { AREA_PIECE, AVOID, AREA_PIECES } from \"../classNames\";\nimport { addClass, removeClass, requestAnimationFrame } from \"@daybrush/utils\";\n\nfunction restoreStyle(moveable: MoveableManagerInterface) {\n    const el = moveable.areaElement;\n\n    if (!el) {\n        return;\n    }\n    const { width, height } = moveable.state;\n\n    removeClass(el, AVOID);\n\n    el.style.cssText += `left: 0px; top: 0px; width: ${width}px; height: ${height}px`;\n}\n\nfunction renderPieces(React: Renderer): any {\n    return (<div key=\"area_pieces\" className={AREA_PIECES}>\n        <div className={AREA_PIECE}></div>\n        <div className={AREA_PIECE}></div>\n        <div className={AREA_PIECE}></div>\n        <div className={AREA_PIECE}></div>\n    </div>);\n}\nexport default {\n    name: \"dragArea\",\n    props: [\n        \"dragArea\",\n        \"passDragArea\",\n    ] as const,\n    events: [\n        \"click\",\n        \"clickGroup\",\n    ] as const,\n    render(moveable: MoveableManagerInterface<GroupableProps>, React: Renderer): any[] {\n        const { target, dragArea, groupable, passDragArea } = moveable.props;\n        const { width, height, renderPoses } = moveable.getState();\n\n        const className = passDragArea ? prefix(\"area\", \"pass\") : prefix(\"area\");\n        if (groupable) {\n            return [\n                <div key=\"area\" ref={ref(moveable, \"areaElement\")} className={className}></div>,\n                renderPieces(React),\n            ];\n        }\n        if (!target || !dragArea) {\n            return [];\n        }\n        const h = createWarpMatrix(\n            [0, 0],\n            [width, 0],\n            [0, height],\n            [width, height],\n            renderPoses[0],\n            renderPoses[1],\n            renderPoses[2],\n            renderPoses[3],\n        );\n        const transform = h.length ? makeMatrixCSS(h, true) : \"none\";\n\n        return [\n            <div key=\"area\" ref={ref(moveable, \"areaElement\")} className={className} style={{\n                top: \"0px\",\n                left: \"0px\",\n                width: `${width}px`,\n                height: `${height}px`,\n                transformOrigin: \"0 0\",\n                transform,\n            }}></div>,\n            renderPieces(React),\n        ];\n    },\n    dragStart(moveable: MoveableManagerInterface, { datas, clientX, clientY, inputEvent }: any) {\n        if (!inputEvent) {\n            return false;\n        }\n        datas.isDragArea = false;\n        const areaElement = moveable.areaElement;\n        const state = moveable.state;\n        const {\n            moveableClientRect,\n            renderPoses,\n            rootMatrix,\n            is3d,\n        } = state;\n        const { left, top } = moveableClientRect;\n        const {\n            left: relativeLeft,\n            top: relativeTop,\n            width,\n            height,\n        } = getRect(renderPoses);\n        const n = is3d ? 4 : 3;\n        let [posX, posY] = calculateInversePosition(rootMatrix, [clientX - left, clientY - top], n);\n\n        posX -= relativeLeft;\n        posY -= relativeTop;\n        const rects = [\n            { left: relativeLeft, top: relativeTop, width, height: posY - 10 },\n            { left: relativeLeft, top: relativeTop, width: posX - 10, height },\n            { left: relativeLeft, top: relativeTop + posY + 10, width, height: height - posY - 10 },\n            { left: relativeLeft + posX + 10, top: relativeTop, width: width - posX - 10, height },\n        ];\n\n        const children = [].slice.call(areaElement.nextElementSibling!.children) as HTMLElement[];\n        rects.forEach((rect, i) => {\n            children[i].style.cssText\n                = `left: ${rect.left}px;top: ${rect.top}px; width: ${rect.width}px; height: ${rect.height}px;`;\n        });\n        addClass(areaElement, AVOID);\n        state.disableNativeEvent = true;\n        return;\n    },\n    drag(moveable: MoveableManagerInterface, { datas, inputEvent }: any) {\n        this.enableNativeEvent(moveable);\n        if (!inputEvent) {\n            return false;\n        }\n        if (!datas.isDragArea) {\n            datas.isDragArea = true;\n            restoreStyle(moveable);\n        }\n    },\n    dragEnd(moveable: MoveableManagerInterface<DragAreaProps>, e: any) {\n        this.enableNativeEvent(moveable);\n        const { inputEvent, datas } = e;\n        if (!inputEvent) {\n            return false;\n        }\n        if (!datas.isDragArea) {\n            restoreStyle(moveable);\n        }\n    },\n    dragGroupStart(moveable: MoveableGroupInterface, e: any) {\n        return this.dragStart(moveable, e);\n    },\n    dragGroup(moveable: MoveableGroupInterface, e: any) {\n        return this.drag(moveable, e);\n    },\n    dragGroupEnd(\n        moveable: MoveableGroupInterface<DragAreaProps>,\n        e: any,\n    ) {\n        return this.dragEnd(moveable, e);\n    },\n    unset(moveable: MoveableManagerInterface<DragAreaProps>) {\n        restoreStyle(moveable);\n        moveable.state.disableNativeEvent = false;\n    },\n    enableNativeEvent(moveable: MoveableManagerInterface<DragAreaProps>) {\n        const state = moveable.state;\n        if (state.disableNativeEvent) {\n            requestAnimationFrame(() => {\n                state.disableNativeEvent = false;\n            });\n        }\n    },\n};\n\n/**\n * Add an event to the moveable area instead of the target for stopPropagation. (default: false, true in group)\n * @name Moveable#dragArea\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *  dragArea: false,\n * });\n */\n/**\n * Set `pointerEvents: none;` css to pass events in dragArea. (default: false)\n * @name Moveable#passDragArea\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *  dragArea: false,\n * });\n */\n", "import { prefix, getControlTransform, calculatePosition, convertTransformOriginArray } from \"../utils\";\nimport { Renderer, OriginOptions, MoveableManagerInterface } from \"../types\";\nimport { makeAble } from \"./AbleManager\";\nimport { minus } from \"@scena/matrix\";\n\nexport default makeAble(\"origin\", {\n    props: [\"origin\", \"svgOrigin\"] as const,\n    render(moveable: MoveableManagerInterface<OriginOptions>, React: Renderer): any[] {\n        const { zoom, svgOrigin, groupable } = moveable.props;\n        const {\n            beforeOrigin, rotation, svg, allMatrix, is3d,\n            left, top, offsetWidth, offsetHeight,\n        } = moveable.getState();\n\n        let originStyle!: Record<string, any>;\n\n        if (!groupable && svg && svgOrigin) {\n            const [originX, originY] = convertTransformOriginArray(svgOrigin, offsetWidth, offsetHeight);\n            const n = is3d ? 4 : 3;\n            const result = calculatePosition(\n                allMatrix,\n                [originX, originY],\n                n,\n            );\n            originStyle = getControlTransform(rotation, zoom!, minus(result, [left, top]));\n        } else {\n            originStyle = getControlTransform(rotation, zoom!, beforeOrigin);\n        }\n        return [\n            <div className={prefix(\"control\", \"origin\")} style={originStyle} key=\"beforeOrigin\"></div>,\n        ];\n    },\n});\n\n/**\n * Whether or not the origin controlbox will be visible or not (default: true)\n * @name Moveable#origin\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n *\n * moveable.origin = true;\n */\n", "\nimport {\n    ScrollableProps, OnScroll, MoveableManagerInterface,\n    MoveableGroupInterface, MoveableRefType,\n} from \"../types\";\nimport { triggerEvent, fillParams, getRefTarget } from \"../utils\";\nimport DragScroll from \"@scena/dragscroll\";\n\nfunction getDefaultScrollPosition(e: { scrollContainer: HTMLElement, direction: number[] }) {\n    const scrollContainer = e.scrollContainer;\n\n    return [\n        scrollContainer.scrollLeft,\n        scrollContainer.scrollTop,\n    ];\n}\n/**\n * @namespace Moveable.Scrollable\n * @description Whether or not target can be scrolled to the scroll container (default: false)\n */\nexport default {\n    name: \"scrollable\",\n    canPinch: true,\n    props: [\n        \"scrollable\",\n        \"scrollContainer\",\n        \"scrollThreshold\",\n        \"scrollThrottleTime\",\n        \"getScrollPosition\",\n        \"scrollOptions\",\n    ] as const,\n    events: [\n        \"scroll\",\n        \"scrollGroup\",\n    ] as const,\n    dragRelation: \"strong\",\n    dragStart(moveable: MoveableManagerInterface<ScrollableProps, Record<string, any>>, e: any) {\n        const props = moveable.props;\n        const {\n            scrollContainer = moveable.getContainer() as HTMLElement,\n            scrollOptions,\n        } = props;\n\n        const dragScroll = new DragScroll();\n        const scrollContainerElement = getRefTarget<HTMLElement>(scrollContainer, true);\n\n        e.datas.dragScroll = dragScroll;\n        moveable.state.dragScroll = dragScroll;\n\n        const gestoName = e.isControl ? \"controlGesto\" : \"targetGesto\";\n        const targets = e.targets;\n\n        dragScroll.on(\"scroll\", ({ container, direction }) => {\n            const params = fillParams<OnScroll>(moveable, e, {\n                scrollContainer: container,\n                direction,\n            }) as any;\n\n            const eventName = targets ? \"onScrollGroup\" : \"onScroll\" as any;\n            if (targets) {\n                params.targets = targets;\n            }\n            triggerEvent(moveable, eventName, params);\n        }).on(\"move\", ({ offsetX, offsetY, inputEvent }) => {\n            moveable[gestoName].scrollBy(offsetX, offsetY, inputEvent.inputEvent, false);\n        }).on(\"scrollDrag\", ({ next }) => {\n            next(moveable[gestoName].getCurrentEvent());\n        });\n        dragScroll.dragStart(e, {\n            container: scrollContainerElement!,\n            ...scrollOptions,\n        });\n    },\n    checkScroll(moveable: MoveableManagerInterface<ScrollableProps>, e: any) {\n        const dragScroll = e.datas.dragScroll as DragScroll;\n\n        if (!dragScroll) {\n            return;\n        }\n        const {\n            scrollContainer = moveable.getContainer() as MoveableRefType<HTMLElement>,\n            scrollThreshold = 0,\n            scrollThrottleTime = 0,\n            getScrollPosition = getDefaultScrollPosition,\n            scrollOptions,\n        } = moveable.props;\n\n        dragScroll.drag(e, {\n            container: scrollContainer!,\n            threshold: scrollThreshold,\n            throttleTime: scrollThrottleTime,\n            getScrollPosition: (ev: any) => {\n                return getScrollPosition({ scrollContainer: ev.container, direction: ev.direction });\n            },\n            ...scrollOptions,\n        });\n\n        return true;\n    },\n    drag(moveable: MoveableManagerInterface<ScrollableProps>, e: any) {\n        return this.checkScroll(moveable, e);\n    },\n    dragEnd(moveable: MoveableManagerInterface<ScrollableProps>, e: any) {\n        e.datas.dragScroll.dragEnd();\n        e.datas.dragScroll = null;\n    },\n    dragControlStart(moveable: MoveableManagerInterface<ScrollableProps>, e: any) {\n        return this.dragStart(moveable, { ...e, isControl: true });\n    },\n    dragControl(moveable: MoveableManagerInterface<ScrollableProps>, e: any) {\n        return this.drag(moveable, e);\n    },\n    dragControlEnd(moveable: MoveableManagerInterface<ScrollableProps>, e: any) {\n        return this.dragEnd(moveable, e);\n    },\n    dragGroupStart(moveable: MoveableGroupInterface, e: any) {\n        return this.dragStart(moveable, { ...e, targets: moveable.props.targets });\n    },\n    dragGroup(moveable: MoveableGroupInterface, e: any) {\n        return this.drag(moveable, { ...e, targets: moveable.props.targets });\n    },\n    dragGroupEnd(moveable: MoveableGroupInterface, e: any) {\n        return this.dragEnd(moveable, { ...e, targets: moveable.props.targets });\n    },\n    dragGroupControlStart(moveable: MoveableGroupInterface, e: any) {\n        return this.dragStart(moveable, { ...e, targets: moveable.props.targets, isControl: true });\n    },\n    dragGroupControl(moveable: MoveableGroupInterface, e: any) {\n        return this.drag(moveable, { ...e, targets: moveable.props.targets });\n    },\n    dragGroupControEnd(moveable: MoveableGroupInterface, e: any) {\n        return this.dragEnd(moveable, { ...e, targets: moveable.props.targets });\n    },\n    unset(moveable: MoveableManagerInterface<ScrollableProps, Record<string, any>>) {\n        const state = moveable.state;\n\n        state.dragScroll?.dragEnd();\n        state.dragScroll = null;\n    },\n};\n\n/**\n * When the drag cursor leaves the scrollContainer, the `scroll` event occur to scroll.\n * @memberof Moveable.Scrollable\n * @event scroll\n * @param {Moveable.Scrollable.OnScroll} - Parameters for the `scroll` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: document.querySelector(\".target\"),\n * });\n * moveable.on(\"scroll\", ({ scrollContainer, direction }) => {\n *   scrollContainer.scrollLeft += direction[0] * 10;\n *   scrollContainer.scrollTop += direction[1] * 10;\n * });\n */\n\n/**\n * When the drag cursor leaves the scrollContainer, the `scrollGroup` event occur to scroll in group.\n * @memberof Moveable.Scrollable\n * @event scrollGroup\n * @param {Moveable.Scrollable.OnScrollGroup} - Parameters for the `scrollGroup` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n * });\n * moveable.on(\"scroll\", ({ scrollContainer, direction }) => {\n *   scrollContainer.scrollLeft += direction[0] * 10;\n *   scrollContainer.scrollTop += direction[1] * 10;\n * });\n */\n", "export default {\n    name: \"\",\n    props: [\n        \"target\",\n        \"dragTargetSelf\",\n        \"dragTarget\",\n        \"dragContainer\",\n        \"container\",\n        \"warpSelf\",\n        \"rootContainer\",\n        \"useResizeObserver\",\n        \"useMutationObserver\",\n        \"zoom\",\n        \"dragFocusedInput\",\n        \"transformOrigin\",\n        \"ables\",\n        \"className\",\n        \"pinchThreshold\",\n        \"pinchOutside\",\n        \"triggerAblesSimultaneously\",\n        \"checkInput\",\n        \"cspNonce\",\n        \"translateZ\",\n        \"hideDefaultLines\",\n        \"props\",\n        \"flushSync\",\n        \"stopPropagation\",\n        \"preventClickEventOnDrag\",\n        \"preventClickDefault\",\n        \"viewContainer\",\n        \"persistData\",\n        \"useAccuratePosition\",\n        \"firstRenderState\",\n        \"linePadding\",\n        \"controlPadding\",\n        \"preventDefault\",\n        \"requestStyles\",\n    ] as const,\n    events: [\n        \"changeTargets\",\n    ] as const,\n};\n", "import { prefix, makeMatrixCSS, getPaddingBox } from \"../utils\";\nimport { Renderer, MoveableManagerInterface } from \"../types\";\nimport { createWarpMatrix } from \"@scena/matrix\";\nimport { makeAble } from \"./AbleManager\";\n\nexport default makeAble(\"padding\", {\n    props: [\"padding\"] as const,\n    render(moveable: MoveableManagerInterface, React: Renderer): any[] {\n        const props = moveable.props;\n        if (props.dragArea) {\n            return [];\n        }\n        const {\n            left,\n            top,\n            right,\n            bottom,\n        } = getPaddingBox(props.padding || {});\n        const {\n            renderPoses,\n            pos1,\n            pos2,\n            pos3,\n            pos4,\n        } = moveable.getState();\n\n        const poses = [pos1, pos2, pos3, pos4];\n        const paddingDirections: number[][] = [];\n\n        if (left > 0) {\n            paddingDirections.push([0, 2]);\n        }\n        if (top > 0) {\n            paddingDirections.push([0, 1]);\n        }\n        if (right > 0) {\n            paddingDirections.push([1, 3]);\n        }\n        if (bottom > 0) {\n            paddingDirections.push([2, 3]);\n        }\n        return paddingDirections.map(([dir1, dir2], i) => {\n            const paddingPos1 = poses[dir1];\n            const paddingPos2 = poses[dir2];\n            const paddingPos3 = renderPoses[dir1];\n            const paddingPos4 = renderPoses[dir2];\n\n            const h = createWarpMatrix(\n                [0, 0],\n                [100, 0],\n                [0, 100],\n                [100, 100],\n                paddingPos1,\n                paddingPos2,\n                paddingPos3,\n                paddingPos4,\n            );\n            if (!h.length) {\n                return undefined;\n            }\n            return (<div key={`padding${i}`} className={prefix(\"padding\")} style={{\n                transform: makeMatrixCSS(h, true),\n            }}></div>);\n        });\n    },\n});\n\n/**\n * Add padding around the target to increase the drag area.\n * @name Moveable#padding\n * @default null\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *  target: document.querySelector(\".target\"),\n *  padding: { left: 0, top: 0, right: 0, bottom: 0 },\n * });\n * moveable.padding = { left: 10, top: 10, right: 10, bottom: 10 },\n * moveable.updateRect();\n */\n", "import { convertCSSSize } from \"../../utils\";\nimport { ControlPose } from \"../../types\";\nimport { convertUnitSize } from \"@daybrush/utils\";\n\nconst RADIUS_DIRECTIONS = [\"nw\", \"ne\", \"se\", \"sw\"] as const;\n\nfunction calculateRatio(values: number[], size: number) {\n    const sumSize = values[0] + values[1];\n    const sumRatio = sumSize > size ? size / sumSize : 1;\n\n    values[0] *= sumRatio;\n    values[1] = size - values[1] * sumRatio;\n\n    return values;\n}\nexport const HORIZONTAL_RADIUS_ORDER = [1, 2, 5, 6];\nexport const VERTICAL_RADIUS_ORDER = [0, 3, 4, 7];\nexport const HORIZONTAL_RADIUS_DIRECTIONS = [1, -1, -1, 1] as const;\nexport const VERTICAL_RADIUS_DIRECTIONS = [1, 1, -1, -1] as const;\n\nexport function getRadiusStyles(\n    nextPoses: ControlPose[],\n    isRelative: boolean,\n    width: number,\n    height: number,\n    left = 0,\n    top = 0,\n    right: number = width,\n    bottom: number = height,\n) {\n    const clipStyles: string[] = [];\n    let isVertical = false;\n\n    const radiusPoses = nextPoses.filter(pos => !pos.virtual);\n    const raws = radiusPoses.map(posInfo => {\n        const { horizontal, vertical, pos } = posInfo;\n\n        if (vertical && !isVertical) {\n            isVertical = true;\n            clipStyles.push(\"/\");\n        }\n\n        if (isVertical) {\n            const rawPos = Math.max(0, vertical === 1 ? pos[1] - top : bottom - pos[1]);\n            clipStyles.push(convertCSSSize(rawPos, height, isRelative));\n\n            return rawPos;\n        } else {\n            const rawPos = Math.max(0, horizontal === 1 ? pos[0] - left : right - pos[0]);\n            clipStyles.push(convertCSSSize(rawPos, width, isRelative));\n\n            return rawPos;\n        }\n    });\n\n    return {\n        radiusPoses,\n        styles: clipStyles,\n        raws,\n    };\n}\nexport function getRadiusRange(controlPoses: ControlPose[]) {\n    // [start, length]\n    const horizontalRange = [0, 0];\n    const verticalRange = [0, 0];\n    const length = controlPoses.length;\n\n    for (let i = 0; i < length; ++i) {\n        const clipPose = controlPoses[i];\n\n        if (!clipPose.sub) {\n            continue;\n        }\n        if (clipPose.horizontal) {\n            if (horizontalRange[1] === 0) {\n                horizontalRange[0] = i;\n            }\n            horizontalRange[1] = i - horizontalRange[0] + 1;\n            verticalRange[0] = i + 1;\n        }\n        if (clipPose.vertical) {\n            if (verticalRange[1] === 0) {\n                verticalRange[0] = i;\n            }\n            verticalRange[1] = i - verticalRange[0] + 1;\n        }\n    }\n\n    return {\n        horizontalRange,\n        verticalRange,\n    };\n}\nexport function getRadiusValues(\n    values: string[],\n    width: number,\n    height: number,\n    left: number,\n    top: number,\n    minCounts: number[] = [0, 0],\n    full = false,\n): ControlPose[] {\n    const splitIndex = values.indexOf(\"/\");\n    const splitLength = (splitIndex > -1 ? values.slice(0, splitIndex) : values).length;\n    const horizontalValues = values.slice(0, splitLength);\n    const verticalValues = values.slice(splitLength + 1);\n    const horizontalValuesLength = horizontalValues.length;\n    const verticalValuesLength = verticalValues.length;\n    const hasVerticalValues = verticalValuesLength > 0;\n    const [\n        nwValue = \"0px\",\n        neValue = nwValue,\n        seValue = nwValue,\n        swValue = neValue,\n    ] = horizontalValues;\n    const [\n        wnValue = nwValue,\n        enValue = hasVerticalValues ? wnValue : neValue,\n        esValue = hasVerticalValues ? wnValue : seValue,\n        wsValue = hasVerticalValues ? enValue : swValue,\n    ] = verticalValues;\n\n    const horizontalRawPoses = [nwValue, neValue, seValue, swValue].map(pos => convertUnitSize(pos, width));\n    const verticalRawPoses = [wnValue, enValue, esValue, wsValue].map(pos => convertUnitSize(pos, height));\n    const horizontalPoses = horizontalRawPoses.slice();\n    const verticalPoses = verticalRawPoses.slice();\n\n    [horizontalPoses[0], horizontalPoses[1]] = calculateRatio(\n        [horizontalPoses[0], horizontalPoses[1]],\n        width,\n    );\n    [horizontalPoses[3], horizontalPoses[2]] = calculateRatio(\n        [horizontalPoses[3], horizontalPoses[2]],\n        width,\n    );\n    [verticalPoses[0], verticalPoses[3]] = calculateRatio(\n        [verticalPoses[0], verticalPoses[3]], height,\n    );\n    [verticalPoses[1], verticalPoses[2]] = calculateRatio(\n        [verticalPoses[1], verticalPoses[2]], height,\n    );\n\n    const nextHorizontalPoses = full\n        ? horizontalPoses\n        : horizontalPoses.slice(0, Math.max(minCounts[0], horizontalValuesLength));\n    const nextVerticalPoses = full\n        ? verticalPoses\n        : verticalPoses.slice(0, Math.max(minCounts[1], verticalValuesLength));\n\n    return [\n        ...nextHorizontalPoses.map((pos, i) => {\n            const direction = RADIUS_DIRECTIONS[i];\n\n            return {\n                virtual: i >= horizontalValuesLength,\n                horizontal: HORIZONTAL_RADIUS_DIRECTIONS[i],\n                vertical: 0,\n                pos: [left + pos, top + (VERTICAL_RADIUS_DIRECTIONS[i] === -1 ? height : 0)],\n                sub: true,\n                raw: horizontalRawPoses[i],\n                direction,\n            };\n        }),\n        ...nextVerticalPoses.map((pos, i) => {\n            const direction = RADIUS_DIRECTIONS[i];\n\n            return {\n                virtual: i >= verticalValuesLength,\n                horizontal: 0,\n                vertical: VERTICAL_RADIUS_DIRECTIONS[i],\n                pos: [left + (HORIZONTAL_RADIUS_DIRECTIONS[i] === -1 ? width : 0), top + pos],\n                sub: true,\n                raw: verticalRawPoses[i],\n                direction,\n            };\n        }),\n    ];\n}\nexport function removeRadiusPos(\n    controlPoses: ControlPose[],\n    poses: number[][],\n    index: number,\n    startIndex: number,\n    length: number = poses.length,\n) {\n    const {\n        horizontalRange,\n        verticalRange,\n    } = getRadiusRange(controlPoses.slice(startIndex));\n    const radiuslIndex = index - startIndex;\n    let deleteCount = 0;\n\n    if (radiuslIndex === 0) {\n        deleteCount = length;\n    } else if (radiuslIndex > 0 && radiuslIndex < horizontalRange[1]) {\n        deleteCount = horizontalRange[1] - radiuslIndex;\n    } else if (radiuslIndex >= verticalRange[0]) {\n        deleteCount = verticalRange[0] + verticalRange[1] - radiuslIndex;\n    } else {\n        return;\n    }\n    controlPoses.splice(index, deleteCount);\n    poses.splice(index, deleteCount);\n}\nexport function addRadiusPos(\n    controlPoses: ControlPose[],\n    poses: number[][],\n    startIndex: number,\n    horizontalIndex: number,\n    verticalIndex: number,\n    distX: number,\n    distY: number,\n    right: number,\n    bottom: number,\n    left = 0,\n    top = 0,\n) {\n    const {\n        horizontalRange,\n        verticalRange,\n    } = getRadiusRange(controlPoses.slice(startIndex));\n    if (horizontalIndex > -1) {\n        const radiusX = HORIZONTAL_RADIUS_DIRECTIONS[horizontalIndex] === 1\n            ? distX - left\n            : right - distX;\n        for (let i = horizontalRange[1]; i <= horizontalIndex; ++i) {\n            const y = VERTICAL_RADIUS_DIRECTIONS[i] === 1 ? top : bottom;\n            let x = 0;\n            if (horizontalIndex === i) {\n                x = distX;\n            } else if (i === 0) {\n                x = left + radiusX;\n            } else if (HORIZONTAL_RADIUS_DIRECTIONS[i] === -1) {\n                x = right - (poses[startIndex][0] - left);\n            }\n            controlPoses.splice(startIndex + i, 0, {\n                horizontal: HORIZONTAL_RADIUS_DIRECTIONS[i],\n                vertical: 0,\n                pos: [x, y],\n            });\n            poses.splice(startIndex + i, 0, [x, y]);\n\n            if (i === 0) {\n                break;\n            }\n        }\n    } else if (verticalIndex > - 1) {\n        const radiusY = VERTICAL_RADIUS_DIRECTIONS[verticalIndex] === 1\n            ? distY - top\n            : bottom - distY;\n        if (horizontalRange[1] === 0 && verticalRange[1] === 0) {\n            const pos = [\n                left + radiusY,\n                top,\n            ];\n            controlPoses.push({\n                horizontal: HORIZONTAL_RADIUS_DIRECTIONS[0],\n                vertical: 0,\n                pos,\n            });\n            poses.push(pos);\n        }\n\n        const startVerticalIndex = verticalRange[0];\n        for (let i = verticalRange[1]; i <= verticalIndex; ++i) {\n            const x = HORIZONTAL_RADIUS_DIRECTIONS[i] === 1 ? left : right;\n            let y = 0;\n            if (verticalIndex === i) {\n                y = distY;\n            } else if (i === 0) {\n                y = top + radiusY;\n            } else if (VERTICAL_RADIUS_DIRECTIONS[i] === 1) {\n                y = poses[startIndex + startVerticalIndex][1];\n            } else if (VERTICAL_RADIUS_DIRECTIONS[i] === -1) {\n                y = bottom - (poses[startIndex + startVerticalIndex][1] - top);\n            }\n            controlPoses.push({\n                horizontal: 0,\n                vertical: VERTICAL_RADIUS_DIRECTIONS[i],\n                pos: [x, y],\n            });\n            poses.push([x, y]);\n            if (i === 0) {\n                break;\n            }\n        }\n    }\n}\nexport function splitRadiusPoses(\n    controlPoses: ControlPose[],\n    raws: number[] = controlPoses.map(pos => pos.raw!),\n) {\n    const horizontals = controlPoses\n        .map((pos, i) => pos.horizontal ? raws[i] : null).filter(pos => pos != null) as number[];\n    const verticals = controlPoses\n        .map((pos, i) => pos.vertical ? raws[i] : null).filter(pos => pos != null) as number[];\n\n    return {\n        horizontals,\n        verticals,\n    };\n}\n", "import { splitBracket, splitComma, convertUnitSize, splitSpace, splitUnit } from \"@daybrush/utils\";\nimport { minus } from \"@scena/matrix\";\nimport { abs, convertCSSSize } from \"../../utils\";\nimport { getRadiusStyles, getRadiusValues } from \"../roundable/borderRadius\";\nimport { MoveableManagerInterface, ClippableProps, ControlPose } from \"../../types\";\nimport { getMinMaxs } from \"overlap-area\";\nimport { getCachedStyle } from \"../../store/Store\";\n\n\nexport const CLIP_DIRECTIONS = [\n    [0, -1, \"n\"],\n    [1, 0, \"e\"],\n] as const;\n\nexport const CLIP_RECT_DIRECTIONS = [\n    [-1, -1, \"nw\"],\n    [0, -1, \"n\"],\n    [1, -1, \"ne\"],\n    [1, 0, \"e\"],\n    [1, 1, \"se\"],\n    [0, 1, \"s\"],\n    [-1, 1, \"sw\"],\n    [-1, 0, \"w\"],\n] as const;\n\n// 1 2 5 6 0 3 4 7\n// 0 1 2 3 4 5 6 7\n\nexport function getClipStyles(\n    moveable: MoveableManagerInterface<ClippableProps>,\n    clipPath: ReturnType<typeof getClipPath>,\n    poses: number[][],\n) {\n    const {\n        clipRelative,\n    } = moveable.props;\n    const {\n        width,\n        height,\n    } = moveable.state;\n    const {\n        type: clipType,\n        poses: clipPoses,\n    } = clipPath!;\n\n    const isRect = clipType === \"rect\";\n    const isCircle = clipType === \"circle\";\n    if (clipType === \"polygon\") {\n        return poses.map(pos => `${convertCSSSize(pos[0], width, clipRelative)} ${convertCSSSize(pos[1], height, clipRelative)}`);\n    } else if (isRect || clipType === \"inset\") {\n        const top = poses[1][1];\n        const right = poses[3][0];\n        const left = poses[7][0];\n        const bottom = poses[5][1];\n\n        if (isRect) {\n            return [\n                top,\n                right,\n                bottom,\n                left,\n            ].map(pos => `${pos}px`);\n        }\n        const clipStyles\n            = [top, width - right, height - bottom, left]\n                .map((pos, i) => convertCSSSize(pos, i % 2 ? width : height, clipRelative));\n\n        if (poses.length > 8) {\n            const [subWidth, subHeight] = minus(poses[4], poses[0]);\n\n            clipStyles.push(\"round\", ...getRadiusStyles(\n                clipPoses.slice(8).map((info, i) => {\n                    return {\n                        ...info,\n                        pos: poses[i],\n                    };\n                }),\n                clipRelative!,\n                subWidth,\n                subHeight,\n                left, top, right, bottom,\n            ).styles);\n        }\n        return clipStyles;\n    } else if (isCircle || clipType === \"ellipse\") {\n        const center = poses[0];\n        const ry = convertCSSSize(\n            abs(poses[1][1] - center[1]),\n            isCircle ? Math.sqrt((width * width + height * height) / 2) : height,\n            clipRelative,\n        );\n\n        const clipStyles = isCircle ? [ry]\n            : [convertCSSSize(abs(poses[2][0] - center[0]), width, clipRelative), ry];\n\n        clipStyles.push(\n            \"at\", convertCSSSize(center[0], width, clipRelative),\n            convertCSSSize(center[1], height, clipRelative));\n\n        return clipStyles;\n    }\n}\n\nexport function getRectPoses(top: number, right: number, bottom: number, left: number): ControlPose[] {\n    const xs = [left, (left + right) / 2, right];\n    const ys = [top, (top + bottom) / 2, bottom];\n\n    return CLIP_RECT_DIRECTIONS.map(([dirx, diry, dir]) => {\n        const x = xs[dirx + 1];\n        const y = ys[diry + 1];\n        return {\n            vertical: abs(diry),\n            horizontal: abs(dirx),\n            direction: dir,\n            pos: [x, y],\n        };\n    });\n}\n\nexport function getControlSize(\n    controlPoses: ControlPose[],\n) {\n    const xRange = [Infinity, -Infinity];\n    const yRange = [Infinity, -Infinity];\n\n    controlPoses.forEach(({ pos }) => {\n        xRange[0] = Math.min(xRange[0], pos[0]);\n        xRange[1] = Math.max(xRange[1], pos[0]);\n        yRange[0] = Math.min(yRange[0], pos[1]);\n        yRange[1] = Math.max(yRange[1], pos[1]);\n    });\n\n    return [\n        abs(xRange[1] - xRange[0]),\n        abs(yRange[1] - yRange[0]),\n    ];\n}\n\n\nexport function getClipPath(\n    target: HTMLElement | SVGElement | undefined | null,\n    width: number,\n    height: number,\n    defaultClip?: string,\n    customClip?: string,\n) {\n    if (!target) {\n        return;\n    }\n    let clipText: string | undefined = customClip;\n\n    if (!clipText) {\n        const getStyle = getCachedStyle(target!);\n        const clipPath = getStyle(\"clipPath\");\n\n        clipText = clipPath !== \"none\" ? clipPath : getStyle(\"clip\");\n    }\n    if (!clipText || clipText === \"none\" || clipText === \"auto\") {\n        clipText = defaultClip;\n\n        if (!clipText) {\n            return;\n        }\n    }\n    const {\n        prefix: clipPrefix = clipText,\n        value = \"\",\n    } = splitBracket(clipText);\n    const isCircle = clipPrefix === \"circle\";\n    let splitter = \" \";\n\n    if (clipPrefix === \"polygon\") {\n        const values = splitComma(value! || `0% 0%, 100% 0%, 100% 100%, 0% 100%`);\n        splitter = \",\";\n\n        const poses: ControlPose[] = values.map(pos => {\n            const [xPos, yPos] = pos.split(\" \");\n\n            return {\n                vertical: 1,\n                horizontal: 1,\n                pos: [\n                    convertUnitSize(xPos, width),\n                    convertUnitSize(yPos, height),\n                ],\n            };\n        });\n        const minMaxs = getMinMaxs(poses.map(pos => pos.pos));\n\n        return {\n            type: clipPrefix,\n            clipText,\n            poses,\n            splitter,\n            left: minMaxs.minX,\n            right: minMaxs.maxX,\n            top: minMaxs.minY,\n            bottom: minMaxs.maxY,\n        } as const;\n    } else if (isCircle || clipPrefix === \"ellipse\") {\n        let xPos = \"\";\n        let yPos = \"\";\n        let radiusX = 0;\n        let radiusY = 0;\n        const values = splitSpace(value!);\n\n        if (isCircle) {\n            let radius = \"\";\n            [radius = \"50%\", , xPos = \"50%\", yPos = \"50%\"] = values;\n\n            radiusX = convertUnitSize(radius, Math.sqrt((width * width + height * height) / 2));\n            radiusY = radiusX;\n        } else {\n            let xRadius = \"\";\n            let yRadius = \"\";\n            [xRadius = \"50%\", yRadius = \"50%\", , xPos = \"50%\", yPos = \"50%\"] = values;\n\n            radiusX = convertUnitSize(xRadius, width);\n            radiusY = convertUnitSize(yRadius, height);\n        }\n        const centerPos = [\n            convertUnitSize(xPos, width),\n            convertUnitSize(yPos, height),\n        ];\n        const poses: ControlPose[] = [\n            {\n                vertical: 1,\n                horizontal: 1,\n                pos: centerPos,\n                direction: \"nesw\",\n            },\n            ...CLIP_DIRECTIONS.slice(0, isCircle ? 1 : 2).map(dir => ({\n                vertical: abs(dir[1]),\n                horizontal: dir[0],\n                direction: dir[2],\n                sub: true,\n                pos: [\n                    centerPos[0] + dir[0] * radiusX,\n                    centerPos[1] + dir[1] * radiusY,\n                ],\n            })),\n        ];\n        return {\n            type: clipPrefix as \"circle\" | \"ellipse\",\n            clipText,\n            radiusX,\n            radiusY,\n            left: centerPos[0] - radiusX,\n            top: centerPos[1] - radiusY,\n            right: centerPos[0] + radiusX,\n            bottom: centerPos[1] + radiusY,\n            poses,\n            splitter,\n        } as const;\n    } else if (clipPrefix === \"inset\") {\n        const values = splitSpace(value! || \"0 0 0 0\");\n        const roundIndex = values.indexOf(\"round\");\n\n        const rectLength = (roundIndex > -1 ? values.slice(0, roundIndex) : values).length;\n        const radiusValues = values.slice(rectLength + 1);\n        const [\n            topValue,\n            rightValue = topValue,\n            bottomValue = topValue,\n            leftValue = rightValue,\n        ] = values.slice(0, rectLength);\n        const [top, bottom] = [topValue, bottomValue].map(pos => convertUnitSize(pos, height));\n        const [left, right] = [leftValue, rightValue].map(pos => convertUnitSize(pos, width));\n        const nextRight = width - right;\n        const nextBottom = height - bottom;\n        const radiusPoses = getRadiusValues(\n            radiusValues,\n            nextRight - left,\n            nextBottom - top,\n            left,\n            top,\n        );\n        const poses: ControlPose[] = [\n            ...getRectPoses(top, nextRight, nextBottom, left),\n            ...radiusPoses,\n        ];\n\n        return {\n            type: \"inset\",\n            clipText,\n            poses,\n            top,\n            left,\n            right: nextRight,\n            bottom: nextBottom,\n            radius: radiusValues,\n            splitter,\n        } as const;\n    } else if (clipPrefix === \"rect\") {\n        // top right bottom left\n        const values = splitComma(value! || `0px, ${width}px, ${height}px, 0px`);\n\n        splitter = \",\";\n        const [top, right, bottom, left] = values.map(pos => {\n            const { value: posValue } = splitUnit(pos);\n\n            return posValue;\n        });\n        const poses = getRectPoses(top, right, bottom, left);\n\n        return {\n            type: \"rect\",\n            clipText,\n            poses,\n            top,\n            right,\n            bottom,\n            left,\n            values,\n            splitter,\n        } as const;\n    }\n    return;\n}\n", "import {\n    Renderer, ClippableProps, OnClip,\n    ClippableState, OnClipEnd, OnClipStart,\n    ControlPose, MoveableManagerInterface, DraggableProps,\n} from \"../types\";\nimport { convertUnitSize, getRad } from \"@daybrush/utils\";\nimport {\n    prefix, calculatePosition, getDiagonalSize,\n    fillParams, triggerEvent,\n    makeMatrixCSS, getRect, fillEndParams,\n    getSizeDistByDist,\n    getProps,\n    fillCSSObject,\n    abs,\n    sign,\n} from \"../utils\";\nimport { plus, minus, multiply } from \"@scena/matrix\";\nimport { getDragDist, calculatePointerDist, setDragStart } from \"../gesto/GestoUtils\";\nimport {\n    HORIZONTAL_RADIUS_ORDER, VERTICAL_RADIUS_ORDER, addRadiusPos, removeRadiusPos,\n} from \"./roundable/borderRadius\";\nimport { renderLine } from \"../renderDirections\";\nimport { checkSnapBoundPriority } from \"./snappable/snap\";\nimport { checkSnapBounds } from \"./snappable/snapBounds\";\nimport { getDefaultGuidelines } from \"./snappable/getTotalGuidelines\";\nimport {\n    getControlSize, getClipPath,\n    getClipStyles, getRectPoses,\n} from \"./clippable/utils\";\n\nexport function moveControlPos(\n    controlPoses: ControlPose[],\n    index: number,\n    dist: number[],\n    isRect?: boolean,\n    keepRatio?: boolean,\n) {\n    const { direction, sub } = controlPoses[index];\n    const dists = controlPoses.map(() => [0, 0]);\n    const directions = direction ? direction.split(\"\") : [];\n\n    if (isRect && index < 8) {\n        const verticalDirections = directions.filter(dir => dir === \"w\" || dir === \"e\");\n        const horizontalDirections = directions.filter(dir => dir === \"n\" || dir === \"s\");\n\n        const verticalDirection = verticalDirections[0];\n        const horizontalDirection = horizontalDirections[0];\n\n        dists[index] = dist;\n        const [width, height] = getControlSize(controlPoses);\n        const ratio = width && height ? width / height : 0;\n\n        if (ratio && keepRatio) {\n            // 0 1 2\n            // 7   3\n            // 6 5 4\n            const fixedIndex = (index + 4) % 8;\n            const fixedPosition = controlPoses[fixedIndex].pos;\n            const sizeDirection = [0, 0];\n\n            if (direction!.indexOf(\"w\") > -1) {\n                sizeDirection[0] = -1;\n            } else if (direction!.indexOf(\"e\") > -1) {\n                sizeDirection[0] = 1;\n            }\n            if (direction!.indexOf(\"n\") > -1) {\n                sizeDirection[1] = -1;\n            } else if (direction!.indexOf(\"s\") > -1) {\n                sizeDirection[1] = 1;\n            }\n\n\n            const nextDist = getSizeDistByDist(\n                [width, height],\n                dist,\n                ratio,\n                sizeDirection,\n                true,\n            );\n            const nextWidth = width + nextDist[0];\n            const nextHeight = height + nextDist[1];\n            let top = fixedPosition[1];\n            let bottom = fixedPosition[1];\n            let left = fixedPosition[0];\n            let right = fixedPosition[0];\n\n            if (sizeDirection[0] === -1) {\n                left = right - nextWidth;\n            } else if (sizeDirection[0] === 1) {\n                right = left + nextWidth;\n            } else {\n                left = left - nextWidth / 2;\n                right = right + nextWidth / 2;\n            }\n            if (sizeDirection[1] === -1) {\n                top = bottom - nextHeight;\n            } else if (sizeDirection[1] === 1) {\n                bottom = top + nextHeight;\n            } else {\n                top = bottom - nextHeight / 2;\n                bottom = top + nextHeight;\n            }\n\n            const nextControlPoses = getRectPoses(top, right, bottom, left);\n\n            controlPoses.forEach((controlPose, i) => {\n                dists[i][0] = nextControlPoses[i].pos[0] - controlPose.pos[0];\n                dists[i][1] = nextControlPoses[i].pos[1] - controlPose.pos[1];\n            });\n        } else {\n            controlPoses.forEach((controlPose, i) => {\n                const {\n                    direction: controlDir,\n                } = controlPose;\n\n                if (!controlDir) {\n                    return;\n                }\n                if (controlDir.indexOf(verticalDirection) > -1) {\n                    dists[i][0] = dist[0];\n                }\n                if (controlDir.indexOf(horizontalDirection) > -1) {\n                    dists[i][1] = dist[1];\n                }\n            });\n            if (verticalDirection) {\n                dists[1][0] = dist[0] / 2;\n                dists[5][0] = dist[0] / 2;\n            }\n            if (horizontalDirection) {\n                dists[3][1] = dist[1] / 2;\n                dists[7][1] = dist[1] / 2;\n            }\n        }\n    } else if (direction && !sub) {\n        directions.forEach(dir => {\n            const isVertical = dir === \"n\" || dir === \"s\";\n\n            controlPoses.forEach((controlPose, i) => {\n                const {\n                    direction: dirDir,\n                    horizontal: dirHorizontal,\n                    vertical: dirVertical,\n                } = controlPose;\n\n                if (!dirDir || dirDir.indexOf(dir) === -1) {\n                    return;\n                }\n                dists[i] = [\n                    isVertical || !dirHorizontal ? 0 : dist[0],\n                    !isVertical || !dirVertical ? 0 : dist[1],\n                ];\n            });\n        });\n    } else {\n        dists[index] = dist;\n    }\n\n    return dists;\n}\n\n\nfunction addClipPath(moveable: MoveableManagerInterface<ClippableProps>, e: any) {\n    const [distX, distY] = calculatePointerDist(moveable, e);\n    const { clipPath, clipIndex } = e.datas;\n    const {\n        type: clipType,\n        poses: clipPoses,\n        splitter,\n    } = (clipPath as ReturnType<typeof getClipPath>)!;\n    const poses = clipPoses.map(pos => pos.pos);\n    if (clipType === \"polygon\") {\n        poses.splice(clipIndex, 0, [distX, distY]);\n    } else if (clipType === \"inset\") {\n        const horizontalIndex = HORIZONTAL_RADIUS_ORDER.indexOf(clipIndex);\n        const verticalIndex = VERTICAL_RADIUS_ORDER.indexOf(clipIndex);\n        const length = clipPoses.length;\n\n        addRadiusPos(\n            clipPoses,\n            poses,\n            8,\n            horizontalIndex,\n            verticalIndex,\n            distX,\n            distY,\n            poses[4][0],\n            poses[4][1],\n            poses[0][0],\n            poses[0][1],\n        );\n\n        if (length === clipPoses.length) {\n            return;\n        }\n    } else {\n        return;\n    }\n    const clipStyles = getClipStyles(moveable, clipPath, poses)!;\n    const clipStyle = `${clipType}(${clipStyles.join(splitter)})`;\n\n    triggerEvent(moveable, \"onClip\", fillParams<OnClip>(moveable, e, {\n        clipEventType: \"added\",\n        clipType,\n        poses,\n        clipStyles,\n        clipStyle,\n        distX: 0,\n        distY: 0,\n        ...fillCSSObject({\n            clipPath: clipStyle,\n        }, e),\n    }));\n}\nfunction removeClipPath(moveable: MoveableManagerInterface<ClippableProps>, e: any) {\n    const { clipPath, clipIndex } = e.datas;\n    const {\n        type: clipType,\n        poses: clipPoses,\n        splitter,\n    } = (clipPath as ReturnType<typeof getClipPath>)!;\n    const poses = clipPoses.map(pos => pos.pos);\n    const length = poses.length;\n    if (clipType === \"polygon\") {\n        clipPoses.splice(clipIndex, 1);\n        poses.splice(clipIndex, 1);\n    } else if (clipType === \"inset\") {\n        if (clipIndex < 8) {\n            return;\n        }\n        removeRadiusPos(clipPoses, poses, clipIndex, 8, length);\n\n        if (length === clipPoses.length) {\n            return;\n        }\n    } else {\n        return;\n    }\n    const clipStyles = getClipStyles(moveable, clipPath, poses)!;\n    const clipStyle = `${clipType}(${clipStyles.join(splitter)})`;\n\n    triggerEvent(moveable, \"onClip\", fillParams<OnClip>(moveable, e, {\n        clipEventType: \"removed\",\n        clipType,\n        poses,\n        clipStyles,\n        clipStyle,\n        distX: 0,\n        distY: 0,\n        ...fillCSSObject({\n            clipPath: clipStyle,\n        }, e),\n    }));\n}\n/**\n * @namespace Moveable.Clippable\n * @description Whether to clip the target.\n */\n\nexport default {\n    name: \"clippable\",\n    props: [\n        \"clippable\",\n        \"defaultClipPath\",\n        \"customClipPath\",\n        \"keepRatio\",\n        \"clipRelative\",\n        \"clipArea\",\n        \"dragWithClip\",\n        \"clipTargetBounds\",\n        \"clipVerticalGuidelines\",\n        \"clipHorizontalGuidelines\",\n        \"clipSnapThreshold\",\n    ] as const,\n    events: [\n        \"clipStart\",\n        \"clip\",\n        \"clipEnd\",\n    ] as const,\n    css: [\n        `.control.clip-control {\nbackground: #6d6;\ncursor: pointer;\n}\n.control.clip-control.clip-radius {\nbackground: #d66;\n}\n.line.clip-line {\nbackground: #6e6;\ncursor: move;\nz-index: 1;\n}\n.clip-area {\nposition: absolute;\ntop: 0;\nleft: 0;\n}\n.clip-ellipse {\nposition: absolute;\ncursor: move;\nborder: 1px solid #6d6;\nborder: var(--zoompx) solid #6d6;\nborder-radius: 50%;\ntransform-origin: 0px 0px;\n}`,\n        `:host {\n--bounds-color: #d66;\n}`,\n        `.guideline {\npointer-events: none;\nz-index: 2;\n}`,\n        `.line.guideline.bounds {\nbackground: #d66;\nbackground: var(--bounds-color);\n}`,\n    ],\n    render(moveable: MoveableManagerInterface<ClippableProps, ClippableState>, React: Renderer): any[] {\n        const {\n            customClipPath,\n            defaultClipPath,\n            clipArea, zoom,\n            groupable,\n        } = moveable.props;\n        const {\n            target, width, height, allMatrix, is3d, left, top,\n            pos1, pos2, pos3, pos4,\n            clipPathState,\n            snapBoundInfos,\n            rotation: rotationRad,\n        } = moveable.getState();\n\n        if (!target || groupable) {\n            return [];\n        }\n\n        const clipPath = getClipPath(\n            target, width, height, defaultClipPath || \"inset\", clipPathState || customClipPath);\n\n        if (!clipPath) {\n            return [];\n        }\n        const n = is3d ? 4 : 3;\n        const type = clipPath.type;\n        const clipPoses = clipPath.poses;\n        const poses = clipPoses.map(pos => {\n            // return [x, y];\n            const calculatedPos = calculatePosition(allMatrix, pos.pos, n);\n\n            return [\n                calculatedPos[0] - left,\n                calculatedPos[1] - top,\n            ];\n        });\n\n        let controls: any[] = [];\n        let lines: any[] = [];\n\n        const isRect = type === \"rect\";\n        const isInset = type === \"inset\";\n        const isPolygon = type === \"polygon\";\n\n        if (isRect || isInset || isPolygon) {\n            const linePoses = isInset ? poses.slice(0, 8) : poses;\n\n            lines = linePoses.map((to, i) => {\n                const from = i === 0 ? linePoses[linePoses.length - 1] : linePoses[i - 1];\n\n                const rad = getRad(from, to);\n                const dist = getDiagonalSize(from, to);\n                return <div key={`clipLine${i}`} className={prefix(\"line\", \"clip-line\", \"snap-control\")}\n                    data-clip-index={i}\n                    style={{\n                        width: `${dist}px`,\n                        transform: `translate(${from[0]}px, ${from[1]}px) rotate(${rad}rad) scaleY(${zoom})`,\n                    }}></div>;\n            });\n        }\n        controls = poses.map((pos, i) => {\n            return <div key={`clipControl${i}`}\n                className={prefix(\"control\", \"clip-control\", \"snap-control\")}\n                data-clip-index={i}\n                style={{\n                    transform: `translate(${pos[0]}px, ${pos[1]}px) rotate(${rotationRad}rad) scale(${zoom})`,\n                }}></div>;\n        });\n\n        if (isInset) {\n            controls.push(...poses.slice(8).map((pos, i) => {\n                return <div key={`clipRadiusControl${i}`}\n                    className={prefix(\"control\", \"clip-control\", \"clip-radius\", \"snap-control\")}\n                    data-clip-index={8 + i}\n                    style={{\n                        transform: `translate(${pos[0]}px, ${pos[1]}px) rotate(${rotationRad}rad) scale(${zoom})`,\n                    }}></div>;\n            }));\n        }\n        if (type === \"circle\" || type === \"ellipse\") {\n            const {\n                left: clipLeft,\n                top: clipTop,\n                radiusX,\n                radiusY,\n            } = clipPath;\n\n            const [distLeft, distTop] = minus(\n                calculatePosition(allMatrix, [clipLeft!, clipTop!], n),\n                calculatePosition(allMatrix, [0, 0], n),\n            );\n            let ellipseClipPath = \"none\";\n\n            if (!clipArea) {\n                const piece = Math.max(10, radiusX! / 5, radiusY! / 5);\n                const areaPoses: number[][] = [];\n\n                for (let i = 0; i <= piece; ++i) {\n                    const rad = Math.PI * 2 / piece * i;\n                    areaPoses.push([\n                        radiusX! + (radiusX! - zoom!) * Math.cos(rad),\n                        radiusY! + (radiusY! - zoom!) * Math.sin(rad),\n                    ]);\n                }\n                areaPoses.push([radiusX!, -2]);\n                areaPoses.push([-2, -2]);\n                areaPoses.push([-2, radiusY! * 2 + 2]);\n                areaPoses.push([radiusX! * 2 + 2, radiusY! * 2 + 2]);\n                areaPoses.push([radiusX! * 2 + 2, -2]);\n                areaPoses.push([radiusX!, -2]);\n\n                ellipseClipPath = `polygon(${areaPoses.map(pos => `${pos[0]}px ${pos[1]}px`).join(\", \")})`;\n            }\n            controls.push(<div key=\"clipEllipse\" className={prefix(\"clip-ellipse\", \"snap-control\")} style={{\n                width: `${radiusX! * 2}px`,\n                height: `${radiusY! * 2}px`,\n                clipPath: ellipseClipPath,\n                transform: `translate(${-left + distLeft}px, ${-top + distTop}px) ${makeMatrixCSS(allMatrix)}`,\n            }}></div>);\n        }\n        if (clipArea) {\n            const {\n                width: allWidth,\n                height: allHeight,\n                left: allLeft,\n                top: allTop,\n            } = getRect([pos1, pos2, pos3, pos4, ...poses]);\n            if (isPolygon || isRect || isInset) {\n                const areaPoses = isInset ? poses.slice(0, 8) : poses;\n                controls.push(<div key=\"clipArea\" className={prefix(\"clip-area\", \"snap-control\")} style={{\n                    width: `${allWidth}px`,\n                    height: `${allHeight}px`,\n                    transform: `translate(${allLeft}px, ${allTop}px)`,\n                    clipPath: `polygon(${areaPoses.map(pos => `${pos[0] - allLeft}px ${pos[1] - allTop}px`).join(\", \")})`,\n                }}></div>);\n            }\n        }\n        if (snapBoundInfos) {\n            ([\"vertical\", \"horizontal\"] as const).forEach(directionType => {\n                const info = snapBoundInfos[directionType];\n                const isHorizontal = directionType === \"horizontal\";\n\n                if (info.isSnap) {\n                    lines.push(...info.snap.posInfos.map(({ pos }, i) => {\n                        const snapPos1 = minus(calculatePosition(\n                            allMatrix, isHorizontal ? [0, pos] : [pos, 0], n), [left, top]);\n                        const snapPos2 = minus(calculatePosition(\n                            allMatrix, isHorizontal ? [width, pos] : [pos, height], n), [left, top]);\n\n                        return renderLine(\n                            React, \"\", snapPos1, snapPos2, zoom!,\n                            `clip${directionType}snap${i}`, \"guideline\");\n                    }));\n                }\n                if (info.isBound) {\n                    lines.push(...info.bounds.map(({ pos }, i) => {\n                        const snapPos1 = minus(calculatePosition(\n                            allMatrix, isHorizontal ? [0, pos] : [pos, 0], n), [left, top]);\n                        const snapPos2 = minus(calculatePosition(\n                            allMatrix, isHorizontal ? [width, pos] : [pos, height], n), [left, top]);\n\n                        return renderLine(\n                            React, \"\", snapPos1, snapPos2, zoom!,\n                            `clip${directionType}bounds${i}`, \"guideline\", \"bounds\", \"bold\");\n                    }));\n                }\n            });\n        }\n        return [\n            ...controls,\n            ...lines,\n        ];\n    },\n    dragControlCondition(moveable: any, e: any) {\n        return e.inputEvent && (e.inputEvent.target.getAttribute(\"class\") || \"\").indexOf(\"clip\") > -1;\n    },\n    dragStart(moveable: MoveableManagerInterface<ClippableProps, ClippableState>, e: any) {\n        const props = moveable.props;\n        const {\n            dragWithClip = true,\n        } = props;\n\n        if (dragWithClip) {\n            return false;\n        }\n\n        return this.dragControlStart(moveable, e);\n    },\n    drag(moveable: MoveableManagerInterface<ClippableProps, ClippableState>, e: any) {\n        return this.dragControl(moveable, { ...e, isDragTarget: true });\n    },\n    dragEnd(moveable: MoveableManagerInterface<ClippableProps, ClippableState>, e: any) {\n        return this.dragControlEnd(moveable, e);\n    },\n    dragControlStart(moveable: MoveableManagerInterface<ClippableProps, ClippableState>, e: any) {\n        const state = moveable.state;\n        const { defaultClipPath, customClipPath } = moveable.props;\n        const { target, width, height } = state;\n        const inputTarget = e.inputEvent ? e.inputEvent.target : null;\n        const className = (inputTarget && inputTarget.getAttribute(\"class\")) || \"\";\n        const datas = e.datas;\n        const clipPath = getClipPath(target!, width, height, defaultClipPath || \"inset\", customClipPath);\n\n        if (!clipPath) {\n            return false;\n        }\n        const { clipText, type, poses } = clipPath;\n        const result = triggerEvent(moveable, \"onClipStart\", fillParams<OnClipStart>(moveable, e, {\n            clipType: type,\n            clipStyle: clipText,\n            poses: poses.map(pos => pos.pos),\n        }));\n\n        if (result === false) {\n            datas.isClipStart = false;\n            return false;\n        }\n        datas.isControl = className && className.indexOf(\"clip-control\") > -1;\n        datas.isLine = className.indexOf(\"clip-line\") > -1;\n        datas.isArea = className.indexOf(\"clip-area\") > -1 || className.indexOf(\"clip-ellipse\") > -1;\n        datas.clipIndex = inputTarget ? parseInt(inputTarget.getAttribute(\"data-clip-index\"), 10) : -1;\n        datas.clipPath = clipPath;\n        datas.isClipStart = true;\n        state.clipPathState = clipText;\n        setDragStart(moveable, e);\n\n        return true;\n    },\n    dragControl(moveable: MoveableManagerInterface<ClippableProps & DraggableProps, ClippableState>, e: any) {\n        const { datas, originalDatas, isDragTarget } = e;\n\n        if (!datas.isClipStart) {\n            return false;\n        }\n        const { isControl, isLine, isArea, clipIndex, clipPath } = datas as {\n            clipPath: ReturnType<typeof getClipPath>,\n            [key: string]: any,\n        };\n        if (!clipPath) {\n            return false;\n        }\n        const props = getProps(moveable.props, \"clippable\");\n\n        const { keepRatio } = props;\n        let distX = 0;\n        let distY = 0;\n\n        const originalDraggable = originalDatas.draggable;\n        const originalDist = getDragDist(e);\n\n        if (isDragTarget && originalDraggable) {\n            [distX, distY] = originalDraggable.prevBeforeDist;\n        } else {\n            [distX, distY] = originalDist;\n        }\n\n        const firstDist = [distX, distY];\n\n        const state = moveable.state;\n        const { width, height } = state;\n        const isDragWithTarget = !isArea && !isControl && !isLine;\n        const {\n            type: clipType,\n            poses: clipPoses,\n            splitter,\n        } = clipPath;\n        const poses = clipPoses.map(pos => pos.pos);\n\n        if (isDragWithTarget) {\n            distX = -distX;\n            distY = -distY;\n        }\n        const isAll = !isControl || clipPoses[clipIndex].direction === \"nesw\";\n        const isRect = clipType === \"inset\" || clipType === \"rect\";\n        let dists = clipPoses.map(() => [0, 0]);\n\n        if (isControl && !isAll) {\n            const { horizontal, vertical } = clipPoses[clipIndex];\n            const dist = [\n                distX * abs(horizontal),\n                distY * abs(vertical),\n            ];\n            dists = moveControlPos(clipPoses, clipIndex, dist, isRect, keepRatio);\n        } else if (isAll) {\n            dists = poses.map(() => [distX, distY]);\n        }\n        const nextPoses: number[][] = poses.map((pos, i) => plus(pos, dists[i]));\n        const guidePoses = [...nextPoses];\n\n        state.snapBoundInfos = null;\n        const isCircle = clipPath.type === \"circle\";\n        const isEllipse = clipPath.type === \"ellipse\";\n\n        if (isCircle || isEllipse) {\n            const guideRect = getRect(nextPoses);\n            const ry = abs(guideRect.bottom - guideRect.top);\n            const rx = abs(isEllipse ? guideRect.right - guideRect.left : ry);\n            const bottom = nextPoses[0][1] + ry;\n            const left = nextPoses[0][0] - rx;\n            const right = nextPoses[0][0] + rx;\n\n            // right\n            if (isCircle) {\n                guidePoses.push([right, guideRect.bottom]);\n                dists.push([1, 0]);\n            }\n            // bottom\n            guidePoses.push([guideRect.left, bottom]);\n            dists.push([0, 1]);\n            // left\n            guidePoses.push([left, guideRect.bottom]);\n            dists.push([1, 0]);\n        }\n\n        const guidelines = getDefaultGuidelines(\n            (props.clipHorizontalGuidelines || []).map(v => convertUnitSize(`${v}`, height)),\n            (props.clipVerticalGuidelines || []).map(v => convertUnitSize(`${v}`, width)),\n            width!, height!,\n        );\n        let guideXPoses: number[] = [];\n        let guideYPoses: number[] = [];\n\n        if (isCircle || isEllipse) {\n            guideXPoses = [guidePoses[4][0], guidePoses[2][0]];\n            guideYPoses = [guidePoses[1][1], guidePoses[3][1]];\n        } else if (isRect) {\n            const rectPoses = [guidePoses[0], guidePoses[2], guidePoses[4], guidePoses[6]];\n            const rectDists = [dists[0], dists[2], dists[4], dists[6]];\n\n            guideXPoses = rectPoses.filter((_, i) => rectDists[i][0]).map(pos => pos[0]);\n            guideYPoses = rectPoses.filter((_, i) => rectDists[i][1]).map(pos => pos[1]);\n        } else {\n            guideXPoses = guidePoses.filter((_, i) => dists[i][0]).map(pos => pos[0]);\n            guideYPoses = guidePoses.filter((_, i) => dists[i][1]).map(pos => pos[1]);\n        }\n        const boundDelta = [0, 0];\n        const {\n            horizontal: horizontalSnapInfo,\n            vertical: verticalSnapInfo,\n        } = checkSnapBounds(\n            guidelines,\n            props.clipTargetBounds && { left: 0, top: 0, right: width, bottom: height },\n            guideXPoses,\n            guideYPoses,\n            5,\n        );\n        let snapOffsetY = horizontalSnapInfo.offset;\n        let snapOffsetX = verticalSnapInfo.offset;\n\n        if (horizontalSnapInfo.isBound) {\n            boundDelta[1] += snapOffsetY;\n        }\n        if (verticalSnapInfo.isBound) {\n            boundDelta[0] += snapOffsetX;\n        }\n        if ((isEllipse || isCircle) && dists[0][0] === 0 && dists[0][1] === 0) {\n            const guideRect = getRect(nextPoses);\n            let cy = guideRect.bottom - guideRect.top;\n            let cx = isEllipse ? guideRect.right - guideRect.left : cy;\n\n\n            const distSnapX = verticalSnapInfo.isBound\n                ? abs(snapOffsetX)\n                : (verticalSnapInfo.snapIndex === 0 ? -snapOffsetX : snapOffsetX);\n            const distSnapY = horizontalSnapInfo.isBound\n                ? abs(snapOffsetY)\n                : (horizontalSnapInfo.snapIndex === 0 ? -snapOffsetY : snapOffsetY);\n            cx -= distSnapX;\n            cy -= distSnapY;\n\n            if (isCircle) {\n                cy = checkSnapBoundPriority(verticalSnapInfo, horizontalSnapInfo) > 0 ? cy : cx;\n                cx = cy;\n            }\n            const center = guidePoses[0];\n\n            guidePoses[1][1] = center[1] - cy;\n            guidePoses[2][0] = center[0] + cx;\n            guidePoses[3][1] = center[1] + cy;\n            guidePoses[4][0] = center[0] - cx;\n        } else if (isRect && keepRatio && isControl) {\n            const [width, height] = getControlSize(clipPoses);\n            const ratio = width && height ? width / height : 0;\n            const clipPose = clipPoses[clipIndex];\n            const direction = clipPose.direction! || \"\";\n            let top = guidePoses[1][1];\n            let bottom = guidePoses[5][1];\n            let left = guidePoses[7][0];\n            let right = guidePoses[3][0];\n\n            if (abs(snapOffsetY) <= abs(snapOffsetX)) {\n                snapOffsetY = sign(snapOffsetY) * abs(snapOffsetX) / ratio;\n            } else {\n                snapOffsetX = sign(snapOffsetX) * abs(snapOffsetY) * ratio;\n            }\n            if (direction!.indexOf(\"w\") > -1) {\n                left -= snapOffsetX;\n            } else if (direction!.indexOf(\"e\") > -1) {\n                right -= snapOffsetX;\n            } else {\n                left += snapOffsetX / 2;\n                right -= snapOffsetX / 2;\n            }\n            if (direction!.indexOf(\"n\") > -1) {\n                top -= snapOffsetY;\n            } else if (direction!.indexOf(\"s\") > -1) {\n                bottom -= snapOffsetY;\n            } else {\n                top += snapOffsetY / 2;\n                bottom -= snapOffsetY / 2;\n            }\n            const nextControlPoses = getRectPoses(top, right, bottom, left);\n\n            guidePoses.forEach((pos, i) => {\n                [pos[0], pos[1]] = nextControlPoses[i].pos;\n            });\n        } else {\n            guidePoses.forEach((pos, j) => {\n                const dist = dists[j];\n\n                if (dist[0]) {\n                    pos[0] -= snapOffsetX;\n                }\n                if (dist[1]) {\n                    pos[1] -= snapOffsetY;\n                }\n            });\n        }\n        const nextClipStyles = getClipStyles(moveable, clipPath, nextPoses)!;\n        const clipStyle = `${clipType}(${nextClipStyles.join(splitter)})`;\n\n        state.clipPathState = clipStyle;\n\n        if (isCircle || isEllipse) {\n            guideXPoses = [guidePoses[4][0], guidePoses[2][0]];\n            guideYPoses = [guidePoses[1][1], guidePoses[3][1]];\n        } else if (isRect) {\n            const rectPoses = [guidePoses[0], guidePoses[2], guidePoses[4], guidePoses[6]];\n\n            guideXPoses = rectPoses.map(pos => pos[0]);\n            guideYPoses = rectPoses.map(pos => pos[1]);\n        } else {\n            guideXPoses = guidePoses.map(pos => pos[0]);\n            guideYPoses = guidePoses.map(pos => pos[1]);\n        }\n        state.snapBoundInfos = checkSnapBounds(\n            guidelines,\n            props.clipTargetBounds && { left: 0, top: 0, right: width, bottom: height },\n            guideXPoses,\n            guideYPoses,\n            1,\n        );\n\n        if (originalDraggable) {\n            const {\n                is3d,\n                allMatrix,\n            } = state;\n            const n = is3d ? 4 : 3;\n\n            let dragDist = boundDelta;\n\n            if (isDragTarget) {\n                dragDist = [\n                    firstDist[0] + boundDelta[0] - originalDist[0],\n                    firstDist[1] + boundDelta[1] - originalDist[1],\n                ];\n            }\n            originalDraggable.deltaOffset = multiply(allMatrix, [dragDist[0], dragDist[1], 0, 0], n);\n        }\n        triggerEvent(moveable, \"onClip\", fillParams<OnClip>(moveable, e, {\n            clipEventType: \"changed\",\n            clipType,\n            poses: nextPoses,\n            clipStyle,\n            clipStyles: nextClipStyles,\n            distX,\n            distY,\n            ...fillCSSObject({\n                [clipType === \"rect\" ? \"clip\" : \"clipPath\"]: clipStyle,\n            }, e),\n        }));\n\n        return true;\n    },\n    dragControlEnd(moveable: MoveableManagerInterface<ClippableProps, ClippableState>, e: any) {\n        this.unset(moveable);\n        const { isDrag, datas, isDouble } = e;\n        const { isLine, isClipStart, isControl } = datas;\n\n        if (!isClipStart) {\n            return false;\n        }\n        triggerEvent(moveable, \"onClipEnd\", fillEndParams<OnClipEnd>(moveable, e, {}));\n        if (isDouble) {\n            if (isControl) {\n                removeClipPath(moveable, e);\n            } else if (isLine) {\n                // add\n                addClipPath(moveable, e);\n            }\n        }\n        return isDouble || isDrag;\n    },\n    unset(moveable: MoveableManagerInterface<ClippableProps, ClippableState>) {\n        moveable.state.clipPathState = \"\";\n        moveable.state.snapBoundInfos = null;\n    },\n};\n\n/**\n * Whether to clip the target. (default: false)\n * @name Moveable.Clippable#clippable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     clippable: true,\n *     defaultClipPath: \"inset\",\n *     customClipPath: \"\",\n *     clipRelative: false,\n *     clipArea: false,\n *     dragWithClip: true,\n * });\n * moveable.on(\"clipStart\", e => {\n *     console.log(e);\n * }).on(\"clip\", e => {\n *     if (e.clipType === \"rect\") {\n *         e.target.style.clip = e.clipStyle;\n *     } else {\n *         e.target.style.clipPath = e.clipStyle;\n *     }\n * }).on(\"clipEnd\", e => {\n *     console.log(e);\n * });\n */\n/**\n *  If clippath is not set, the default value can be set. (defaultClipPath < style < customClipPath < dragging clipPath)\n * @name Moveable.Clippable#defaultClipPath\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     clippable: true,\n *     defaultClipPath: \"inset\",\n *     customClipPath: \"\",\n *     clipRelative: false,\n *     clipArea: false,\n *     dragWithClip: true,\n * });\n * moveable.on(\"clipStart\", e => {\n *     console.log(e);\n * }).on(\"clip\", e => {\n *     if (e.clipType === \"rect\") {\n *         e.target.style.clip = e.clipStyle;\n *     } else {\n *         e.target.style.clipPath = e.clipStyle;\n *     }\n * }).on(\"clipEnd\", e => {\n *     console.log(e);\n * });\n */\n\n/**\n * % Can be used instead of the absolute px (`rect` not possible) (default: false)\n * @name Moveable.Clippable#clipRelative\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     clippable: true,\n *     defaultClipPath: \"inset\",\n *     customClipPath: \"\",\n *     clipRelative: false,\n *     clipArea: false,\n *     dragWithClip: true,\n * });\n * moveable.on(\"clipStart\", e => {\n *     console.log(e);\n * }).on(\"clip\", e => {\n *     if (e.clipType === \"rect\") {\n *         e.target.style.clip = e.clipStyle;\n *     } else {\n *         e.target.style.clipPath = e.clipStyle;\n *     }\n * }).on(\"clipEnd\", e => {\n *     console.log(e);\n * });\n */\n\n/**\n * You can force the custom clipPath. (defaultClipPath < style < customClipPath < dragging clipPath)\n * @name Moveable.Clippable#customClipPath\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     clippable: true,\n *     defaultClipPath: \"inset\",\n *     customClipPath: \"\",\n *     clipRelative: false,\n *     clipArea: false,\n *     dragWithClip: true,\n * });\n * moveable.on(\"clipStart\", e => {\n *     console.log(e);\n * }).on(\"clip\", e => {\n *     if (e.clipType === \"rect\") {\n *         e.target.style.clip = e.clipStyle;\n *     } else {\n *         e.target.style.clipPath = e.clipStyle;\n *     }\n * }).on(\"clipEnd\", e => {\n *     console.log(e);\n * });\n */\n\n/**\n * When dragging the target, the clip also moves. (default: true)\n * @name Moveable.Clippable#dragWithClip\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     clippable: true,\n *     defaultClipPath: \"inset\",\n *     customClipPath: \"\",\n *     clipRelative: false,\n *     clipArea: false,\n *     dragWithClip: true,\n * });\n * moveable.on(\"clipStart\", e => {\n *     console.log(e);\n * }).on(\"clip\", e => {\n *     if (e.clipType === \"rect\") {\n *         e.target.style.clip = e.clipStyle;\n *     } else {\n *         e.target.style.clipPath = e.clipStyle;\n *     }\n * }).on(\"clipEnd\", e => {\n *     console.log(e);\n * });\n */\n\n/**\n * You can drag the clip by setting clipArea.\n * @name Moveable.Clippable#clipArea\n * @default false\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     clippable: true,\n *     defaultClipPath: \"inset\",\n *     customClipPath: \"\",\n *     clipRelative: false,\n *     clipArea: false,\n *     dragWithClip: true,\n * });\n * moveable.on(\"clipStart\", e => {\n *     console.log(e);\n * }).on(\"clip\", e => {\n *     if (e.clipType === \"rect\") {\n *         e.target.style.clip = e.clipStyle;\n *     } else {\n *         e.target.style.clipPath = e.clipStyle;\n *     }\n * }).on(\"clipEnd\", e => {\n *     console.log(e);\n * });\n */\n\n/**\n* Whether the clip is bound to the target.\n* @name Moveable.Clippable#clipTargetBounds\n* @default false\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     clippable: true,\n*     defaultClipPath: \"inset\",\n*     customClipPath: \"\",\n*     clipRelative: false,\n*     clipArea: false,\n*     dragWithClip: true,\n*     clipTargetBounds: true,\n* });\n* moveable.on(\"clipStart\", e => {\n*     console.log(e);\n* }).on(\"clip\", e => {\n*     if (e.clipType === \"rect\") {\n*         e.target.style.clip = e.clipStyle;\n*     } else {\n*         e.target.style.clipPath = e.clipStyle;\n*     }\n* }).on(\"clipEnd\", e => {\n*     console.log(e);\n* });\n*/\n\n/**\n * Add clip guidelines in the vertical direction.\n * @name Moveable.Clippable#clipVerticalGuidelines\n * @default 0\n * @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     clippable: true,\n*     defaultClipPath: \"inset\",\n*     customClipPath: \"\",\n*     clipRelative: false,\n*     clipArea: false,\n*     dragWithClip: true,\n*     clipVerticalGuidelines: [0, 100, 200],\n*     clipHorizontalGuidelines: [0, 100, 200],\n*     clipSnapThreshold: 5,\n* });\n*/\n\n/**\n* Add clip guidelines in the horizontal direction.\n* @name Moveable.Clippable#clipHorizontalGuidelines\n* @default []\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     clippable: true,\n*     defaultClipPath: \"inset\",\n*     customClipPath: \"\",\n*     clipRelative: false,\n*     clipArea: false,\n*     dragWithClip: true,\n*     clipVerticalGuidelines: [0, 100, 200],\n*     clipHorizontalGuidelines: [0, 100, 200],\n*     clipSnapThreshold: 5,\n* });\n*/\n/**\n* istance value that can snap to clip guidelines.\n* @name Moveable.Clippable#clipSnapThreshold\n* @default 5\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     clippable: true,\n*     defaultClipPath: \"inset\",\n*     customClipPath: \"\",\n*     clipRelative: false,\n*     clipArea: false,\n*     dragWithClip: true,\n*     clipVerticalGuidelines: [0, 100, 200],\n*     clipHorizontalGuidelines: [0, 100, 200],\n*     clipSnapThreshold: 5,\n* });\n*/\n/**\n * When drag start the clip area or controls, the `clipStart` event is called.\n * @memberof Moveable.Clippable\n * @event clipStart\n * @param {Moveable.Clippable.OnClipStart} - Parameters for the `clipStart` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     clippable: true,\n *     defaultClipPath: \"inset\",\n *     customClipPath: \"\",\n *     clipRelative: false,\n *     clipArea: false,\n *     dragWithClip: true,\n * });\n * moveable.on(\"clipStart\", e => {\n *     console.log(e);\n * }).on(\"clip\", e => {\n *     if (e.clipType === \"rect\") {\n *         e.target.style.clip = e.clipStyle;\n *     } else {\n *         e.target.style.clipPath = e.clipStyle;\n *     }\n * }).on(\"clipEnd\", e => {\n *     console.log(e);\n * });\n */\n/**\n * When drag the clip area or controls, the `clip` event is called.\n * @memberof Moveable.Clippable\n * @event clip\n * @param {Moveable.Clippable.OnClip} - Parameters for the `clip` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     clippable: true,\n *     defaultClipPath: \"inset\",\n *     customClipPath: \"\",\n *     clipRelative: false,\n *     clipArea: false,\n *     dragWithClip: true,\n * });\n * moveable.on(\"clipStart\", e => {\n *     console.log(e);\n * }).on(\"clip\", e => {\n *     if (e.clipType === \"rect\") {\n *         e.target.style.clip = e.clipStyle;\n *     } else {\n *         e.target.style.clipPath = e.clipStyle;\n *     }\n * }).on(\"clipEnd\", e => {\n *     console.log(e);\n * });\n */\n/**\n * When drag end the clip area or controls, the `clipEnd` event is called.\n * @memberof Moveable.Clippable\n * @event clipEnd\n * @param {Moveable.Clippable.OnClipEnd} - Parameters for the `clipEnd` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     clippable: true,\n *     defaultClipPath: \"inset\",\n *     customClipPath: \"\",\n *     clipRelative: false,\n *     clipArea: false,\n *     dragWithClip: true,\n * });\n * moveable.on(\"clipStart\", e => {\n *     console.log(e);\n * }).on(\"clip\", e => {\n *     if (e.clipType === \"rect\") {\n *         e.target.style.clip = e.clipStyle;\n *     } else {\n *         e.target.style.clipPath = e.clipStyle;\n *     }\n * }).on(\"clipEnd\", e => {\n *     console.log(e);\n * });\n */\n", "import {\n    prefix, triggerEvent,\n    fillParams, calculatePoses, getRect, fillEndParams, convertCSSSize, fillCSSObject,\n} from \"../utils\";\nimport {\n    OnDragOriginStart, OnDragOrigin,\n    OnDragOriginEnd, MoveableManagerInterface, DraggableProps, OriginDraggableProps, MoveableGroupInterface,\n} from \"../types\";\nimport { hasClass, IObject } from \"@daybrush/utils\";\nimport { setDragStart, getDragDist, getNextMatrix } from \"../gesto/GestoUtils\";\nimport { minus, plus } from \"@scena/matrix\";\nimport Draggable from \"./Draggable\";\nimport CustomGesto, { setCustomDrag } from \"../gesto/CustomGesto\";\n\n/**\n * @namespace OriginDraggable\n * @memberof Moveable\n * @description Whether to drag origin (default: false)\n */\nexport default {\n    name: \"originDraggable\",\n    props: [\n        \"originDraggable\",\n        \"originRelative\",\n    ] as const,\n    events: [\n        \"dragOriginStart\",\n        \"dragOrigin\",\n        \"dragOriginEnd\",\n    ] as const,\n    css: [\n        `:host[data-able-origindraggable] .control.origin {\npointer-events: auto;\n}`,\n    ],\n    dragControlCondition(_: any, e: any) {\n        if (e.isRequest) {\n            return e.requestAble === \"originDraggable\";\n        }\n        return hasClass(e.inputEvent.target, prefix(\"origin\"));\n    },\n    dragControlStart(moveable: MoveableManagerInterface<OriginDraggableProps & DraggableProps>, e: any) {\n        const { datas } = e;\n\n        setDragStart(moveable, e);\n\n        const params = fillParams<OnDragOriginStart>(moveable, e, {\n            dragStart: Draggable.dragStart(\n                moveable,\n                new CustomGesto().dragStart([0, 0], e),\n            ),\n        });\n        const result = triggerEvent(moveable, \"onDragOriginStart\", params);\n\n        datas.startOrigin = moveable.state.transformOrigin;\n        datas.startTargetOrigin = moveable.state.targetOrigin;\n        datas.prevOrigin = [0, 0];\n        datas.isDragOrigin = true;\n\n        if (result === false) {\n            datas.isDragOrigin = false;\n            return false;\n        }\n\n        return params;\n    },\n    dragControl(moveable: MoveableManagerInterface<OriginDraggableProps & DraggableProps>, e: any) {\n        const { datas, isPinch, isRequest } = e;\n\n        if (!datas.isDragOrigin) {\n            return false;\n        }\n        const [distX, distY] = getDragDist(e);\n        const state = moveable.state;\n        const {\n            width,\n            height,\n            offsetMatrix,\n            targetMatrix,\n            is3d,\n        } = state;\n        const {\n            originRelative = true,\n        } = moveable.props;\n        const n = is3d ? 4 : 3;\n        let dist = [distX, distY];\n\n        if (isRequest) {\n            const distOrigin = e.distOrigin;\n            if (distOrigin[0] || distOrigin[1]) {\n                dist = distOrigin;\n            }\n        }\n        const origin = plus(datas.startOrigin, dist);\n        const targetOrigin = plus(datas.startTargetOrigin, dist);\n        const delta = minus(dist, datas.prevOrigin);\n\n        const nextMatrix = getNextMatrix(\n            offsetMatrix,\n            targetMatrix,\n            origin,\n            n,\n        );\n\n        const rect = moveable.getRect();\n        const nextRect = getRect(calculatePoses(nextMatrix, width, height, n));\n\n        const dragDelta = [\n            rect.left - nextRect.left,\n            rect.top - nextRect.top,\n        ];\n\n        datas.prevOrigin = dist;\n        const transformOrigin = [\n            convertCSSSize(targetOrigin[0], width, originRelative),\n            convertCSSSize(targetOrigin[1], height, originRelative),\n        ].join(\" \");\n        const result = Draggable.drag(\n            moveable,\n            setCustomDrag(e, moveable.state, dragDelta, !!isPinch, false),\n        )!;\n        const params = fillParams<OnDragOrigin>(moveable, e, {\n            width,\n            height,\n            origin,\n            dist,\n            delta,\n            transformOrigin,\n            drag: result,\n            ...fillCSSObject({\n                transformOrigin,\n                transform: result.transform,\n            }, e),\n            afterTransform: result.transform,\n        });\n        triggerEvent(moveable, \"onDragOrigin\", params);\n        return params;\n    },\n    dragControlEnd(moveable: MoveableManagerInterface<OriginDraggableProps>, e: any) {\n        const { datas } = e;\n\n        if (!datas.isDragOrigin) {\n            return false;\n        }\n        triggerEvent(moveable, \"onDragOriginEnd\",\n            fillEndParams<OnDragOriginEnd>(moveable, e, {}));\n        return true;\n    },\n    dragGroupControlCondition(moveable: any, e: any) {\n        return this.dragControlCondition(moveable, e);\n    },\n    dragGroupControlStart(moveable: MoveableGroupInterface<OriginDraggableProps>, e: any) {\n        const params = this.dragControlStart(moveable, e);\n\n        if (!params) {\n            return false;\n        }\n\n        return true;\n    },\n    dragGroupControl(moveable: MoveableGroupInterface<OriginDraggableProps>, e: any) {\n        const params = this.dragControl(moveable, e);\n\n        if (!params) {\n            return false;\n        }\n        moveable.transformOrigin = params.transformOrigin;\n\n        return true;\n    },\n    /**\n    * @method Moveable.OriginDraggable#request\n    * @param {object} e - the OriginDraggable's request parameter\n    * @param {number} [e.x] - x position\n    * @param {number} [e.y] - y position\n    * @param {number} [e.deltaX] - x number to move\n    * @param {number} [e.deltaY] - y number to move\n    * @param {array} [e.deltaOrigin] - left, top number to move transform-origin\n    * @param {array} [e.origin] - transform-origin position\n    * @param {number} [e.isInstant] - Whether to execute the request instantly\n    * @return {Moveable.Requester} Moveable Requester\n    * @example\n\n    * // Instantly Request (requestStart - request - requestEnd)\n    * // Use Relative Value\n    * moveable.request(\"originDraggable\", { deltaX: 10, deltaY: 10 }, true);\n    * // Use Absolute Value\n    * moveable.request(\"originDraggable\", { x: 200, y: 100 }, true);\n    * // Use Transform Value\n    * moveable.request(\"originDraggable\", { deltaOrigin: [10, 0] }, true);\n    * moveable.request(\"originDraggable\", { origin: [100, 0] }, true);\n    * // requestStart\n    * const requester = moveable.request(\"originDraggable\");\n    *\n    * // request\n    * // Use Relative Value\n    * requester.request({ deltaX: 10, deltaY: 10 });\n    * requester.request({ deltaX: 10, deltaY: 10 });\n    * requester.request({ deltaX: 10, deltaY: 10 });\n    * // Use Absolute Value\n    * moveable.request(\"originDraggable\", { x: 200, y: 100 });\n    * moveable.request(\"originDraggable\", { x: 220, y: 100 });\n    * moveable.request(\"originDraggable\", { x: 240, y: 100 });\n    *\n    * // requestEnd\n    * requester.requestEnd();\n    */\n    request(moveable: MoveableManagerInterface<any, any>) {\n        const datas = {};\n        const rect = moveable.getRect();\n        let distX = 0;\n        let distY = 0;\n\n        const transformOrigin = rect.transformOrigin;\n        const distOrigin = [0, 0];\n\n        return {\n            isControl: true,\n            requestStart() {\n                return { datas };\n            },\n            request(e: IObject<any>) {\n                if (\"deltaOrigin\" in e) {\n                    distOrigin[0] += e.deltaOrigin[0];\n                    distOrigin[1] += e.deltaOrigin[1];\n                } else if (\"origin\" in e) {\n                    distOrigin[0] = e.origin[0] - transformOrigin[0];\n                    distOrigin[1] = e.origin[1] - transformOrigin[1];\n                } else {\n                    if (\"x\" in e) {\n                        distX = e.x - rect.left;\n                    } else if (\"deltaX\" in e) {\n                        distX += e.deltaX;\n                    }\n                    if (\"y\" in e) {\n                        distY = e.y - rect.top;\n                    } else if (\"deltaY\" in e) {\n                        distY += e.deltaY;\n                    }\n                }\n\n                return { datas, distX, distY, distOrigin };\n            },\n            requestEnd() {\n                return { datas, isDrag: true };\n            },\n        };\n    },\n};\n/**\n * Whether to drag origin (default: false)\n * @name Moveable.OriginDraggable#originDraggable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     originDraggable: true,\n * });\n * let translate = [0, 0];\n * moveable.on(\"dragOriginStart\", e => {\n *     e.dragStart && e.dragStart.set(translate);\n * }).on(\"dragOrigin\", e => {\n *     translate = e.drag.beforeTranslate;\n *     e.target.style.cssText\n *         = `transform-origin: ${e.transformOrigin};`\n *         + `transform: translate(${translate[0]}px, ${translate[1]}px)`;\n * }).on(\"dragOriginEnd\", e => {\n *     console.log(e);\n * });\n */\n\n/**\n * % Can be used instead of the absolute px (default: true)\n * @name Moveable.OriginDraggable#originRelative\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     originDraggable: true,\n *     originRelative: false,\n * });\n * moveable.originRelative = true;\n */\n\n/**\n* When drag start the origin, the `dragOriginStart` event is called.\n* @memberof Moveable.OriginDraggable\n* @event dragOriginStart\n* @param {Moveable.OriginDraggable.OnDragOriginStart} - Parameters for the `dragOriginStart` event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     originDraggable: true,\n* });\n* let translate = [0, 0];\n* moveable.on(\"dragOriginStart\", e => {\n*     e.dragStart && e.dragStart.set(translate);\n* }).on(\"dragOrigin\", e => {\n*     translate = e.drag.beforeTranslate;\n*     e.target.style.cssText\n*         = `transform-origin: ${e.transformOrigin};`\n*         + `transform: translate(${translate[0]}px, ${translate[1]}px)`;\n* }).on(\"dragOriginEnd\", e => {\n*     console.log(e);\n* });\n*/\n\n/**\n* When drag the origin, the `dragOrigin` event is called.\n* @memberof Moveable.OriginDraggable\n* @event dragOrigin\n* @param {Moveable.OriginDraggable.OnDragOrigin} - Parameters for the `dragOrigin` event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     originDraggable: true,\n* });\n* let translate = [0, 0];\n* moveable.on(\"dragOriginStart\", e => {\n*     e.dragStart && e.dragStart.set(translate);\n* }).on(\"dragOrigin\", e => {\n*     translate = e.drag.beforeTranslate;\n*     e.target.style.cssText\n*         = `transform-origin: ${e.transformOrigin};`\n*         + `transform: translate(${translate[0]}px, ${translate[1]}px)`;\n* }).on(\"dragOriginEnd\", e => {\n*     console.log(e);\n* });\n*/\n\n/**\n* When drag end the origin, the `dragOriginEnd` event is called.\n* @memberof Moveable.OriginDraggable\n* @event dragOriginEnd\n* @param {Moveable.OriginDraggable.OnDragOriginEnd} - Parameters for the `dragOriginEnd` event\n* @example\n* import Moveable from \"moveable\";\n*\n* const moveable = new Moveable(document.body, {\n*     originDraggable: true,\n* });\n* let translate = [0, 0];\n* moveable.on(\"dragOriginStart\", e => {\n*     e.dragStart && e.dragStart.set(translate);\n* }).on(\"dragOrigin\", e => {\n*     translate = e.drag.beforeTranslate;\n*     e.target.style.cssText\n*         = `transform-origin: ${e.transformOrigin};`\n*         + `transform: translate(${translate[0]}px, ${translate[1]}px)`;\n* }).on(\"dragOriginEnd\", e => {\n*     console.log(e);\n* });\n*/\n", "import {\n    prefix, triggerEvent,\n    fillParams, fillEndParams, calculatePosition,\n    fillCSSObject,\n    catchEvent,\n    getComputedStyle,\n} from \"../utils\";\nimport {\n    Renderer, RoundableProps, OnRoundStart,\n    RoundableState, OnRound, ControlPose, OnRoundEnd,\n    MoveableManagerInterface,\n    OnRoundGroup,\n    MoveableGroupInterface,\n    OnRoundGroupStart,\n    OnRoundGroupEnd,\n} from \"../types\";\nimport { splitSpace } from \"@daybrush/utils\";\nimport { setDragStart, getDragDist, calculatePointerDist } from \"../gesto/GestoUtils\";\nimport { minus, plus } from \"@scena/matrix\";\nimport {\n    getRadiusValues,\n    getRadiusStyles,\n    splitRadiusPoses,\n} from \"./roundable/borderRadius\";\nimport { fillChildEvents } from \"../groupUtils\";\n\n\nfunction addBorderRadiusByLine(\n    controlPoses: ControlPose[],\n    lineIndex: number,\n    distX: number,\n    distY: number,\n) {\n    // lineIndex\n    // 0 top\n    // 1 right\n    // 2 bottom\n    // 3 left\n\n    const horizontalsLength = controlPoses.filter(({ virtual, horizontal }) => horizontal && !virtual).length;\n    const verticalsLength = controlPoses.filter(({ virtual, vertical }) => vertical && !virtual).length;\n    let controlIndex = -1;\n\n    //top\n    if (lineIndex === 0) {\n        if (horizontalsLength === 0) {\n            controlIndex = 0;\n        } else if (horizontalsLength === 1) {\n            controlIndex = 1;\n        }\n    }\n    // bottom\n    if (lineIndex === 2) {\n        if (horizontalsLength <= 2) {\n            controlIndex = 2;\n        } else if (horizontalsLength <= 3) {\n            controlIndex = 3;\n        }\n    }\n    // left\n    if (lineIndex === 3) {\n        if (verticalsLength === 0) {\n            controlIndex = 4;\n        } else if (verticalsLength < 4) {\n            controlIndex = 7;\n        }\n    }\n\n    // right\n    if (lineIndex === 1) {\n        if (verticalsLength <= 1) {\n            controlIndex = 5;\n        } else if (verticalsLength <= 2) {\n            controlIndex = 6;\n        }\n    }\n    if (controlIndex === -1 || !controlPoses[controlIndex].virtual) {\n        return;\n    }\n    const controlPoseInfo = controlPoses[controlIndex];\n\n    addBorderRadius(controlPoses, controlIndex);\n\n    if (controlIndex < 4) {\n        controlPoseInfo.pos[0] = distX;\n    } else {\n        controlPoseInfo.pos[1] = distY;\n    }\n}\nfunction addBorderRadius(\n    controlPoses: ControlPose[],\n    index: number,\n) {\n    if (index < 4) {\n        controlPoses.slice(0, index + 1).forEach(info => {\n            info.virtual = false;\n        });\n    } else {\n        if (controlPoses[0].virtual) {\n            controlPoses[0].virtual = false;\n        }\n        controlPoses.slice(4, index + 1).forEach(info => {\n            info.virtual = false;\n        });\n    }\n}\nfunction removeBorderRadius(\n    controlPoses: ControlPose[],\n    index: number,\n) {\n    if (index < 4) {\n        controlPoses.slice(index, 4).forEach(info => {\n            info.virtual = true;\n        });\n    } else {\n        controlPoses.slice(index).forEach(info => {\n            info.virtual = true;\n        });\n    }\n}\nfunction getBorderRadius(\n    borderRadius: string,\n    width: number,\n    height: number,\n    minCounts: number[] = [0, 0],\n    full?: boolean,\n) {\n    let values: string[] = [];\n\n    if (!borderRadius || borderRadius === \"0px\") {\n        values = [];\n    } else {\n        values = splitSpace(borderRadius);\n    }\n\n    return getRadiusValues(values, width, height, 0, 0, minCounts, full);\n}\n\nfunction triggerRoundEvent(\n    moveable: MoveableManagerInterface<RoundableProps, RoundableState>,\n    e: any,\n    dist: number[],\n    delta: number[],\n    nextPoses: ControlPose[],\n) {\n    const state = moveable.state;\n    const {\n        width,\n        height,\n    } = state;\n    const {\n        raws,\n        styles,\n        radiusPoses,\n    } = getRadiusStyles(\n        nextPoses,\n        moveable.props.roundRelative!,\n        width,\n        height,\n    );\n    const {\n        horizontals,\n        verticals,\n    } = splitRadiusPoses(radiusPoses, raws);\n    const borderRadius = styles.join(\" \");\n\n    state.borderRadiusState = borderRadius;\n    const params = fillParams<OnRound>(moveable, e, {\n        horizontals,\n        verticals,\n        borderRadius,\n        width,\n        height,\n        delta,\n        dist,\n        ...fillCSSObject({\n            borderRadius,\n        }, e),\n    });\n    triggerEvent(moveable, \"onRound\", params);\n\n    return params;\n}\n\n\nfunction getStyleBorderRadius(moveable: MoveableManagerInterface<RoundableProps, RoundableState>) {\n    const {\n        style,\n    } = moveable.getState();\n    let borderRadius = style.borderRadius || \"\";\n\n    if (!borderRadius && moveable.props.groupable) {\n        const firstMoveable = moveable.moveables![0];\n        const firstTarget = moveable.getTargets()[0];\n\n\n        if (firstTarget) {\n            if (firstMoveable?.props.target === firstTarget) {\n                borderRadius = moveable.moveables![0]?.state.style.borderRadius ?? \"\";\n                style.borderRadius = borderRadius;\n            } else {\n                borderRadius = getComputedStyle(firstTarget).borderRadius;\n                style.borderRadius = borderRadius;\n            }\n        }\n\n    }\n    return borderRadius;\n}\n\n/**\n * @namespace Moveable.Roundable\n * @description Whether to show and drag or double click border-radius\n */\n\nexport default {\n    name: \"roundable\",\n    props: [\n        \"roundable\",\n        \"roundRelative\",\n        \"minRoundControls\",\n        \"maxRoundControls\",\n        \"roundClickable\",\n        \"roundPadding\",\n        \"isDisplayShadowRoundControls\",\n    ] as const,\n    events: [\n        \"roundStart\",\n        \"round\",\n        \"roundEnd\",\n        \"roundGroupStart\",\n        \"roundGroup\",\n        \"roundGroupEnd\",\n    ] as const,\n    css: [\n        `.control.border-radius {\nbackground: #d66;\ncursor: pointer;\nz-index: 3;\n}`,\n        `.control.border-radius.vertical {\nbackground: #d6d;\nz-index: 2;\n}`,\n        `.control.border-radius.virtual {\nopacity: 0.5;\nz-index: 1;\n}`,\n        `:host.round-line-clickable .line.direction {\ncursor: pointer;\n}`,\n    ],\n    className(moveable: MoveableManagerInterface<RoundableProps, RoundableState>) {\n        const roundClickable = moveable.props.roundClickable;\n\n        return roundClickable === true || roundClickable === \"line\" ? prefix(\"round-line-clickable\") : \"\";\n    },\n    requestStyle(): Array<keyof CSSStyleDeclaration> {\n        return [\"borderRadius\"];\n    },\n    requestChildStyle(): Array<keyof CSSStyleDeclaration> {\n        return [\"borderRadius\"];\n    },\n    render(moveable: MoveableManagerInterface<RoundableProps, RoundableState>, React: Renderer): any {\n        const {\n            target,\n            width,\n            height,\n            allMatrix,\n            is3d,\n            left,\n            top,\n            borderRadiusState,\n        } = moveable.getState();\n\n        const {\n            minRoundControls = [0, 0],\n            maxRoundControls = [4, 4],\n            zoom,\n            roundPadding = 0,\n            isDisplayShadowRoundControls,\n            groupable,\n        } = moveable.props;\n\n        if (!target) {\n            return null;\n        }\n\n        const borderRadius = borderRadiusState || getStyleBorderRadius(moveable);\n        const n = is3d ? 4 : 3;\n        const radiusValues = getBorderRadius(\n            borderRadius,\n            width, height,\n            minRoundControls,\n            true,\n        );\n\n        if (!radiusValues) {\n            return null;\n        }\n        let verticalCount = 0;\n        let horizontalCount = 0;\n        const basePos = groupable ? [0, 0] : [left, top];\n\n        return radiusValues.map((v, i) => {\n            const horizontal = v.horizontal;\n            const vertical = v.vertical;\n            const direction = v.direction || \"\";\n            const originalPos = [...v.pos];\n\n            horizontalCount += Math.abs(horizontal);\n            verticalCount += Math.abs(vertical);\n\n\n            if (horizontal && direction.indexOf(\"n\") > -1) {\n                originalPos[1] -= roundPadding;\n            }\n            if (vertical && direction.indexOf(\"w\") > -1) {\n                originalPos[0] -= roundPadding;\n            }\n            if (horizontal && direction.indexOf(\"s\") > -1) {\n                originalPos[1] += roundPadding;\n            }\n            if (vertical && direction.indexOf(\"e\") > -1) {\n                originalPos[0] += roundPadding;\n            }\n            const pos = minus(calculatePosition(allMatrix, originalPos, n), basePos);\n            const isDisplayVerticalShadow\n                = isDisplayShadowRoundControls\n                && isDisplayShadowRoundControls !== \"horizontal\";\n            const isDisplay = v.vertical\n                ? verticalCount <= maxRoundControls[1] && (isDisplayVerticalShadow || !v.virtual)\n                : horizontalCount <= maxRoundControls[0] && (isDisplayShadowRoundControls || !v.virtual);\n\n            return <div key={`borderRadiusControl${i}`}\n                className={prefix(\n                    \"control\", \"border-radius\",\n                    v.vertical ? \"vertical\" : \"\",\n                    v.virtual ? \"virtual\" : \"\",\n                )}\n                data-radius-index={i}\n                style={{\n                    display: isDisplay ? \"block\" : \"none\",\n                    transform: `translate(${pos[0]}px, ${pos[1]}px) scale(${zoom})`,\n                }}></div>;\n        });\n    },\n    dragControlCondition(moveable: any, e: any) {\n        if (!e.inputEvent || e.isRequest) {\n            return false;\n        }\n        const className = (e.inputEvent.target.getAttribute(\"class\") || \"\");\n\n        return className.indexOf(\"border-radius\") > -1\n            || (className.indexOf(\"moveable-line\") > -1 && className.indexOf(\"moveable-direction\") > -1);\n    },\n    dragGroupControlCondition(moveable: any, e: any) {\n        return this.dragControlCondition(moveable, e);\n    },\n    dragControlStart(moveable: MoveableManagerInterface<RoundableProps, RoundableState>, e: any) {\n        const { inputEvent, datas } = e;\n        const inputTarget = inputEvent.target;\n        const className = (inputTarget.getAttribute(\"class\") || \"\");\n        const isControl = className.indexOf(\"border-radius\") > -1;\n        const isLine = className.indexOf(\"moveable-line\") > -1 && className.indexOf(\"moveable-direction\") > -1;\n        const controlIndex = isControl ? parseInt(inputTarget.getAttribute(\"data-radius-index\"), 10) : -1;\n        let lineIndex = -1;\n\n        if (isLine) {\n            const indexAttr = inputTarget.getAttribute(\"data-line-key\")! || \"\";\n\n            if (indexAttr) {\n                lineIndex = parseInt(indexAttr.replace(/render-line-/g, \"\"), 10);\n\n                if (isNaN(lineIndex)) {\n                    lineIndex = -1;\n                }\n            }\n        }\n\n        if (!isControl && !isLine) {\n            return false;\n        }\n\n        const params = fillParams<OnRoundStart>(moveable, e, {});\n\n        const result = triggerEvent(\n            moveable, \"onRoundStart\", params);\n\n        if (result === false) {\n            return false;\n        }\n\n        datas.lineIndex = lineIndex;\n        datas.controlIndex = controlIndex;\n        datas.isControl = isControl;\n        datas.isLine = isLine;\n\n        setDragStart(moveable, e);\n\n        const {\n            roundRelative,\n            minRoundControls = [0, 0],\n        } = moveable.props;\n        const state = moveable.state;\n        const {\n            width,\n            height,\n        } = state;\n\n        datas.isRound = true;\n        datas.prevDist = [0, 0];\n        const borderRadius = getStyleBorderRadius(moveable);\n        const controlPoses = getBorderRadius(\n            borderRadius || \"\",\n            width,\n            height,\n            minRoundControls,\n            true,\n        ) || [];\n\n        datas.controlPoses = controlPoses;\n\n        state.borderRadiusState = getRadiusStyles(\n            controlPoses,\n            roundRelative!,\n            width,\n            height,\n        ).styles.join(\" \");\n        return params;\n    },\n    dragControl(moveable: MoveableManagerInterface<RoundableProps, RoundableState>, e: any) {\n        const { datas } = e;\n        const controlPoses = datas.controlPoses as ControlPose[];\n\n        if (!datas.isRound || !datas.isControl || !controlPoses.length) {\n            return false;\n        }\n        const index = datas.controlIndex as number;\n\n        const [distX, distY] = getDragDist(e);\n        const dist = [distX, distY];\n        const delta = minus(dist, datas.prevDist);\n        const {\n            maxRoundControls = [4, 4],\n        } = moveable.props;\n        const { width, height } = moveable.state;\n        const selectedControlPose = controlPoses[index];\n\n        const selectedVertical = selectedControlPose.vertical;\n        const selectedHorizontal = selectedControlPose.horizontal;\n\n        // 0: [0, 1, 2, 3] maxCount === 1\n        // 0: [0, 2] maxCount === 2\n        // 1: [1, 3] maxCount === 2\n\n        // 0: [0] maxCount === 3\n        // 1: [1, 3] maxCount === 3\n\n        const dists = controlPoses.map(pose => {\n            const { horizontal, vertical } = pose;\n            const poseDist = [\n                horizontal * selectedHorizontal * dist[0],\n                vertical * selectedVertical * dist[1],\n            ];\n            if (horizontal) {\n                if (maxRoundControls[0] === 1) {\n                    return poseDist;\n                } else if (maxRoundControls[0] < 4 && horizontal !== selectedHorizontal) {\n                    return poseDist;\n                }\n            } else if (maxRoundControls[1] === 0) {\n                poseDist[1] = vertical * selectedHorizontal * dist[0] / width * height;\n\n                return poseDist;\n            } else if (selectedVertical) {\n                if (maxRoundControls[1] === 1) {\n                    return poseDist;\n                } else if (maxRoundControls[1] < 4 && vertical !== selectedVertical) {\n                    return poseDist;\n                }\n            }\n            return [0, 0];\n        });\n\n        dists[index] = dist;\n        const nextPoses = controlPoses.map((info, i) => {\n            return {\n                ...info,\n                pos: plus(info.pos, dists[i]),\n            };\n        });\n\n        if (index < 4) {\n            nextPoses.slice(0, index + 1).forEach(info => {\n                info.virtual = false;\n            });\n        } else {\n            nextPoses.slice(4, index + 1).forEach(info => {\n                info.virtual = false;\n            });\n        }\n\n        datas.prevDist = [distX, distY];\n\n        return triggerRoundEvent(\n            moveable,\n            e,\n            dist,\n            delta,\n            nextPoses,\n        );\n    },\n    dragControlEnd(moveable: MoveableManagerInterface<RoundableProps, RoundableState>, e: any) {\n        const state = moveable.state;\n\n        state.borderRadiusState = \"\";\n        const { datas, isDouble } = e;\n        if (!datas.isRound) {\n            return false;\n        }\n        const {\n            isControl,\n            controlIndex,\n            isLine,\n            lineIndex,\n        } = datas;\n        const controlPoses = datas.controlPoses as ControlPose[];\n        const length = controlPoses.filter(({ virtual }) => virtual).length;\n        const {\n            roundClickable = true,\n        } = moveable.props;\n\n        if (isDouble && roundClickable) {\n            if (isControl && (roundClickable === true || roundClickable === \"control\")) {\n                removeBorderRadius(controlPoses, controlIndex);\n            } else if (isLine && (roundClickable === true || roundClickable === \"line\")) {\n                const [distX, distY] = calculatePointerDist(moveable, e);\n\n                addBorderRadiusByLine(controlPoses, lineIndex, distX, distY);\n            }\n\n            if (length !== controlPoses.filter(({ virtual }) => virtual).length) {\n                triggerRoundEvent(\n                    moveable,\n                    e,\n                    [0, 0],\n                    [0, 0],\n                    controlPoses,\n                );\n            }\n        }\n        const params = fillEndParams<OnRoundEnd>(moveable, e, {});\n\n        triggerEvent(moveable, \"onRoundEnd\", params);\n        state.borderRadiusState = \"\";\n        return params;\n    },\n    dragGroupControlStart(moveable: MoveableGroupInterface<RoundableProps, RoundableState>, e: any) {\n        const result = this.dragControlStart(moveable, e);\n\n        if (!result) {\n            return false;\n        }\n\n        const moveables = moveable.moveables;\n        const targets = moveable.props.targets!;\n        const events = fillChildEvents(moveable, \"roundable\", e);\n\n        const nextParams: OnRoundGroupStart = {\n            targets: moveable.props.targets!,\n            events: events.map((ev, i) => {\n                return {\n                    ...ev,\n                    target: targets[i],\n                    moveable: moveables[i],\n                    currentTarget: moveables[i],\n                };\n            }),\n            ...result,\n        };\n\n        triggerEvent(moveable, \"onRoundGroupStart\", nextParams);\n        return result;\n    },\n    dragGroupControl(moveable: MoveableGroupInterface<RoundableProps, RoundableState>, e: any) {\n        const result = this.dragControl(moveable, e);\n\n\n        if (!result) {\n            return false;\n        }\n\n        const moveables = moveable.moveables;\n        const targets = moveable.props.targets!;\n        const events = fillChildEvents(moveable, \"roundable\", e);\n\n        const nextParams: OnRoundGroup = {\n            targets: moveable.props.targets!,\n            events: events.map((ev, i) => {\n                return {\n                    ...ev,\n                    target: targets[i],\n                    moveable: moveables[i],\n                    currentTarget: moveables[i],\n                    ...fillCSSObject({\n                        borderRadius: result.borderRadius,\n                    }, ev),\n                };\n            }),\n            ...result,\n        };\n\n        triggerEvent(moveable, \"onRoundGroup\", nextParams);\n        return nextParams;\n    },\n    dragGroupControlEnd(moveable: MoveableGroupInterface<RoundableProps, RoundableState>, e: any) {\n        const moveables = moveable.moveables;\n        const targets = moveable.props.targets!;\n        const events = fillChildEvents(moveable, \"roundable\", e);\n\n        catchEvent(moveable, \"onRound\", parentEvent => {\n            const nextParams: OnRoundGroup = {\n                targets: moveable.props.targets!,\n                events: events.map((ev, i) => {\n                    return {\n                        ...ev,\n                        target: targets[i],\n                        moveable: moveables[i],\n                        currentTarget: moveables[i],\n                        ...fillCSSObject({\n                            borderRadius: parentEvent.borderRadius,\n                        }, ev),\n                    };\n                }),\n                ...parentEvent,\n            };\n            triggerEvent(moveable, \"onRoundGroup\", nextParams);\n        });\n        const result = this.dragControlEnd(moveable, e);\n\n        if (!result) {\n            return false;\n        }\n        const nextParams: OnRoundGroupEnd = {\n            targets: moveable.props.targets!,\n            events: events.map((ev, i) => {\n                return {\n                    ...ev,\n                    target: targets[i],\n                    moveable: moveables[i],\n                    currentTarget: moveables[i],\n                    lastEvent: ev.datas?.lastEvent,\n                };\n            }),\n            ...result,\n        };\n\n        triggerEvent(moveable, \"onRoundGroupEnd\", nextParams);\n        return nextParams;\n    },\n    unset(moveable: MoveableManagerInterface<RoundableProps, RoundableState>) {\n        moveable.state.borderRadiusState = \"\";\n    },\n};\n/**\n * Whether to show and drag or double click border-radius, (default: false)\n * @name Moveable.Roundable#roundable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     roundable: true,\n *     roundRelative: false,\n * });\n * moveable.on(\"roundStart\", e => {\n *     console.log(e);\n * }).on(\"round\", e => {\n *     e.target.style.borderRadius = e.borderRadius;\n * }).on(\"roundEnd\", e => {\n *     console.log(e);\n * });\n */\n/**\n * % Can be used instead of the absolute px\n * @name Moveable.Roundable#roundRelative\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     roundable: true,\n *     roundRelative: false,\n * });\n * moveable.on(\"roundStart\", e => {\n *     console.log(e);\n * }).on(\"round\", e => {\n *     e.target.style.borderRadius = e.borderRadius;\n * }).on(\"roundEnd\", e => {\n *     console.log(e);\n * });\n */\n/**\n * Minimum number of round controls. It moves in proportion by control. [horizontal, vertical] (default: [0, 0])\n * @name Moveable.Roundable#minRoundControls\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     roundable: true,\n *     roundRelative: false,\n *     minRoundControls: [0, 0],\n * });\n * moveable.minRoundControls = [1, 0];\n */\n/**\n * Maximum number of round controls. It moves in proportion by control. [horizontal, vertical] (default: [4, 4])\n * @name Moveable.Roundable#maxRoundControls\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     roundable: true,\n *     roundRelative: false,\n *     maxRoundControls: [4, 4],\n * });\n * moveable.maxRoundControls = [1, 0];\n */\n/**\n * Whether you can add/delete round controls by double-clicking a line or control.\n * @name Moveable.Roundable#roundClickable\n * @default true\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     roundable: true,\n *     roundRelative: false,\n *     roundClickable: true,\n * });\n * moveable.roundClickable = false;\n */\n\n/**\n * Whether to show a round control that does not actually exist as a shadow\n * @name Moveable.Roundable#isDisplayShadowRoundControls\n * @default false\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     roundable: true,\n *     isDisplayShadowRoundControls: false,\n * });\n * moveable.isDisplayShadowRoundControls = true;\n */\n\n\n/**\n * The padding value of the position of the round control\n * @name Moveable.Roundable#roundPadding\n * @default false\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     roundable: true,\n *     roundPadding: 0,\n * });\n * moveable.roundPadding = 15;\n */\n\n/**\n * When drag start the clip area or controls, the `roundStart` event is called.\n * @memberof Moveable.Roundable\n * @event roundStart\n * @param {Moveable.Roundable.OnRoundStart} - Parameters for the `roundStart` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     roundable: true,\n *     roundRelative: false,\n * });\n * moveable.on(\"roundStart\", e => {\n *     console.log(e);\n * }).on(\"round\", e => {\n *     e.target.style.borderRadius = e.borderRadius;\n * }).on(\"roundEnd\", e => {\n *     console.log(e);\n * });\n */\n\n\n/**\n * When drag or double click the border area or controls, the `round` event is called.\n * @memberof Moveable.Roundable\n * @event round\n * @param {Moveable.Roundable.OnRound} - Parameters for the `round` event\n * @example\n  * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     roundable: true,\n *     roundRelative: false,\n * });\n * moveable.on(\"roundStart\", e => {\n *     console.log(e);\n * }).on(\"round\", e => {\n *     e.target.style.borderRadius = e.borderRadius;\n * }).on(\"roundEnd\", e => {\n *     console.log(e);\n * });\n */\n\n\n/**\n * When drag end the border area or controls, the `roundEnd` event is called.\n * @memberof Moveable.Roundable\n * @event roundEnd\n * @param {Moveable.Roundable.onRoundEnd} - Parameters for the `roundEnd` event\n * @example\n  * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     roundable: true,\n *     roundRelative: false,\n * });\n * moveable.on(\"roundStart\", e => {\n *     console.log(e);\n * }).on(\"round\", e => {\n *     e.target.style.borderRadius = e.borderRadius;\n * }).on(\"roundEnd\", e => {\n *     console.log(e);\n * });\n */\n\n\n/**\n * When drag start the clip area or controls, the `roundGroupStart` event is called.\n * @memberof Moveable.Roundable\n * @event roundGroupStart\n * @param {Moveable.Roundable.OnRoundGroupStart} - Parameters for the `roundGroupStart` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     targets: [target1, target2, target3],\n *     roundable: true,\n * });\n * moveable.on(\"roundGroupStart\", e => {\n *     console.log(e.targets);\n * }).on(\"roundGroup\", e => {\n *   e.events.forEach(ev => {\n *       ev.target.style.cssText += ev.cssText;\n *   });\n * }).on(\"roundGroupEnd\", e => {\n *     console.log(e);\n * });\n */\n\n\n/**\n * When drag or double click the border area or controls, the `roundGroup` event is called.\n * @memberof Moveable.Roundable\n * @event roundGroup\n * @param {Moveable.Roundable.OnRoundGroup} - Parameters for the `roundGroup` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     targets: [target1, target2, target3],\n *     roundable: true,\n * });\n * moveable.on(\"roundGroupStart\", e => {\n *     console.log(e.targets);\n * }).on(\"roundGroup\", e => {\n *   e.events.forEach(ev => {\n *       ev.target.style.cssText += ev.cssText;\n *   });\n * }).on(\"roundGroupEnd\", e => {\n *     console.log(e);\n * });\n */\n\n\n/**\n * When drag end the border area or controls, the `roundGroupEnd` event is called.\n * @memberof Moveable.Roundable\n * @event roundGroupEnd\n * @param {Moveable.Roundable.onRoundGroupEnd} - Parameters for the `roundGroupEnd` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     targets: [target1, target2, target3],\n *     roundable: true,\n * });\n * moveable.on(\"roundGroupStart\", e => {\n *     console.log(e.targets);\n * }).on(\"roundGroup\", e => {\n *     e.events.forEach(ev => {\n *         ev.target.style.cssText += ev.cssText;\n *     });\n * }).on(\"roundGroupEnd\", e => {\n *     console.log(e);\n * });\n */\n", "import {\n    MoveableManagerInterface, BeforeRenderableProps,\n    OnBeforeRenderStart, OnBeforeRender, OnBeforeRenderEnd,\n    MoveableGroupInterface, OnBeforeRenderGroupStart,\n    OnBeforeRenderGroup, OnBeforeRenderGroupEnd,\n} from \"../types\";\nimport { fillParams, triggerEvent } from \"../utils\";\nimport { convertMatrixtoCSS, createIdentityMatrix } from \"@scena/matrix\";\nimport { isArray, splitSpace } from \"@daybrush/utils\";\nimport { fillChildEvents } from \"../groupUtils\";\n\n\nfunction isIdentityMatrix(matrix: string, is3d?: boolean) {\n    const n = is3d ? 4 : 3;\n    const identityMatrix = createIdentityMatrix(n);\n    const value = `matrix${is3d ? \"3d\" : \"\"}(${identityMatrix.join(\",\")})`;\n\n    return matrix === value || matrix === `matrix(1,0,0,1,0,0)`;\n}\nexport default {\n    isPinch: true,\n    name: \"beforeRenderable\",\n    props: [] as const,\n    events: [\n        \"beforeRenderStart\",\n        \"beforeRender\",\n        \"beforeRenderEnd\",\n        \"beforeRenderGroupStart\",\n        \"beforeRenderGroup\",\n        \"beforeRenderGroupEnd\",\n    ] as const,\n    dragRelation: \"weak\",\n    setTransform(moveable: MoveableManagerInterface<BeforeRenderableProps>, e: any) {\n        const {\n            is3d,\n            targetMatrix,\n            inlineTransform,\n        } = moveable.state;\n        const cssMatrix = is3d\n            ? `matrix3d(${targetMatrix.join(\",\")})`\n            : `matrix(${convertMatrixtoCSS(targetMatrix, true)})`;\n        const startTransform = !inlineTransform || inlineTransform === \"none\" ? cssMatrix : inlineTransform;\n\n        e.datas.startTransforms = isIdentityMatrix(startTransform, is3d) ? [] : splitSpace(startTransform);\n    },\n    resetStyle(e: any) {\n        const datas = e.datas;\n\n        datas.nextStyle = {};\n        datas.nextTransforms = e.datas.startTransforms;\n        datas.nextTransformAppendedIndexes = [];\n    },\n    fillDragStartParams(moveable: MoveableManagerInterface<BeforeRenderableProps>, e: any) {\n        return fillParams<OnBeforeRenderStart>(moveable, e, {\n            setTransform: (transform: string | string[]) => {\n                e.datas.startTransforms = isArray(transform) ? transform : splitSpace(transform);\n            },\n            isPinch: !!e.isPinch,\n        });\n    },\n    fillDragParams(moveable: MoveableManagerInterface<BeforeRenderableProps>, e: any) {\n        return fillParams<OnBeforeRender>(moveable, e, {\n            isPinch: !!e.isPinch,\n        });\n    },\n    dragStart(moveable: MoveableManagerInterface<BeforeRenderableProps>, e: any) {\n        this.setTransform(moveable, e);\n        this.resetStyle(e);\n\n        triggerEvent(moveable, `onBeforeRenderStart`, this.fillDragStartParams(moveable, e));\n    },\n    drag(moveable: MoveableManagerInterface<BeforeRenderableProps>, e: any) {\n        if (!e.datas.startTransforms) {\n            this.setTransform(moveable, e);\n        }\n        this.resetStyle(e);\n        triggerEvent(moveable, `onBeforeRender`, fillParams<OnBeforeRender>(moveable, e, {\n            isPinch: !!e.isPinch,\n        }));\n    },\n    dragEnd(moveable: MoveableManagerInterface<BeforeRenderableProps>, e: any) {\n        if (!e.datas.startTransforms) {\n            this.setTransform(moveable, e);\n            this.resetStyle(e);\n        }\n        triggerEvent(moveable, `onBeforeRenderEnd`, fillParams<OnBeforeRenderEnd>(moveable, e, {\n            isPinch: !!e.isPinch,\n            isDrag: e.isDrag,\n        }));\n    },\n    dragGroupStart(moveable: MoveableGroupInterface<BeforeRenderableProps>, e: any) {\n        this.dragStart(moveable, e);\n\n        const events = fillChildEvents(moveable, \"beforeRenderable\", e);\n        const moveables = moveable.moveables;\n        const params = events.map((childEvent, i) => {\n            const childMoveable = moveables[i];\n\n            this.setTransform(childMoveable, childEvent);\n            this.resetStyle(childEvent);\n\n            return this.fillDragStartParams(childMoveable, childEvent);\n        });\n        triggerEvent(moveable, `onBeforeRenderGroupStart`, fillParams<OnBeforeRenderGroupStart>(moveable, e, {\n            isPinch: !!e.isPinch,\n            targets: moveable.props.targets,\n            setTransform() { },\n            events: params,\n        }));\n    },\n    dragGroup(moveable: MoveableGroupInterface<BeforeRenderableProps>, e: any) {\n        this.drag(moveable, e);\n\n        const events = fillChildEvents(moveable, \"beforeRenderable\", e);\n        const moveables = moveable.moveables;\n        const params = events.map((childEvent, i) => {\n            const childMoveable = moveables[i];\n\n            this.resetStyle(childEvent);\n            return this.fillDragParams(childMoveable, childEvent);\n        });\n        triggerEvent(moveable, `onBeforeRenderGroup`, fillParams<OnBeforeRenderGroup>(moveable, e, {\n            isPinch: !!e.isPinch,\n            targets: moveable.props.targets,\n            events: params,\n        }));\n    },\n    dragGroupEnd(moveable: MoveableGroupInterface<BeforeRenderableProps>, e: any) {\n        this.dragEnd(moveable, e);\n\n        triggerEvent(moveable, `onBeforeRenderGroupEnd`, fillParams<OnBeforeRenderGroupEnd>(moveable, e, {\n            isPinch: !!e.isPinch,\n            isDrag: e.isDrag,\n            targets: moveable.props.targets,\n        }));\n    },\n    dragControlStart(moveable: MoveableManagerInterface<BeforeRenderableProps>, e: any) {\n        return this.dragStart(moveable, e);\n    },\n    dragControl(moveable: MoveableManagerInterface<BeforeRenderableProps>, e: any) {\n        return this.drag(moveable, e);\n    },\n    dragControlEnd(moveable: MoveableManagerInterface<BeforeRenderableProps>, e: any) {\n        return this.dragEnd(moveable, e);\n    },\n    dragGroupControlStart(moveable: MoveableGroupInterface<BeforeRenderableProps>, e: any) {\n        return this.dragGroupStart(moveable, e);\n    },\n    dragGroupControl(moveable: MoveableGroupInterface<BeforeRenderableProps>, e: any) {\n        return this.dragGroup(moveable, e);\n    },\n    dragGroupControlEnd(moveable: MoveableGroupInterface<BeforeRenderableProps>, e: any) {\n        return this.dragGroupEnd(moveable, e);\n    },\n} as const;\n", "import { parse } from \"css-to-mat\";\nimport { getNextStyle, getNextTransformText, getNextTransforms } from \"../gesto/GestoUtils\";\nimport { fillChildEvents } from \"../groupUtils\";\nimport {\n    MoveableManagerInterface, RenderableProps, OnRenderStart, OnRender,\n    OnRenderEnd, MoveableGroupInterface,\n    OnRenderGroupStart, OnRenderGroup, OnRenderGroupEnd,\n} from \"../types\";\nimport { triggerEvent, fillParams, fillCSSObject } from \"../utils\";\n\nexport default {\n    name: \"renderable\",\n    props: [] as const,\n    events: [\n        \"renderStart\",\n        \"render\",\n        \"renderEnd\",\n        \"renderGroupStart\",\n        \"renderGroup\",\n        \"renderGroupEnd\",\n    ] as const,\n    dragRelation: \"weak\",\n    dragStart(moveable: MoveableManagerInterface<RenderableProps>, e: any) {\n        triggerEvent(moveable, `onRenderStart`, fillParams<OnRenderStart>(moveable, e, {\n            isPinch: !!e.isPinch,\n        }));\n    },\n    drag(moveable: MoveableManagerInterface<RenderableProps>, e: any) {\n        triggerEvent(moveable, `onRender`, this.fillDragParams(moveable, e));\n    },\n    dragAfter(moveable: MoveableManagerInterface<RenderableProps>, e: any) {\n        return this.drag(moveable, e);\n    },\n    dragEnd(moveable: MoveableManagerInterface<RenderableProps>, e: any) {\n        triggerEvent(moveable, `onRenderEnd`, this.fillDragEndParams(moveable, e));\n    },\n    dragGroupStart(moveable: MoveableGroupInterface<RenderableProps>, e: any) {\n        triggerEvent(moveable, `onRenderGroupStart`, fillParams<OnRenderGroupStart>(moveable, e, {\n            isPinch: !!e.isPinch,\n            targets: moveable.props.targets,\n        }));\n    },\n    dragGroup(moveable: MoveableGroupInterface<RenderableProps>, e: any) {\n        const events = fillChildEvents(moveable, \"beforeRenderable\", e);\n        const moveables = moveable.moveables;\n        const params = events.map((childEvent, i) => {\n            const childMoveable = moveables[i];\n\n            return this.fillDragParams(childMoveable, childEvent);\n        });\n\n        triggerEvent(moveable, `onRenderGroup`, fillParams<OnRenderGroup>(moveable, e, {\n            isPinch: !!e.isPinch,\n            targets: moveable.props.targets,\n            transform: getNextTransformText(e),\n            transformObject: {},\n            ...fillCSSObject(getNextStyle(e)),\n            events: params,\n        },));\n    },\n    dragGroupEnd(moveable: MoveableGroupInterface<RenderableProps>, e: any) {\n        const events = fillChildEvents(moveable, \"beforeRenderable\", e);\n        const moveables = moveable.moveables;\n        const params = events.map((childEvent, i) => {\n            const childMoveable = moveables[i];\n\n            return this.fillDragEndParams(childMoveable, childEvent);\n        });\n\n        triggerEvent(moveable, `onRenderGroupEnd`, fillParams<OnRenderGroupEnd>(moveable, e, {\n            isPinch: !!e.isPinch,\n            isDrag: e.isDrag,\n            targets: moveable.props.targets,\n            events: params,\n            transformObject: {},\n            transform: getNextTransformText(e),\n            ...fillCSSObject(getNextStyle(e)),\n        }));\n    },\n    dragControlStart(moveable: MoveableManagerInterface<RenderableProps>, e: any) {\n        return this.dragStart(moveable, e);\n    },\n    dragControl(moveable: MoveableManagerInterface<RenderableProps>, e: any) {\n        return this.drag(moveable, e);\n    },\n    dragControlAfter(moveable: MoveableManagerInterface<RenderableProps>, e: any) {\n        return this.dragAfter(moveable, e);\n    },\n    dragControlEnd(moveable: MoveableManagerInterface<RenderableProps>, e: any) {\n        return this.dragEnd(moveable, e);\n    },\n    dragGroupControlStart(moveable: MoveableGroupInterface<RenderableProps>, e: any) {\n        return this.dragGroupStart(moveable, e);\n    },\n    dragGroupControl(moveable: MoveableGroupInterface<RenderableProps>, e: any) {\n        return this.dragGroup(moveable, e);\n    },\n    dragGroupControlEnd(moveable: MoveableGroupInterface<RenderableProps>, e: any) {\n        return this.dragGroupEnd(moveable, e);\n    },\n    fillDragParams(moveable: MoveableManagerInterface<RenderableProps>, e: any) {\n        const transformObject: Record<string, any> = {};\n\n        parse(getNextTransforms(e) || []).forEach(matrixInfo => {\n            transformObject[matrixInfo.name] = matrixInfo.functionValue;\n        });\n\n        return fillParams<OnRender>(moveable, e, {\n            isPinch: !!e.isPinch,\n            transformObject,\n            transform: getNextTransformText(e),\n            ...fillCSSObject(getNextStyle(e)),\n        });\n    },\n    fillDragEndParams(moveable: MoveableManagerInterface<RenderableProps>, e: any) {\n        const transformObject: Record<string, any> = {};\n\n        parse(getNextTransforms(e) || []).forEach(matrixInfo => {\n            transformObject[matrixInfo.name] = matrixInfo.functionValue;\n        });\n        return fillParams<OnRenderEnd>(moveable, e, {\n            isPinch: !!e.isPinch,\n            isDrag: e.isDrag,\n            transformObject,\n            transform: getNextTransformText(e),\n            ...fillCSSObject(getNextStyle(e)),\n        });\n    },\n} as const;\n", "import { Able, MoveableManagerInterface, MoveableGroupInterface } from \"../types\";\nimport { getWindow, hasClass, IObject } from \"@daybrush/utils\";\nimport { convertDragDist, defaultSync, getRefTarget } from \"../utils\";\nimport Gesto, { GestoOptions } from \"gesto\";\nimport BeforeRenderable from \"../ables/BeforeRenderable\";\nimport Renderable from \"../ables/Renderable\";\n\nexport function triggerAble(\n    moveable: MoveableManagerInterface,\n    moveableAbles: Able[],\n    eventOperations: string[],\n    eventAffix: string,\n    eventType: any,\n    e: any,\n    requestInstant?: boolean,\n) {\n    // pre setting\n    e.clientDistX = e.distX;\n    e.clientDistY = e.distY;\n\n    const isStart = eventType === \"Start\";\n    const isEnd = eventType === \"End\";\n    const isAfter = eventType === \"After\";\n    const target = moveable.state.target;\n    const isRequest = e.isRequest;\n    const isControl = eventAffix.indexOf(\"Control\") > -1;\n\n    if (\n        !target\n        || (isStart && isControl && !isRequest && moveable.areaElement === e.inputEvent.target)\n    ) {\n        return false;\n    }\n    const ables: Able[] = [...moveableAbles];\n\n    if (isRequest) {\n        const requestAble = e.requestAble;\n\n        if (!ables.some(able => able.name === requestAble)) {\n            ables.push(...moveable.props.ables!.filter(able => able.name === requestAble));\n        }\n    }\n    if (!ables.length || ables.every(able => able.dragRelation)) {\n        return false;\n    }\n    // \"drag\" \"Control\" \"After\"\n\n    const inputEvent = e.inputEvent;\n    let inputTarget: Element;\n\n    if (isEnd && inputEvent) {\n        inputTarget = document.elementFromPoint(e.clientX, e.clientY) || inputEvent.target;\n    }\n    let isDragStop = false;\n    const stop = () => {\n        isDragStop = true;\n        e.stop?.();\n    };\n    const isFirstStart = isStart && (\n        !moveable.targetGesto || !moveable.controlGesto\n        || (!moveable.targetGesto.isFlag() || !moveable.controlGesto.isFlag())\n    );\n\n    if (isFirstStart) {\n        moveable.updateRect(eventType, true, false);\n    }\n\n\n    // trigger ables\n    const datas = e.datas;\n    const gestoType = isControl ? \"controlGesto\" : \"targetGesto\";\n    const prevGesto = moveable[gestoType];\n\n    const trigger = (able: any, eventName: string, conditionName?: string) => {\n        if (!(eventName in able) || prevGesto !== moveable[gestoType]) {\n            return false;\n        }\n        const ableName = able.name;\n        const nextDatas = datas[ableName] || (datas[ableName] = {});\n\n        if (isStart) {\n            nextDatas.isEventStart = !conditionName\n                || !able[conditionName] || able[conditionName](moveable, e);\n        }\n\n        if (!nextDatas.isEventStart) {\n            return false;\n        }\n        const result = able[eventName](moveable, {\n            ...e,\n            stop,\n            datas: nextDatas,\n            originalDatas: datas,\n            inputTarget,\n        });\n        (moveable as any)._emitter.off();\n\n        if (isStart && result === false) {\n            nextDatas.isEventStart = false;\n        }\n        return result;\n    };\n\n    // unset ables for first drag start\n    if (isFirstStart) {\n        ables.forEach(able => {\n            able.unset && able.unset(moveable);\n        });\n    }\n    // BeforeRenderable\n    trigger(BeforeRenderable, `drag${eventAffix}${eventType}`);\n\n    let forceEndedCount = 0;\n    let updatedCount = 0;\n\n    eventOperations.forEach(eventOperation => {\n        if (isDragStop) {\n            return false;\n        }\n        const eventName = `${eventOperation}${eventAffix}${eventType}`;\n        const conditionName = `${eventOperation}${eventAffix}Condition`;\n\n        if (eventType === \"\" && !isRequest) {\n            // Convert distX, distY\n            convertDragDist(moveable.state, e);\n        }\n        // const isGroup = eventAffix.indexOf(\"Group\") > -1;\n        let eventAbles: Able[] = ables.filter((able: any) => able[eventName]);\n\n        eventAbles = eventAbles.filter((able, i) => {\n            return able.name && eventAbles.indexOf(able) === i;\n        });\n\n        const results = eventAbles.filter(able => trigger(able, eventName, conditionName));\n        const isUpdate = results.length;\n\n        // end ables\n        if (isDragStop) {\n            ++forceEndedCount;\n        }\n        if (isUpdate) {\n            ++updatedCount;\n        }\n\n        if (!isDragStop && isStart && eventAbles.length && !isUpdate) {\n            forceEndedCount += eventAbles.filter(able => {\n                const ableName = able.name;\n                const nextDatas = datas[ableName];\n\n                if (nextDatas.isEventStart) {\n                    if (able.dragRelation === \"strong\") {\n                        return false;\n                    }\n                    // stop drag\n                    return true;\n                }\n                // pre stop drag\n                return false;\n            }).length ? 1 : 0;\n        }\n    });\n\n\n    if (!isAfter || updatedCount) {\n        trigger(Renderable, `drag${eventAffix}${eventType}`);\n    }\n    // stop gesto condition\n    const isForceEnd = prevGesto !== moveable[gestoType] || forceEndedCount === eventOperations.length;\n\n    if (isEnd || isDragStop || isForceEnd) {\n        moveable.state.gestos = {};\n\n        if ((moveable as MoveableGroupInterface).moveables) {\n            (moveable as MoveableGroupInterface).moveables.forEach(childMoveable => {\n                childMoveable.state.gestos = {};\n            });\n        }\n        ables.forEach(able => {\n            able.unset && able.unset(moveable);\n        });\n    }\n    if (isStart && !isForceEnd && !isRequest && updatedCount && moveable.props.preventDefault) {\n        e?.preventDefault();\n    }\n    if (moveable.isUnmounted || isForceEnd) {\n        return false;\n    }\n    if ((!isStart && updatedCount && !requestInstant) || isEnd) {\n        const flushSync = moveable.props.flushSync || defaultSync;\n\n        flushSync(() => {\n            moveable.updateRect(isEnd ? eventType : \"\", true, false);\n            moveable.forceUpdate();\n        });\n\n    }\n    if (!isStart && !isEnd && !isAfter && updatedCount && !requestInstant) {\n        triggerAble(moveable, moveableAbles, eventOperations, eventAffix, eventType + \"After\", e);\n    }\n    return true;\n}\n\nexport function checkMoveableTarget(moveable: MoveableManagerInterface) {\n    return (e: { inputEvent: Event }) => {\n        const eventTarget = e.inputEvent.target as Element;\n        const areaElement = moveable.areaElement;\n        const dragTargetElement = (moveable as any)._dragTarget;\n\n        if (!dragTargetElement || moveable.controlGesto?.isFlag()) {\n            return false;\n        }\n\n        return eventTarget === dragTargetElement\n            || dragTargetElement.contains(eventTarget)\n            || eventTarget === areaElement\n            || (!moveable.isMoveableElement(eventTarget) && !moveable.controlBox.contains(eventTarget))\n            || hasClass(eventTarget, \"moveable-area\")\n            || hasClass(eventTarget, \"moveable-padding\")\n            || hasClass(eventTarget, \"moveable-edgeDraggable\");\n    };\n}\n\nexport function getTargetAbleGesto(\n    moveable: MoveableManagerInterface,\n    moveableTarget: HTMLElement | SVGElement,\n    eventAffix: string,\n) {\n    const controlBox = moveable.controlBox;\n    const targets: Array<HTMLElement | SVGElement> = [];\n    const props = moveable.props;\n    const dragArea =  props.dragArea;\n    const target = moveable.state.target;\n    const dragTarget = props.dragTarget;\n\n    targets.push(controlBox);\n\n    if (!dragArea || dragTarget) {\n        targets.push(moveableTarget);\n    }\n\n    if (!dragArea && dragTarget && target && moveableTarget !== target && props.dragTargetSelf) {\n        targets.push(target);\n    }\n\n    return getAbleGesto(moveable, targets, \"targetAbles\", eventAffix, {\n        dragStart: checkMoveableTarget(moveable),\n        pinchStart: checkMoveableTarget(moveable),\n    });\n}\nexport function getAbleGesto(\n    moveable: MoveableManagerInterface,\n    target: HTMLElement | SVGElement | Array<HTMLElement | SVGElement>,\n    ableType: string,\n    eventAffix: string,\n    conditionFunctions: IObject<any> = {},\n) {\n    const isTargetAbles = ableType === \"targetAbles\";\n    const {\n        pinchOutside,\n        pinchThreshold,\n        preventClickEventOnDrag,\n        preventClickDefault,\n        checkInput,\n        dragFocusedInput,\n        preventDefault = true,\n        dragContainer: dragContaienrOption,\n    } = moveable.props;\n    const dragContainer = getRefTarget(dragContaienrOption, true);\n\n    const options: GestoOptions = {\n        preventDefault,\n        preventRightClick: true,\n        preventWheelClick: true,\n        container: dragContainer || getWindow(moveable.getControlBoxElement()),\n        pinchThreshold,\n        pinchOutside,\n        preventClickEventOnDrag: isTargetAbles ? preventClickEventOnDrag : false,\n        preventClickEventOnDragStart: isTargetAbles ? preventClickDefault : false,\n        preventClickEventByCondition: isTargetAbles ? null : (e: MouseEvent) => {\n            return moveable.controlBox.contains(e.target as Element);\n        },\n        checkInput: isTargetAbles ? checkInput : false,\n        dragFocusedInput,\n    };\n    const gesto = new Gesto(target!, options);\n    const isControl = eventAffix === \"Control\";\n\n    [\"drag\", \"pinch\"].forEach(eventOperation => {\n        [\"Start\", \"\", \"End\"].forEach(eventType => {\n\n            gesto.on(`${eventOperation}${eventType}` as any, e => {\n                const eventName = e.eventType;\n                const isPinchScheduled = eventOperation === \"drag\" && e.isPinch;\n\n                if (conditionFunctions[eventName] && !conditionFunctions[eventName](e)) {\n                    e.stop();\n                    return;\n                }\n\n                if (isPinchScheduled) {\n                    return;\n                }\n                const eventOperations = eventOperation === \"drag\" ? [eventOperation] : [\"drag\", eventOperation];\n                const moveableAbles: Able[] = [...(moveable as any)[ableType]];\n                const result = triggerAble(moveable, moveableAbles, eventOperations, eventAffix, eventType, e);\n\n                if (!result) {\n                    e.stop();\n                } else if (moveable.props.stopPropagation || (eventType === \"Start\" && isControl)) {\n                    e?.inputEvent?.stopPropagation();\n                }\n            });\n        });\n    });\n\n    return gesto;\n}\n", "import { Able, MoveableManagerInterface } from \"./types\";\n\nexport default class EventManager {\n    private ables: Able[] = [];\n    constructor(\n        private target: HTMLElement | SVGElement | null,\n        private moveable: MoveableManagerInterface | null,\n        private eventName: string,\n    ) {\n        target!.addEventListener(eventName.toLowerCase(), this._onEvent);\n    }\n    public setAbles(ables: Able[]) {\n        this.ables = ables;\n    }\n    public destroy() {\n        this.target!.removeEventListener(this.eventName.toLowerCase(), this._onEvent);\n        this.target = null;\n        this.moveable = null;\n    }\n    private _onEvent = (e: Event) => {\n        const eventName = this.eventName;\n        const moveable = this.moveable!;\n\n        if (moveable.state.disableNativeEvent) {\n            return;\n        }\n        this.ables.forEach(able => {\n            (able as any)[eventName](moveable, {\n                inputEvent: e,\n            });\n        });\n    }\n}\n", "import { createIdentityMatrix, convertDimension, multiply, createOriginMatrix, ignoreDimension } from \"@scena/matrix\";\nimport { getCachedMatrixContainerInfo } from \"../store/Store\";\nimport { convert3DMatrixes, getOffsetInfo, getSVGOffset, makeMatrixCSS } from \"../utils\";\nimport { getMatrixStackInfo } from \"./getMatrixStackInfo\";\nimport { getDocumentBody } from \"@daybrush/utils\";\nimport { MatrixInfo } from \"../types\";\n\nexport interface MoveableElementMatrixInfo {\n    hasZoom: boolean;\n    hasFixed: boolean;\n    originalRootMatrix: number[];\n    rootMatrix: number[];\n    beforeMatrix: number[];\n    offsetMatrix: number[];\n    allMatrix: number[];\n    targetMatrix: number[];\n    transformOrigin: number[];\n    targetOrigin: number[];\n    is3d: boolean;\n    targetTransform: string;\n    inlineTransform: string;\n    offsetContainer: HTMLElement | null;\n    offsetRootContainer: HTMLElement | null;\n    matrixes: MatrixInfo[];\n}\n\nexport function calculateMatrixStack(\n    target: SVGElement | HTMLElement,\n    container?: SVGElement | HTMLElement | null,\n    rootContainer: SVGElement | HTMLElement | null | undefined = container,\n    isAbsolute3d?: boolean,\n    // prevMatrix?: number[],\n    // prevRootMatrix?: number[],\n    // prevN?: number,\n): MoveableElementMatrixInfo {\n    const {\n        matrixes,\n        is3d,\n        targetMatrix: prevTargetMatrix,\n        transformOrigin,\n        targetOrigin,\n        offsetContainer,\n        hasFixed,\n        zoom: containerZoom,\n    } = getMatrixStackInfo(target, container); // prevMatrix\n\n    const {\n        matrixes: rootMatrixes,\n        is3d: isRoot3d,\n        offsetContainer: offsetRootContainer,\n        zoom: rootZoom,\n    } = getCachedMatrixContainerInfo(offsetContainer, rootContainer); // prevRootMatrix\n\n    // if (rootContainer === document.body) {\n    //     console.log(offsetContainer, rootContainer, rootMatrixes);\n    // }\n    const isNext3d = isAbsolute3d || isRoot3d || is3d;\n    const n = isNext3d ? 4 : 3;\n    const isSVGGraphicElement = target.tagName.toLowerCase() !== \"svg\" && \"ownerSVGElement\" in target;\n    let targetMatrix = prevTargetMatrix;\n    // let allMatrix = prevMatrix ? convertDimension(prevMatrix, prevN!, n) : createIdentityMatrix(n);\n    // let rootMatrix = prevRootMatrix ? convertDimension(prevRootMatrix, prevN!, n) : createIdentityMatrix(n);\n    // let beforeMatrix = prevMatrix ? convertDimension(prevMatrix, prevN!, n) : createIdentityMatrix(n);\n    let allMatrix = createIdentityMatrix(n);\n    let rootMatrix = createIdentityMatrix(n);\n    let beforeMatrix = createIdentityMatrix(n);\n    let offsetMatrix = createIdentityMatrix(n);\n    const length = matrixes.length;\n    const nextRootMatrixes = rootMatrixes.map(info => {\n        return {\n            ...info,\n            matrix: info.matrix ? [...info.matrix] : undefined,\n        };\n    }).reverse();\n    matrixes.reverse();\n\n    if (!is3d && isNext3d) {\n        targetMatrix = convertDimension(targetMatrix, 3, 4);\n\n        convert3DMatrixes(matrixes);\n    }\n    if (!isRoot3d && isNext3d) {\n        convert3DMatrixes(nextRootMatrixes);\n    }\n\n\n    // rootMatrix = (...) -> container -> offset -> absolute -> offset -> absolute(targetMatrix)\n    // rootMatrixBeforeOffset = lastOffsetMatrix -> (...) -> container\n    // beforeMatrix = (... -> container -> offset -> absolute) -> offset -> absolute(targetMatrix)\n    // offsetMatrix = (... -> container -> offset -> absolute -> offset) -> absolute(targetMatrix)\n\n    nextRootMatrixes.forEach(info => {\n        rootMatrix = multiply(rootMatrix, info.matrix!, n);\n    });\n    const originalRootContainer = rootContainer || getDocumentBody(target);\n    const endContainer = nextRootMatrixes[0]?.target\n        || getOffsetInfo(originalRootContainer, originalRootContainer, true).offsetParent;\n    const rootMatrixBeforeOffset = nextRootMatrixes.slice(1).reduce((matrix, info) => {\n        return multiply(matrix, info.matrix!, n);\n    }, createIdentityMatrix(n));\n    matrixes.forEach((info, i) => {\n        if (length - 2 === i) {\n            // length - 3\n            beforeMatrix = allMatrix.slice();\n        }\n        if (length - 1 === i) {\n            // length - 2\n            offsetMatrix = allMatrix.slice();\n        }\n\n        // calculate for SVGElement\n        if (!info.matrix) {\n            const nextInfo = matrixes[i + 1];\n            const offset = getSVGOffset(\n                info,\n                nextInfo,\n                endContainer,\n                n,\n                multiply(rootMatrixBeforeOffset, allMatrix, n),\n            );\n            info.matrix = createOriginMatrix(offset, n);\n        }\n        allMatrix = multiply(allMatrix, info.matrix!, n);\n    });\n    const isMatrix3d = !isSVGGraphicElement && is3d;\n\n    if (!targetMatrix) {\n        targetMatrix = createIdentityMatrix(isMatrix3d ? 4 : 3);\n    }\n    const targetTransform = makeMatrixCSS(\n        isSVGGraphicElement && targetMatrix.length === 16\n            ? convertDimension(targetMatrix, 4, 3) : targetMatrix,\n        isMatrix3d,\n    );\n\n    const originalRootMatrix = rootMatrix;\n    rootMatrix = ignoreDimension(rootMatrix, n, n);\n\n    return {\n        hasZoom: containerZoom !== 1 || rootZoom !== 1,\n        hasFixed,\n        matrixes,\n        rootMatrix,\n        originalRootMatrix,\n        beforeMatrix,\n        offsetMatrix,\n        allMatrix,\n        targetMatrix,\n        targetTransform,\n        inlineTransform: target.style.transform,\n        transformOrigin,\n        targetOrigin,\n        is3d: isNext3d,\n        offsetContainer,\n        offsetRootContainer,\n    };\n}\n", "import { createIdentityMatrix } from \"@scena/matrix\";\nimport { ElementSizes, MoveablePosition } from \"../types\";\nimport { getSize, getRotationRad } from \"../utils\";\nimport { calculateMatrixStack, MoveableElementMatrixInfo } from \"./calculateMatrixStack\";\nimport { calculateElementPosition } from \"./calculateElementPosition\";\n\nexport interface MoveableElementInfo extends MoveableElementMatrixInfo, MoveablePosition, ElementSizes {\n    width: number;\n    height: number;\n    rotation: number;\n}\n\nexport function calculateElementInfo(\n    target?: SVGElement | HTMLElement | null,\n    container?: SVGElement | HTMLElement | null,\n    rootContainer: HTMLElement | SVGElement | null | undefined = container,\n    isAbsolute3d?: boolean,\n): MoveableElementInfo {\n    let width = 0;\n    let height = 0;\n    let rotation = 0;\n    let allResult: {} = {};\n\n    const sizes = getSize(target);\n\n    if (target) {\n        width = sizes.offsetWidth;\n        height = sizes.offsetHeight;\n    }\n\n    if (target) {\n        const result = calculateMatrixStack(\n            target,\n            container,\n            rootContainer,\n            isAbsolute3d,\n            // prevMatrix, prevRootMatrix, prevN,\n        );\n\n        const position = calculateElementPosition(\n            result.allMatrix,\n            result.transformOrigin,\n            width, height,\n        );\n        allResult = {\n            ...result,\n            ...position,\n        };\n        const rotationPosition = calculateElementPosition(\n            result.allMatrix, [50, 50], 100, 100,\n        );\n        rotation = getRotationRad([rotationPosition.pos1, rotationPosition.pos2], rotationPosition.direction);\n    }\n    const n = isAbsolute3d ? 4 : 3;\n\n    return {\n        hasZoom: false,\n        width,\n        height,\n        rotation,\n        ...sizes,\n        originalRootMatrix: createIdentityMatrix(n),\n        rootMatrix: createIdentityMatrix(n),\n        beforeMatrix: createIdentityMatrix(n),\n        offsetMatrix: createIdentityMatrix(n),\n        allMatrix: createIdentityMatrix(n),\n        targetMatrix: createIdentityMatrix(n),\n        targetTransform: \"\",\n        inlineTransform: \"\",\n        transformOrigin: [0, 0],\n        targetOrigin: [0, 0],\n        is3d: !!isAbsolute3d,\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0,\n        origin: [0, 0],\n        pos1: [0, 0],\n        pos2: [0, 0],\n        pos3: [0, 0],\n        pos4: [0, 0],\n        direction: 1,\n        hasFixed: false,\n        offsetContainer: null,\n        offsetRootContainer: null,\n        matrixes: [],\n        ...allResult,\n    };\n}\n\n\nexport function getElementInfo(\n    target: SVGElement | HTMLElement,\n    container?: SVGElement | HTMLElement | null,\n    rootContainer: SVGElement | HTMLElement | null | undefined = container,\n) {\n    return calculateElementInfo(target, container, rootContainer, true);\n}\n", "import { plus, getOrigin, multiply, minus } from \"@scena/matrix\";\nimport { getCachedClientRect, getCachedStyle } from \"../store/Store\";\nimport { MoveableClientRect, Writable } from \"../types\";\nimport {\n    calculateInversePosition,\n    getClientRect, getClientRectByPosition, getOffsetInfo, resetClientRect,\n    getTransformOriginArray,\n} from \"../utils\";\nimport { calculateElementInfo, MoveableElementInfo } from \"./getElementInfo\";\nimport { calculateElementPosition } from \"./calculateElementPosition\";\n\n\nexport interface MoveableTargetInfo extends MoveableElementInfo {\n    targetClientRect: MoveableClientRect;\n    containerClientRect: MoveableClientRect;\n    moveableClientRect: MoveableClientRect;\n    rootContainerClientRect: MoveableClientRect;\n    beforeDirection: 1 | -1;\n    beforeOrigin: number[];\n    offsetDelta: number[],\n    originalBeforeOrigin: number[];\n    target: HTMLElement | SVGElement | null | undefined;\n    style: Partial<Writable<CSSStyleDeclaration>>;\n}\n\nexport function getMoveableTargetInfo(\n    moveableElement?: HTMLElement | null,\n    target?: HTMLElement | SVGElement | null,\n    container?: HTMLElement | SVGElement | null,\n    parentContainer?: HTMLElement | SVGElement | null,\n    rootContainer?: HTMLElement | SVGElement | null,\n    requestStyles: Array<keyof CSSStyleDeclaration> = [],\n): MoveableTargetInfo {\n    let beforeDirection: 1 | -1 = 1;\n    let beforeOrigin = [0, 0];\n    let targetClientRect = resetClientRect();\n    let moveableClientRect = resetClientRect();\n    let containerClientRect = resetClientRect();\n    let rootContainerClientRect = resetClientRect();\n    let offsetDelta = [0, 0];\n    const style: Partial<Writable<CSSStyleDeclaration>> = {};\n\n    const result = calculateElementInfo(\n        target, container!, rootContainer!,\n        true,\n    );\n    if (target) {\n        const getStyle = getCachedStyle(target);\n\n        requestStyles.forEach(name => {\n            (style as any)[name] = getStyle(name as any);\n        });\n        const n = result.is3d ? 4 : 3;\n        const beforePosition = calculateElementPosition(\n            result.offsetMatrix,\n            plus(result.transformOrigin, getOrigin(result.targetMatrix, n)),\n            result.width, result.height,\n        );\n        beforeDirection = beforePosition.direction;\n        beforeOrigin = plus(\n            beforePosition.origin,\n            [beforePosition.left - result.left, beforePosition.top - result.top],\n        );\n\n        rootContainerClientRect = getClientRect(result.offsetRootContainer!);\n\n\n        const offsetContainer = getOffsetInfo(parentContainer, parentContainer, true).offsetParent\n            || result.offsetRootContainer!;\n\n        if (result.hasZoom) {\n            const absoluteTargetPosition = calculateElementPosition(\n                multiply(result.originalRootMatrix, result.allMatrix),\n                result.transformOrigin,\n                result.width, result.height,\n            );\n            const absoluteContainerPosition = calculateElementPosition(\n                result.originalRootMatrix,\n                getTransformOriginArray(getCachedStyle(offsetContainer)(\"transformOrigin\")).map(pos => parseFloat(pos)),\n                offsetContainer.offsetWidth, offsetContainer.offsetHeight,\n            );\n            targetClientRect = getClientRectByPosition(absoluteTargetPosition, rootContainerClientRect);\n            containerClientRect = getClientRectByPosition(\n                absoluteContainerPosition,\n                rootContainerClientRect,\n                offsetContainer,\n                true,\n            );\n\n            if (moveableElement) {\n                const left = absoluteTargetPosition.left;\n                const top = absoluteTargetPosition.top;\n                moveableClientRect = getClientRectByPosition({\n                    left,\n                    top,\n                    bottom: top,\n                    right: top,\n                }, rootContainerClientRect);\n            }\n        } else {\n            targetClientRect = getClientRect(target);\n            containerClientRect = getCachedClientRect(offsetContainer);\n\n            if (moveableElement) {\n                moveableClientRect = getClientRect(moveableElement);\n            }\n            const {\n                left: containerClientRectLeft,\n                top: containerClientRectTop,\n                clientLeft: containterClientLeft,\n                clientTop: containerClientTop,\n            } = containerClientRect;\n            const clientDelta = [\n                targetClientRect.left - containerClientRectLeft,\n                targetClientRect.top - containerClientRectTop,\n            ];\n\n            offsetDelta = minus(\n                calculateInversePosition(result.rootMatrix, clientDelta, 4),\n                [containterClientLeft! + result.left, containerClientTop! + result.top],\n            );\n        }\n    }\n\n    return {\n        targetClientRect,\n        containerClientRect,\n        moveableClientRect,\n        rootContainerClientRect,\n        beforeDirection,\n        beforeOrigin,\n        originalBeforeOrigin: beforeOrigin,\n        target,\n        style,\n        offsetDelta,\n        ...result,\n    };\n}\n", "import { minus } from \"@scena/matrix\";\nimport { getMinMaxs } from \"overlap-area\";\nimport { MoveableManagerState, PersistRectData } from \"../types\";\n\n\nexport function getPersistState(rect: PersistRectData): Partial<MoveableManagerState> | null {\n    let {\n        pos1,\n        pos2,\n        pos3,\n        pos4,\n    } = rect;\n    if (!pos1 || !pos2 || !pos3 || !pos4) {\n        return null;\n    }\n    const minPos = getMinMaxs([pos1!, pos2!, pos3!, pos4!]);\n    const posDelta = [minPos.minX, minPos.minY];\n    const origin = minus(rect.origin!, posDelta);\n\n    pos1 = minus(pos1, posDelta);\n    pos2 = minus(pos2, posDelta);\n    pos3 = minus(pos3, posDelta);\n    pos4 = minus(pos4, posDelta);\n    return {\n        ...rect,\n        left: rect.left,\n        top: rect.top,\n        posDelta,\n        pos1,\n        pos2,\n        pos3,\n        pos4,\n        origin,\n        beforeOrigin: origin,\n        // originalBeforeOrigin: origin,\n        isPersisted: true,\n    };\n}\n", "import * as React from \"react\";\nimport { createElement } from \"react\";\nimport { PREFIX } from \"./consts\";\nimport {\n    prefix,\n    unsetGesto,\n    getAbsolutePosesByState,\n    getRect,\n    filterAbles,\n    equals,\n    flat,\n    groupByMap,\n    calculatePadding,\n    getAbsoluteRotation,\n    defaultSync,\n    getRefTarget,\n    groupBy,\n    unsetAbles,\n    getPaddingBox,\n} from \"./utils\";\nimport Gesto from \"gesto\";\nimport { ref } from \"framework-utils\";\nimport {\n    MoveableManagerProps, MoveableManagerState, Able,\n    RectInfo, Requester, HitRect, MoveableManagerInterface,\n    MoveableDefaultOptions,\n    GroupableProps,\n    MoveableRefType,\n} from \"./types\";\nimport { triggerAble, getTargetAbleGesto, getAbleGesto, checkMoveableTarget } from \"./gesto/getAbleGesto\";\nimport { createOriginMatrix, multiplies, plus } from \"@scena/matrix\";\nimport {\n    addClass, cancelAnimationFrame, find,\n    getKeys, getWindow, IObject, isNode, removeClass, requestAnimationFrame,\n} from \"@daybrush/utils\";\nimport { renderLine } from \"./renderDirections\";\nimport { fitPoints, getAreaSize, getOverlapSize, isInside } from \"overlap-area\";\nimport EventManager from \"./EventManager\";\nimport { styled } from \"react-css-styled\";\nimport EventEmitter from \"@scena/event-emitter\";\nimport { getMoveableTargetInfo } from \"./utils/getMoveableTargetInfo\";\nimport { VIEW_DRAGGING } from \"./classNames\";\nimport { diff } from \"@egjs/list-differ\";\nimport { getPersistState } from \"./utils/persist\";\nimport { setStoreCache } from \"./store/Store\";\n\nexport default class MoveableManager<T = {}>\n    extends React.PureComponent<MoveableManagerProps<T>, MoveableManagerState> {\n    public static defaultProps: Required<MoveableManagerProps> = {\n        dragTargetSelf: false,\n        target: null,\n        dragTarget: null,\n        container: null,\n        rootContainer: null,\n        origin: true,\n        parentMoveable: null,\n        wrapperMoveable: null,\n        isWrapperMounted: false,\n        parentPosition: null,\n        warpSelf: false,\n        svgOrigin: \"\",\n        dragContainer: null,\n        useResizeObserver: false,\n        useMutationObserver: false,\n        preventDefault: true,\n        linePadding: 0,\n        controlPadding: 0,\n        ables: [],\n        pinchThreshold: 20,\n        dragArea: false,\n        passDragArea: false,\n        transformOrigin: \"\",\n        className: \"\",\n        zoom: 1,\n        triggerAblesSimultaneously: false,\n        padding: {},\n        pinchOutside: true,\n        checkInput: false,\n        dragFocusedInput: false,\n        groupable: false,\n        hideDefaultLines: false,\n        cspNonce: \"\",\n        translateZ: 0,\n        cssStyled: null,\n        customStyledMap: {},\n        props: {},\n        stopPropagation: false,\n        preventClickDefault: false,\n        preventClickEventOnDrag: true,\n        flushSync: defaultSync,\n        firstRenderState: null,\n        persistData: null,\n        viewContainer: null,\n        requestStyles: [],\n        useAccuratePosition: false,\n    };\n    public state: MoveableManagerState = {\n        container: null,\n        gestos: {},\n        renderLines: [\n            [[0, 0], [0, 0]],\n            [[0, 0], [0, 0]],\n            [[0, 0], [0, 0]],\n            [[0, 0], [0, 0]],\n        ],\n        renderPoses: [[0, 0], [0, 0], [0, 0], [0, 0]],\n        disableNativeEvent: false,\n        posDelta: [0, 0],\n        ...getMoveableTargetInfo(null),\n    };\n    public renderState: Record<string, any> = {};\n    public enabledAbles: Able[] = [];\n    public targetAbles: Able[] = [];\n    public controlAbles: Able[] = [];\n    public controlBox!: HTMLElement;\n    public areaElement!: HTMLElement;\n    public targetGesto!: Gesto;\n    public controlGesto!: Gesto;\n    public rotation = 0;\n    public scale: number[] = [1, 1];\n    public isMoveableMounted = false;\n    public isUnmounted = false;\n\n    public events: Record<string, EventManager | null> = {\n        \"mouseEnter\": null,\n        \"mouseLeave\": null,\n    };\n\n    protected _emitter: EventEmitter = new EventEmitter();\n\n    protected _prevOriginalDragTarget: MoveableRefType | null = null;\n    protected _originalDragTarget: MoveableRefType | null = null;\n\n    protected _prevDragTarget: HTMLElement | SVGElement | null | undefined = null;\n    protected _dragTarget: HTMLElement | SVGElement | null | undefined = null;\n\n    protected _prevPropTarget: HTMLElement | SVGElement | null | undefined = null;\n    protected _propTarget: HTMLElement | SVGElement | null | undefined = null;\n\n    protected _prevDragArea = false;\n    protected _isPropTargetChanged = false;\n    protected _hasFirstTarget = false;\n\n    private _reiszeObserver: ResizeObserver | null = null;\n    private _observerId = 0;\n    private _mutationObserver: MutationObserver | null = null;\n    public _rootContainer: HTMLElement | null | undefined = null;\n    private _viewContainer: HTMLElement | null | undefined = null;\n    private _viewClassNames: string[] = [];\n    private _store: Record<string, any> = {};\n\n    public render() {\n        const props = this.props;\n        const state = this.getState();\n        const {\n            parentPosition,\n            className,\n            target: propsTarget,\n            zoom, cspNonce,\n            translateZ,\n            cssStyled: ControlBoxElement,\n            groupable,\n            linePadding,\n            controlPadding,\n        } = props;\n\n        this._checkUpdateRootContainer();\n        this.checkUpdate();\n        this.updateRenderPoses();\n\n        const [parentLeft, parentTop] = parentPosition as number[] || [0, 0];\n        const {\n            left,\n            top,\n            target: stateTarget,\n            direction,\n            hasFixed,\n            offsetDelta,\n        } = state;\n        const groupTargets = (props as any).targets;\n        const isDragging = this.isDragging();\n        const ableAttributes: IObject<boolean> = {};\n        this.getEnabledAbles().forEach(able => {\n            ableAttributes[`data-able-${able.name.toLowerCase()}`] = true;\n        });\n        const ableClassName = this._getAbleClassName();\n        const isDisplay\n            = (groupTargets && groupTargets.length && (stateTarget || groupable))\n            || propsTarget\n            || (!this._hasFirstTarget && this.state.isPersisted);\n        const isVisible = this.controlBox || this.props.firstRenderState || this.props.persistData;\n        const translate = [left - parentLeft, top - parentTop];\n\n        if (!groupable && props.useAccuratePosition) {\n            translate[0] += offsetDelta[0];\n            translate[1] += offsetDelta[1];\n        }\n        const style: Record<string, any> = {\n            \"position\": hasFixed ? \"fixed\" : \"absolute\",\n            \"display\": isDisplay ? \"block\" : \"none\",\n            \"visibility\": isVisible ? \"visible\" : \"hidden\",\n            \"transform\": `translate3d(${translate[0]}px, ${translate[1]}px, ${translateZ})`,\n            \"--zoom\": zoom,\n            \"--zoompx\": `${zoom}px`,\n        };\n        if (linePadding) {\n            style[\"--moveable-line-padding\"] = linePadding;\n        }\n        if (controlPadding) {\n            style[\"--moveable-control-padding\"] = controlPadding;\n        }\n        return (\n            <ControlBoxElement\n                cspNonce={cspNonce}\n                ref={ref(this, \"controlBox\")}\n                className={`${prefix(\"control-box\", direction === -1 ? \"reverse\" : \"\", isDragging ? \"dragging\" : \"\")} ${ableClassName} ${className}`}\n                {...ableAttributes}\n                onClick={this._onPreventClick}\n                style={style}>\n                {this.renderAbles()}\n                {this._renderLines()}\n            </ControlBoxElement>\n        );\n    }\n    public componentDidMount() {\n        this.isMoveableMounted = true;\n        this.isUnmounted = false;\n        const props = this.props;\n        const { parentMoveable, container } = props;\n\n\n        this._checkUpdateRootContainer();\n        this._checkUpdateViewContainer();\n        this._updateTargets();\n        this._updateNativeEvents();\n        this._updateEvents();\n        this.updateCheckInput();\n        this._updateObserver(this.props);\n\n        if (!container && !parentMoveable && !this.state.isPersisted) {\n            this.updateRect(\"\", false, false);\n            this.forceUpdate();\n        }\n    }\n    public componentDidUpdate(prevProps: any) {\n        this._checkUpdateRootContainer();\n        this._checkUpdateViewContainer();\n        this._updateNativeEvents();\n        this._updateTargets();\n        this._updateEvents();\n        this.updateCheckInput();\n        this._updateObserver(prevProps);\n    }\n    public componentWillUnmount() {\n        this.isMoveableMounted = false;\n        this.isUnmounted = true;\n        this._emitter.off();\n        this._reiszeObserver?.disconnect();\n        this._mutationObserver?.disconnect();\n\n        const viewContainer = this._viewContainer;\n\n        if (viewContainer) {\n            this._changeAbleViewClassNames([]);\n        }\n        unsetGesto(this, false);\n        unsetGesto(this, true);\n\n        const events = this.events;\n        for (const name in events) {\n            const manager = events[name];\n            manager && manager.destroy();\n        }\n    }\n    public getTargets(): Array<HTMLElement | SVGElement> {\n        const target = this.props.target;\n        return target ? [target] : [];\n    }\n    /**\n     * Get the able used in MoveableManager.\n     * @method Moveable#getAble\n     * @param - able name\n     */\n    public getAble<T extends Able>(ableName: string): T | undefined {\n        const ables: Able[] = this.props.ables || [];\n\n        return find(ables, able => able.name === ableName) as T;\n    }\n    public getContainer(): HTMLElement | SVGElement {\n        const { parentMoveable, wrapperMoveable, container } = this.props;\n\n        return container!\n            || (wrapperMoveable && wrapperMoveable.getContainer())\n            || (parentMoveable && parentMoveable.getContainer())\n            || this.controlBox.parentElement!;\n    }\n    /**\n     * Returns the element of the control box.\n     * @method Moveable#getControlBoxElement\n     */\n    public getControlBoxElement(): HTMLElement {\n        return this.controlBox;\n    }\n    /**\n     * Target element to be dragged in moveable\n     * @method Moveable#getDragElement\n     */\n    public getDragElement(): HTMLElement | SVGElement | null | undefined {\n        return this._dragTarget;\n    }\n    /**\n     * Check if the target is an element included in the moveable.\n     * @method Moveable#isMoveableElement\n     * @param - the target\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * window.addEventListener(\"click\", e => {\n     *     if (!moveable.isMoveableElement(e.target)) {\n     *         moveable.target = e.target;\n     *     }\n     * });\n     */\n    public isMoveableElement(target: Element) {\n        return target && (target.getAttribute?.(\"class\") || \"\").indexOf(PREFIX) > -1;\n    }\n    /**\n     * You can drag start the Moveable through the external `MouseEvent`or `TouchEvent`. (Angular: ngDragStart)\n     * @method Moveable#dragStart\n     * @param - external `MouseEvent`or `TouchEvent`\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * document.body.addEventListener(\"mousedown\", e => {\n     *     if (!moveable.isMoveableElement(e.target)) {\n     *          moveable.dragStart(e);\n     *     }\n     * });\n     */\n    public dragStart(e: MouseEvent | TouchEvent) {\n        const targetGesto = this.targetGesto;\n        const controlGesto = this.controlGesto;\n\n        if (targetGesto && checkMoveableTarget(this)({ inputEvent: e })) {\n            if (!targetGesto.isFlag()) {\n                targetGesto.triggerDragStart(e);\n            }\n        } else if (controlGesto && this.isMoveableElement(e.target as Element)) {\n            if (!controlGesto.isFlag()) {\n                controlGesto.triggerDragStart(e);\n            }\n        }\n        return this;\n    }\n    /**\n     * Hit test an element or rect on a moveable target.\n     * (100% = 100)\n     * @method Moveable#hitTest\n     * @param - element or rect to test\n     * @return - Get hit test rate (rate > 0 is hitted)\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * document.body.addEventListener(\"mousedown\", e => {\n     *     if (moveable.hitTest(e.target) > 0) {\n     *          console.log(\"hiited\");\n     *     }\n     * });\n     */\n    public hitTest(el: Element | HitRect): number {\n        const { target, pos1, pos2, pos3, pos4, targetClientRect } = this.state;\n\n        if (!target) {\n            return 0;\n        }\n        let rect: Required<HitRect>;\n\n        if (isNode(el)) {\n            const clientRect = el.getBoundingClientRect();\n\n            rect = {\n                left: clientRect.left,\n                top: clientRect.top,\n                width: clientRect.width,\n                height: clientRect.height,\n            };\n        } else {\n            rect = { width: 0, height: 0, ...el };\n        }\n\n        const {\n            left: rectLeft,\n            top: rectTop,\n            width: rectWidth,\n            height: rectHeight,\n        } = rect;\n        const points = fitPoints([pos1, pos2, pos4, pos3], targetClientRect);\n        const size = getOverlapSize(points, [\n            [rectLeft, rectTop],\n            [rectLeft + rectWidth, rectTop],\n            [rectLeft + rectWidth, rectTop + rectHeight],\n            [rectLeft, rectTop + rectHeight],\n        ]);\n        const totalSize = getAreaSize(points);\n\n        if (!size || !totalSize) {\n            return 0;\n        }\n\n        return Math.min(100, size / totalSize * 100);\n    }\n    /**\n     * Whether the coordinates are inside Moveable\n     * @method Moveable#isInside\n     * @param - x coordinate\n     * @param - y coordinate\n     * @return - True if the coordinate is in moveable or false\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * document.body.addEventListener(\"mousedown\", e => {\n     *     if (moveable.isInside(e.clientX, e.clientY)) {\n     *          console.log(\"inside\");\n     *     }\n     * });\n     */\n    public isInside(clientX: number, clientY: number) {\n        const { target, pos1, pos2, pos3, pos4, targetClientRect } = this.state;\n\n        if (!target) {\n            return false;\n        }\n        return isInside([clientX, clientY], fitPoints([pos1, pos2, pos4, pos3], targetClientRect));\n    }\n    /**\n     * If the width, height, left, and top of all elements change, update the shape of the moveable.\n     * @method Moveable#updateRect\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * window.addEventListener(\"resize\", e => {\n     *     moveable.updateRect();\n     * });\n     */\n    public updateRect(type?: \"Start\" | \"\" | \"End\", isTarget?: boolean, isSetState: boolean = true) {\n        const props = this.props;\n        const isSingle = !props.parentPosition && !props.wrapperMoveable;\n\n        if (isSingle) {\n            setStoreCache(true);\n        }\n        const parentMoveable = props.parentMoveable;\n        const state = this.state;\n        const target = (state.target || props.target) as HTMLElement | SVGElement;\n        const container = this.getContainer();\n        const rootContainer = parentMoveable\n            ? (parentMoveable as any)._rootContainer\n            : this._rootContainer;\n        const nextState = getMoveableTargetInfo(\n            this.controlBox,\n            target,\n            container,\n            container,\n            rootContainer || container,\n            this._getRequestStyles(),\n        );\n\n        if (!target && this._hasFirstTarget && props.persistData) {\n            const persistState = getPersistState(props.persistData);\n\n            for (const name in persistState) {\n                (nextState as any)[name] = (persistState as any)[name];\n            }\n        }\n\n        if (isSingle) {\n            setStoreCache();\n        }\n        this.updateState(\n            nextState,\n            parentMoveable ? false : isSetState,\n        );\n    }\n    /**\n     * Check if the moveable state is being dragged.\n     * @method Moveable#isDragging\n     * @param - If you want to check if able is dragging, specify ableName.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * // false\n     * console.log(moveable.isDragging());\n     *\n     * moveable.on(\"drag\", () => {\n     *   // true\n     *   console.log(moveable.isDragging());\n     * });\n     */\n    public isDragging(ableName?: string) {\n        const targetGesto = this.targetGesto;\n        const controlGesto = this.controlGesto;\n\n        if (targetGesto?.isFlag()) {\n            if (!ableName) {\n                return true;\n            }\n            const data = targetGesto.getEventData();\n\n            return !!data[ableName]?.isEventStart;\n        }\n        if (controlGesto?.isFlag()) {\n            if (!ableName) {\n                return true;\n            }\n            const data = controlGesto.getEventData();\n\n            return !!data[ableName]?.isEventStart;\n        }\n        return false;\n    }\n    /**\n     * If the width, height, left, and top of the only target change, update the shape of the moveable.\n     * Use `.updateRect()` method\n     * @method Moveable#updateTarget\n     * @deprecated\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.updateTarget();\n     */\n    public updateTarget(type?: \"Start\" | \"\" | \"End\") {\n        this.updateRect(type, true);\n    }\n    /**\n     * You can get the vertex information, position and offset size information of the target based on the container.\n     * @method Moveable#getRect\n     * @return - The Rect Info\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * const rectInfo = moveable.getRect();\n     */\n    public getRect(): RectInfo {\n        const state = this.state;\n        const poses = getAbsolutePosesByState(this.state);\n        const [pos1, pos2, pos3, pos4] = poses;\n        const rect = getRect(poses);\n        const {\n            width: offsetWidth,\n            height: offsetHeight,\n        } = state;\n        const {\n            width,\n            height,\n            left,\n            top,\n        } = rect;\n        const statePos = [state.left, state.top];\n        const origin = plus(statePos, state.origin);\n        const beforeOrigin = plus(statePos, state.beforeOrigin);\n        const transformOrigin = state.transformOrigin;\n\n        return {\n            width,\n            height,\n            left,\n            top,\n            pos1,\n            pos2,\n            pos3,\n            pos4,\n            offsetWidth,\n            offsetHeight,\n            beforeOrigin,\n            origin,\n            transformOrigin,\n            rotation: this.getRotation(),\n        };\n    }\n    /**\n     * Get a manager that manages the moveable's state and props.\n     * @method Moveable#getManager\n     * @return - The Rect Info\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * const manager = moveable.getManager(); // real moveable class instance\n     */\n    public getManager(): MoveableManagerInterface<any, any> {\n        return this as any;\n    }\n    /**\n     * You can stop the dragging currently in progress through a method from outside.\n     * @method Moveable#stopDrag\n     * @return - The Rect Info\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.stopDrag();\n     */\n    public stopDrag(type?: \"target\" | \"control\"): void {\n        if (!type || type === \"target\") {\n            const gesto = this.targetGesto;\n\n            if (gesto?.isIdle() === false) {\n                unsetAbles(this, false);\n            }\n            gesto?.stop();\n        }\n        if (!type || type === \"control\") {\n            const gesto = this.controlGesto;\n\n            if (gesto?.isIdle() === false) {\n                unsetAbles(this, true);\n            }\n            gesto?.stop();\n        }\n    }\n    public getRotation() {\n        const {\n            pos1,\n            pos2,\n            direction,\n        } = this.state;\n\n        return getAbsoluteRotation(pos1, pos2, direction);\n    }\n    /**\n     * Request able through a method rather than an event.\n     * At the moment of execution, requestStart is executed,\n     * and then request and requestEnd can be executed through Requester.\n     * @method Moveable#request\n     * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Draggable.html#request|Draggable Requester}\n     * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Resizable.html#request|Resizable Requester}\n     * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Scalable.html#request|Scalable Requester}\n     * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.Rotatable.html#request|Rotatable Requester}\n     * @see {@link https://daybrush.com/moveable/release/latest/doc/Moveable.OriginDraggable.html#request|OriginDraggable Requester}\n     * @param - ableName\n     * @param - request to be able params.\n     * @param - If isInstant is true, request and requestEnd are executed immediately.\n     * @return - Able Requester. If there is no request in able, nothing will work.\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * // Instantly Request (requestStart - request - requestEnd)\n     * moveable.request(\"draggable\", { deltaX: 10, deltaY: 10 }, true);\n     *\n     * // Start move\n     * const requester = moveable.request(\"draggable\");\n     * requester.request({ deltaX: 10, deltaY: 10 });\n     * requester.request({ deltaX: 10, deltaY: 10 });\n     * requester.request({ deltaX: 10, deltaY: 10 });\n     * requester.requestEnd();\n     */\n    public request(\n        ableName: string,\n        param: IObject<any> = {},\n        isInstant?: boolean,\n    ): Requester {\n        const self = this;\n        const props = self.props;\n        const manager = props.parentMoveable || props.wrapperMoveable || self;\n        const allAbles = manager.props.ables!;\n        const groupable = props.groupable;\n        const requsetAble = find(allAbles, (able: Able) => able.name === ableName);\n\n        if (this.isDragging() || !requsetAble || !requsetAble.request) {\n            return {\n                request() {\n                    return this;\n                },\n                requestEnd() {\n                    return this;\n                },\n            };\n        }\n\n        const ableRequester = requsetAble.request(self);\n        const requestInstant = isInstant || param.isInstant;\n        const ableType = ableRequester.isControl ? \"controlAbles\" : \"targetAbles\";\n        const eventAffix = `${(groupable ? \"Group\" : \"\")}${ableRequester.isControl ? \"Control\" : \"\"}`;\n        const moveableAbles: Able[] = [...manager[ableType]];\n\n        const requester = {\n            request(ableParam: IObject<any>) {\n                triggerAble(self, moveableAbles, [\"drag\"], eventAffix, \"\", {\n                    ...ableRequester.request(ableParam),\n                    requestAble: ableName,\n                    isRequest: true,\n                }, requestInstant);\n                return requester;\n            },\n            requestEnd() {\n                triggerAble(self, moveableAbles, [\"drag\"], eventAffix, \"End\", {\n                    ...ableRequester.requestEnd(),\n                    requestAble: ableName,\n                    isRequest: true,\n                }, requestInstant);\n                return requester;\n            },\n        };\n\n        triggerAble(self, moveableAbles, [\"drag\"], eventAffix, \"Start\", {\n            ...ableRequester.requestStart(param),\n            requestAble: ableName,\n            isRequest: true,\n        }, requestInstant);\n\n        return requestInstant ? requester.request(param).requestEnd() : requester;\n    }\n    /**\n     * moveable is the top level that manages targets\n     * `Single`: MoveableManager instance\n     * `Group`: MoveableGroup instance\n     * `IndividualGroup`: MoveableIndividaulGroup instance\n     * Returns leaf target MoveableManagers.\n     */\n    public getMoveables(): MoveableManagerInterface[] {\n        return [this];\n    }\n    /**\n     * Remove the Moveable object and the events.\n     * @method Moveable#destroy\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body);\n     *\n     * moveable.destroy();\n     */\n    public destroy(): void {\n        this.componentWillUnmount();\n    }\n    public updateRenderPoses() {\n        const state = this.getState();\n        const props = this.props;\n        const padding = props.padding;\n        const {\n            originalBeforeOrigin,\n            transformOrigin,\n            allMatrix, is3d,\n            pos1, pos2, pos3, pos4,\n            left: stateLeft,\n            top: stateTop,\n            isPersisted,\n        } = state;\n        const zoom = props.zoom || 1;\n\n        if (!padding && zoom <= 1) {\n            state.renderPoses = [\n                pos1,\n                pos2,\n                pos3,\n                pos4,\n            ];\n            state.renderLines = [\n                [pos1, pos2],\n                [pos2, pos4],\n                [pos4, pos3],\n                [pos3, pos1],\n            ];\n            return;\n        }\n        const {\n            left,\n            top,\n            bottom,\n            right,\n        } = getPaddingBox(padding || {});\n        const n = is3d ? 4 : 3;\n\n        // const clipPathInfo = getClipPath(\n        //     props.target,\n        //     offsetWidth,\n        //     offsetHeight,\n        // );\n\n        // if (clipPathInfo) {\n        //     left -= Math.max(0, clipPathInfo.left);\n        //     top -= Math.max(0, clipPathInfo.top);\n        //     bottom -= Math.max(0, offsetHeight - clipPathInfo.bottom);\n        //     right -= Math.max(0, offsetWidth - clipPathInfo.right);\n        // }\n\n        let absoluteOrigin: number[] = [];\n\n        if (isPersisted) {\n            absoluteOrigin = transformOrigin;\n        } else if (this.controlBox && props.groupable) {\n            absoluteOrigin = originalBeforeOrigin;\n        } else {\n            absoluteOrigin = plus(originalBeforeOrigin, [stateLeft, stateTop]);\n        }\n\n        const nextMatrix = multiplies(\n            n,\n            createOriginMatrix(absoluteOrigin.map(v => -v), n),\n            allMatrix,\n            createOriginMatrix(transformOrigin, n),\n        );\n\n        const renderPos1 = calculatePadding(nextMatrix, pos1, [-left, -top], n);\n        const renderPos2 = calculatePadding(nextMatrix, pos2, [right, -top], n);\n        const renderPos3 = calculatePadding(nextMatrix, pos3, [-left, bottom], n);\n        const renderPos4 = calculatePadding(nextMatrix, pos4, [right, bottom], n);\n\n        state.renderPoses = [\n            renderPos1,\n            renderPos2,\n            renderPos3,\n            renderPos4,\n        ];\n        state.renderLines = [\n            [renderPos1, renderPos2],\n            [renderPos2, renderPos4],\n            [renderPos4, renderPos3],\n            [renderPos3, renderPos1],\n        ];\n\n        if (zoom) {\n            const zoomOffset = zoom / 2;\n\n            state.renderLines = [\n                [\n                    calculatePadding(nextMatrix, pos1, [-left - zoomOffset, -top], n),\n                    calculatePadding(nextMatrix, pos2, [right + zoomOffset, -top], n),\n                ],\n                [\n                    calculatePadding(nextMatrix, pos2, [right, -top - zoomOffset], n),\n                    calculatePadding(nextMatrix, pos4, [right, bottom + zoomOffset], n),\n                ],\n                [\n                    calculatePadding(nextMatrix, pos4, [right + zoomOffset, bottom], n),\n                    calculatePadding(nextMatrix, pos3, [-left - zoomOffset, bottom], n),\n                ],\n                [\n                    calculatePadding(nextMatrix, pos3, [-left, bottom + zoomOffset], n),\n                    calculatePadding(nextMatrix, pos1, [-left, -top - zoomOffset], n),\n                ],\n            ];\n        }\n    }\n    public checkUpdate() {\n        this._isPropTargetChanged = false;\n        const { target, container, parentMoveable } = this.props;\n        const {\n            target: stateTarget,\n            container: stateContainer,\n        } = this.state;\n\n        if (!stateTarget && !target) {\n            return;\n        }\n        this.updateAbles();\n\n        const isTargetChanged = !equals(stateTarget, target);\n        const isChanged = isTargetChanged || !equals(stateContainer, container);\n\n        if (!isChanged) {\n            return;\n        }\n        const moveableContainer = container || this.controlBox;\n\n        if (moveableContainer) {\n            this.unsetAbles();\n        }\n        this.updateState({ target, container });\n\n        if (!parentMoveable && moveableContainer) {\n            this.updateRect(\"End\", false, false);\n        }\n        this._isPropTargetChanged = isTargetChanged;\n    }\n    public waitToChangeTarget(): Promise<void> {\n        return new Promise(() => { });\n    }\n    public triggerEvent(\n        name: string,\n        e: any,\n    ): any {\n        const props = this.props;\n\n        this._emitter.trigger(name, e);\n\n        if (props.parentMoveable && e.isRequest && !e.isRequestChild) {\n            return props.parentMoveable.triggerEvent(name, e, true);\n        }\n\n        const callback = (props as any)[name];\n\n        return callback && callback(e);\n    }\n    public useCSS(tag: string, css: string) {\n        const customStyleMap = this.props.customStyledMap as Record<string, any>;\n\n        const key = tag + css;\n\n        if (!customStyleMap[key]) {\n            customStyleMap[key] = styled(tag, css);\n        }\n        return customStyleMap[key];\n    }\n    public checkUpdateRect = () => {\n        if (this.isDragging()) {\n            return;\n        }\n        const parentMoveable = this.props.parentMoveable;\n\n        if (parentMoveable) {\n            (parentMoveable as any).checkUpdateRect();\n            return;\n        }\n        cancelAnimationFrame(this._observerId);\n        this._observerId = requestAnimationFrame(() => {\n            if (this.isDragging()) {\n                return;\n            }\n            this.updateRect();\n        });\n    }\n    public getState(): MoveableManagerState {\n        const props = this.props;\n        if (props.target || (props as any).targets?.length) {\n            this._hasFirstTarget = true;\n        }\n        const hasControlBox = this.controlBox;\n        const persistData = props.persistData;\n        const firstRenderState = props.firstRenderState;\n\n        if (firstRenderState && !hasControlBox) {\n            return firstRenderState;\n        }\n        if (!this._hasFirstTarget && persistData) {\n            const persistState = getPersistState(persistData);\n\n            if (persistState) {\n                this.updateState(persistState, false);\n                return this.state;\n            }\n        }\n        (this.state as any).isPersisted = false;\n        return this.state;\n    }\n    public updateSelectors() { }\n    protected unsetAbles() {\n        this.targetAbles.forEach(able => {\n            if (able.unset) {\n                able.unset(this);\n            }\n        });\n    }\n    protected updateAbles(\n        ables: Able[] = this.props.ables!,\n        eventAffix: string = \"\",\n    ) {\n        const props = this.props as any;\n        const triggerAblesSimultaneously = props.triggerAblesSimultaneously;\n        const enabledAbles = this.getEnabledAbles(ables);\n\n        const dragStart = `drag${eventAffix}Start` as \"dragStart\";\n        const pinchStart = `pinch${eventAffix}Start` as \"pinchStart\";\n        const dragControlStart = `drag${eventAffix}ControlStart` as \"dragControlStart\";\n\n        const targetAbles = filterAbles(enabledAbles, [dragStart, pinchStart], triggerAblesSimultaneously);\n        const controlAbles = filterAbles(enabledAbles, [dragControlStart], triggerAblesSimultaneously);\n\n        this.enabledAbles = enabledAbles;\n        this.targetAbles = targetAbles;\n        this.controlAbles = controlAbles;\n    }\n    protected updateState(nextState: any, isSetState?: boolean) {\n        if (isSetState) {\n            if (this.isUnmounted) {\n                return;\n            }\n            this.setState(nextState);\n        } else {\n            const state = this.state;\n\n            for (const name in nextState) {\n                (state as any)[name] = nextState[name];\n            }\n        }\n    }\n    protected getEnabledAbles(ables: Able[] = this.props.ables!) {\n        const props = this.props as any;\n\n        return ables.filter(able => able && (\n            (able.always && props[able.name] !== false)\n            || props[able.name]));\n    }\n    protected renderAbles() {\n        const props = this.props as any;\n        const triggerAblesSimultaneously = props.triggerAblesSimultaneously;\n        const Renderer = {\n            createElement,\n        };\n\n        this.renderState = {};\n\n        return groupByMap(flat<any>(\n            filterAbles(this.getEnabledAbles(), [\"render\"], triggerAblesSimultaneously).map(({ render }) => {\n                return render!(this, Renderer) || [];\n            })).filter(el => el), ({ key }) => key).map(group => group[0]);\n    }\n    protected updateCheckInput() {\n        this.targetGesto && (this.targetGesto.options.checkInput = this.props.checkInput);\n    }\n    protected _getRequestStyles() {\n        const styleNames = this.getEnabledAbles().reduce((names, able) => {\n            const ableStyleNames = (able.requestStyle?.() ?? []) as Array<keyof CSSStyleDeclaration>;\n\n            return [...names, ...ableStyleNames];\n        }, [...(this.props.requestStyles || [])] as Array<keyof CSSStyleDeclaration>);\n\n\n        return styleNames;\n    }\n    protected _updateObserver(prevProps: MoveableDefaultOptions) {\n        this._updateResizeObserver(prevProps);\n        this._updateMutationObserver(prevProps);\n    }\n    protected _updateEvents() {\n        const controlBoxElement = this.controlBox;\n        const hasTargetAble = this.targetAbles.length;\n        const hasControlAble = this.controlAbles.length;\n        const target = this._dragTarget;\n        const isUnset = (!hasTargetAble && this.targetGesto)\n            || this._isTargetChanged(true);\n\n        if (isUnset) {\n            unsetGesto(this, false);\n            this.updateState({ gestos: {} });\n        }\n        if (!hasControlAble) {\n            unsetGesto(this, true);\n        }\n\n        if (target && hasTargetAble && !this.targetGesto) {\n            this.targetGesto = getTargetAbleGesto(this, target!, \"\");\n        }\n        if (!this.controlGesto && hasControlAble) {\n            this.controlGesto = getAbleGesto(this, controlBoxElement, \"controlAbles\", \"Control\");\n        }\n    }\n    protected _updateTargets() {\n        const props = this.props;\n\n        this._prevPropTarget = this._propTarget;\n        this._prevDragTarget = this._dragTarget;\n        this._prevOriginalDragTarget = this._originalDragTarget;\n        this._prevDragArea = props.dragArea!;\n\n        this._propTarget = props.target;\n        this._originalDragTarget = props.dragTarget || props.target;\n        this._dragTarget = getRefTarget(this._originalDragTarget, true);\n\n    }\n    private _renderLines() {\n        const props = this.props;\n        const {\n            zoom,\n            hideDefaultLines,\n            hideChildMoveableDefaultLines,\n            parentMoveable,\n        } = props as MoveableManagerProps<GroupableProps>;\n\n        if (hideDefaultLines || (parentMoveable && hideChildMoveableDefaultLines)) {\n            return [];\n        }\n        const state = this.getState();\n        const Renderer = {\n            createElement,\n        };\n\n        return state.renderLines.map((line, i) => {\n            return renderLine(Renderer, \"\", line[0], line[1], zoom!, `render-line-${i}`);\n        });\n    }\n    private _onPreventClick = (e: any) => {\n        e.stopPropagation();\n        e.preventDefault();\n        // removeEvent(window, \"click\", this._onPreventClick, true);\n    }\n    private _isTargetChanged(useDragArea?: boolean) {\n        const props = this.props;\n        const nextTarget = props.dragTarget || props.target;\n        const prevTarget = this._prevOriginalDragTarget;\n        const prevDragArea = this._prevDragArea;\n        const dragArea = props.dragArea;\n\n        // check target without dragArea\n        const isDragTargetChanged = !dragArea && prevTarget !== nextTarget;\n        const isDragAreaChanged = (useDragArea || dragArea) && prevDragArea !== dragArea;\n\n        return isDragTargetChanged || isDragAreaChanged || this._prevPropTarget != this._propTarget;\n    }\n    private _updateNativeEvents() {\n        const props = this.props;\n        const target = props.dragArea ? this.areaElement : this.state.target;\n        const events = this.events;\n        const eventKeys = getKeys(events);\n\n        if (this._isTargetChanged()) {\n            for (const eventName in events) {\n                const manager = events[eventName];\n                manager && manager.destroy();\n                events[eventName] = null;\n            }\n        }\n        if (!target) {\n            return;\n        }\n        const enabledAbles = this.enabledAbles;\n        eventKeys.forEach(eventName => {\n            const ables = filterAbles(enabledAbles, [eventName] as any);\n            const hasAbles = ables.length > 0;\n            let manager = events[eventName];\n\n            if (!hasAbles) {\n                if (manager) {\n                    manager.destroy();\n                    events[eventName] = null;\n                }\n                return;\n            }\n            if (!manager) {\n                manager = new EventManager(target, this, eventName);\n                events[eventName] = manager;\n            }\n            manager.setAbles(ables);\n        });\n    }\n    private _checkUpdateRootContainer() {\n        const rootContainer = this.props.rootContainer;\n\n        if (!this._rootContainer && rootContainer) {\n            this._rootContainer = getRefTarget(rootContainer, true);\n        }\n    }\n    private _checkUpdateViewContainer() {\n        const viewContainerOption = this.props.viewContainer;\n\n        if (!this._viewContainer && viewContainerOption) {\n            this._viewContainer = getRefTarget(viewContainerOption, true);\n        }\n        const viewContainer = this._viewContainer;\n\n        if (viewContainer) {\n            this._changeAbleViewClassNames([\n                ...this._getAbleViewClassNames(),\n                this.isDragging() ? VIEW_DRAGGING : \"\",\n            ]);\n        }\n    }\n    private _changeAbleViewClassNames(classNames: string[]) {\n        const viewContainer = this._viewContainer!;\n        const nextClassNames = groupBy(\n            classNames.filter(Boolean),\n            el => el,\n        ).map(([className]) => className);\n        const prevClassNames = this._viewClassNames;\n\n        const {\n            removed,\n            added,\n        } = diff(prevClassNames, nextClassNames);\n\n        removed.forEach(index => {\n            removeClass(viewContainer, prevClassNames[index]);\n        });\n        added.forEach(index => {\n            addClass(viewContainer, nextClassNames[index]);\n        });\n\n        this._viewClassNames = nextClassNames;\n\n    }\n    private _getAbleViewClassNames() {\n        return (this.getEnabledAbles().map(able => {\n            return (able.viewClassName?.(this) || \"\");\n        }).join(\" \") + ` ${this._getAbleClassName(\"-view\")}`).split(/\\s+/g);\n    }\n    private _getAbleClassName(classPrefix = \"\") {\n        const ables = this.getEnabledAbles();\n\n        const targetGesto = this.targetGesto;\n        const controlGesto = this.controlGesto;\n        const targetGestoData: Record<string, any> = targetGesto?.isFlag()\n            ? targetGesto.getEventData() : {};\n        const controlGestoData: Record<string, any> = controlGesto?.isFlag()\n            ? controlGesto.getEventData() : {};\n\n        return ables.map(able => {\n            const name = able.name;\n            let className = able.className?.(this) || \"\";\n\n            if (\n                targetGestoData[name]?.isEventStart\n                || controlGestoData[name]?.isEventStart\n            ) {\n                className += ` ${prefix(`${name}${classPrefix}-dragging`)}`;\n            }\n            return className.trim();\n        }).filter(Boolean).join(\" \");\n    }\n    private _updateResizeObserver(prevProps: MoveableDefaultOptions) {\n        const props = this.props;\n        const target = props.target;\n        const win = getWindow(this.getControlBoxElement());\n\n        if (!win.ResizeObserver || !target || !props.useResizeObserver) {\n            this._reiszeObserver?.disconnect();\n            return;\n        }\n\n        if (prevProps.target === target && this._reiszeObserver) {\n            return;\n        }\n\n        const observer = new win.ResizeObserver(this.checkUpdateRect);\n\n        observer.observe(target!, {\n            box: \"border-box\",\n        });\n        this._reiszeObserver = observer;\n    }\n    private _updateMutationObserver(prevProps: MoveableDefaultOptions) {\n        const props = this.props;\n        const target = props.target;\n        const win = getWindow(this.getControlBoxElement());\n\n        if (!win.MutationObserver || !target || !props.useMutationObserver) {\n            this._mutationObserver?.disconnect();\n            return;\n        }\n\n        if (prevProps.target === target && this._mutationObserver) {\n            return;\n        }\n\n        const observer = new win.MutationObserver(records => {\n            for (const mutation of records) {\n                if (mutation.type === \"attributes\" && mutation.attributeName === \"style\") {\n                    this.checkUpdateRect();\n                }\n            }\n        });\n\n        observer.observe(target!, {\n            attributes: true,\n        });\n        this._mutationObserver = observer;\n    }\n}\n\n/**\n * The target to indicate Moveable Control Box.\n * @name Moveable#target\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n * moveable.target = document.querySelector(\".target\");\n */\n/**\n * Zooms in the elements of a moveable.\n * @name Moveable#zoom\n * @default 1\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n * moveable.zoom = 2;\n */\n\n/**\n * Whether the target size is detected and updated whenever it changes.\n * @name Moveable#useResizeObserver\n * @default false\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n * moveable.useResizeObserver = true;\n */\n\n/**\n * Resize, Scale Events at edges\n * @name Moveable#edge\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n * moveable.edge = true;\n */\n\n/**\n * You can specify the className of the moveable controlbox.\n * @name Moveable#className\n * @default \"\"\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   className: \"\",\n * });\n *\n * moveable.className = \"moveable1\";\n */\n\n/**\n * The target(s) to drag Moveable target(s)\n * @name Moveable#dragTarget\n * @default target\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body);\n * moveable.target = document.querySelector(\".target\");\n * moveable.dragTarget = document.querySelector(\".dragTarget\");\n */\n\n/**\n * `renderStart` event occurs at the first start of all events.\n * @memberof Moveable\n * @event renderStart\n * @param {Moveable.OnRenderStart} - Parameters for the `renderStart` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: document.querySelector(\".target\"),\n * });\n * moveable.on(\"renderStart\", ({ target }) => {\n *     console.log(\"onRenderStart\", target);\n * });\n */\n\n/**\n * `render` event occurs before the target is drawn on the screen.\n * @memberof Moveable\n * @event render\n * @param {Moveable.OnRender} - Parameters for the `render` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: document.querySelector(\".target\"),\n * });\n * moveable.on(\"render\", ({ target }) => {\n *     console.log(\"onRender\", target);\n * });\n */\n\n/**\n * `renderEnd` event occurs at the end of all events.\n * @memberof Moveable\n * @event renderEnd\n * @param {Moveable.OnRenderEnd} - Parameters for the `renderEnd` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: document.querySelector(\".target\"),\n * });\n * moveable.on(\"renderEnd\", ({ target }) => {\n *     console.log(\"onRenderEnd\", target);\n * });\n */\n\n/**\n * `renderGroupStart` event occurs at the first start of all events in group.\n * @memberof Moveable\n * @event renderGroupStart\n * @param {Moveable.OnRenderGroupStart} - Parameters for the `renderGroupStart` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n * });\n * moveable.on(\"renderGroupStart\", ({ targets }) => {\n *     console.log(\"onRenderGroupStart\", targets);\n * });\n */\n\n/**\n * `renderGroup` event occurs before the target is drawn on the screen in group.\n * @memberof Moveable\n * @event renderGroup\n * @param {Moveable.OnRenderGroup} - Parameters for the `renderGroup` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n * });\n * moveable.on(\"renderGroup\", ({ targets }) => {\n *     console.log(\"onRenderGroup\", targets);\n * });\n */\n\n/**\n * `renderGroupEnd` event occurs at the end of all events in group.\n * @memberof Moveable\n * @event renderGroupEnd\n * @param {Moveable.OnRenderGroupEnd} - Parameters for the `renderGroupEnd` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n * });\n * moveable.on(\"renderGroupEnd\", ({ targets }) => {\n *     console.log(\"onRenderGroupEnd\", targets);\n * });\n */\n", "import { minus } from \"@scena/matrix\";\nimport { refs } from \"framework-utils\";\nimport MoveableManager from \"../MoveableManager\";\nimport { renderLine } from \"../renderDirections\";\nimport { Renderer, MoveableGroupInterface, GroupableProps } from \"../types\";\nimport { flat, watchValue } from \"../utils\";\n\n\n\nexport default {\n    name: \"groupable\",\n    props: [\n        \"defaultGroupRotate\",\n        \"useDefaultGroupRotate\",\n        \"defaultGroupOrigin\",\n        \"groupable\",\n        \"groupableProps\",\n        \"targetGroups\",\n        \"hideChildMoveableDefaultLines\",\n    ] as const,\n    events: [] as const,\n    render(moveable: MoveableGroupInterface<GroupableProps>, React: Renderer): any[] {\n        const props = moveable.props;\n        let targets: Array<HTMLElement | SVGElement | undefined | null> = props.targets || [];\n\n        const { left, top, isPersisted } = moveable.getState();\n        const zoom = props.zoom || 1;\n        const renderGroupRects = moveable.renderGroupRects;\n        let persistDatChildren = props.persistData?.children || [];\n\n        if (isPersisted) {\n            targets = persistDatChildren.map(() => null);\n        } else {\n            persistDatChildren = [];\n        }\n        const parentPosition = watchValue(\n            moveable,\n            \"parentPosition\",\n            [left, top],\n            styles => styles.join(\",\"),\n        );\n        const requestStyles = watchValue(\n            moveable,\n            \"requestStyles\",\n            moveable.getRequestChildStyles(),\n            styles => styles.join(\",\"),\n        );\n\n        moveable.moveables = moveable.moveables.slice(0, targets.length);\n        return [\n            ...targets.map((target, i) => {\n                return <MoveableManager<GroupableProps>\n                    key={\"moveable\" + i}\n                    ref={refs(moveable, \"moveables\", i)}\n                    target={target}\n                    origin={false}\n                    requestStyles={requestStyles}\n                    cssStyled={props.cssStyled}\n                    customStyledMap={props.customStyledMap}\n                    useResizeObserver={props.useResizeObserver}\n                    useMutationObserver={props.useMutationObserver}\n                    hideChildMoveableDefaultLines={props.hideChildMoveableDefaultLines}\n                    parentMoveable={moveable}\n                    parentPosition={[left, top]}\n                    persistData={persistDatChildren[i]}\n                    zoom={zoom}\n                />;\n            }),\n            ...flat(renderGroupRects.map(({ pos1, pos2, pos3, pos4 }, i) => {\n                const poses = [pos1, pos2, pos3, pos4];\n\n                return [\n                    [0, 1],\n                    [1, 3],\n                    [3, 2],\n                    [2, 0],\n                ].map(([from, to], j) => {\n                    return renderLine(\n                        React,\n                        \"\",\n                        minus(poses[from], parentPosition),\n                        minus(poses[to], parentPosition),\n                        zoom,\n                        `group-rect-${i}-${j}`,\n                    );\n                });\n            })),\n        ];\n    },\n};\n", "import {\n    MoveableManagerInterface, MoveableGroupInterface,\n    ClickableProps, OnClick, OnClickGroup,\n} from \"../types\";\nimport { triggerEvent, fillParams } from \"../utils\";\nimport { findIndex } from \"@daybrush/utils\";\nimport { makeAble } from \"./AbleManager\";\n\nexport default makeAble(\"clickable\", {\n    props: [\n        \"clickable\",\n    ] as const,\n    events: [\n        \"click\",\n        \"clickGroup\",\n    ] as const,\n    always: true,\n    dragRelation: \"weak\",\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    dragStart() {\n        return;\n    },\n    dragControlStart() {\n        return;\n    },\n    dragGroupStart(moveable: MoveableManagerInterface<ClickableProps>, e: any) {\n        e.datas.inputTarget = e.inputEvent && e.inputEvent.target;\n    },\n    dragEnd(moveable: MoveableManagerInterface<ClickableProps>, e: any) {\n        const target = moveable.props.target!;\n        const inputEvent = e.inputEvent;\n        const inputTarget = e.inputTarget;\n        const isMoveableElement = moveable.isMoveableElement(inputTarget);\n        const containsElement = !isMoveableElement && moveable.controlBox.contains(inputTarget);\n\n        if (\n            !inputEvent || !inputTarget || e.isDrag\n            || moveable.isMoveableElement(inputTarget)\n            || containsElement\n            // External event duplicate target or dragAreaElement\n        ) {\n            return;\n        }\n        const containsTarget = target.contains(inputTarget);\n\n        triggerEvent(moveable, \"onClick\", fillParams<OnClick>(moveable, e, {\n            isDouble: e.isDouble,\n            inputTarget,\n            isTarget: target === inputTarget,\n            moveableTarget: moveable.props.target!,\n            containsTarget,\n        }));\n    },\n    dragGroupEnd(moveable: MoveableGroupInterface<ClickableProps>, e: any) {\n        const inputEvent = e.inputEvent;\n        const inputTarget = e.inputTarget;\n\n        if (\n            !inputEvent || !inputTarget || e.isDrag\n            || moveable.isMoveableElement(inputTarget)\n            // External event duplicate target or dragAreaElement\n            || e.datas.inputTarget === inputTarget\n        ) {\n            return;\n        }\n        const targets = moveable.props.targets!;\n        let targetIndex = targets.indexOf(inputTarget);\n        const isTarget = targetIndex > -1;\n        let containsTarget = false;\n\n        if (targetIndex === -1) {\n            targetIndex = findIndex(targets, parentTarget => parentTarget.contains(inputTarget));\n            containsTarget = targetIndex > -1;\n        }\n\n        triggerEvent(moveable, \"onClickGroup\", fillParams<OnClickGroup>(moveable, e, {\n            isDouble: e.isDouble,\n            targets,\n            inputTarget,\n            targetIndex,\n            isTarget,\n            containsTarget,\n            moveableTarget: targets[targetIndex],\n        }));\n    },\n    dragControlEnd(moveable: MoveableManagerInterface<ClickableProps>, e: any) {\n        this.dragEnd(moveable, e);\n    },\n    dragGroupControlEnd(moveable: MoveableManagerInterface<ClickableProps>, e: any) {\n        this.dragEnd(moveable, e);\n    },\n});\n\n/**\n * When you click on the element, the `click` event is called.\n * @memberof Moveable\n * @event click\n * @param {Moveable.OnClick} - Parameters for the `click` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: document.querySelector(\".target\"),\n * });\n * moveable.on(\"click\", ({ hasTarget, containsTarget, targetIndex }) => {\n *     // If you click on an element other than the target and not included in the target, index is -1.\n *     console.log(\"onClickGroup\", target, hasTarget, containsTarget, targetIndex);\n * });\n */\n\n/**\n * When you click on the element inside the group, the `clickGroup` event is called.\n * @memberof Moveable\n * @event clickGroup\n * @param {Moveable.OnClickGroup} - Parameters for the `clickGroup` event\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *     target: [].slice.call(document.querySelectorAll(\".target\")),\n * });\n * moveable.on(\"clickGroup\", ({ inputTarget, isTarget, containsTarget, targetIndex }) => {\n *     // If you click on an element other than the target and not included in the target, index is -1.\n *     console.log(\"onClickGroup\", inputTarget, isTarget, containsTarget, targetIndex);\n * });\n */\n", "import { hasClass } from \"@daybrush/utils\";\nimport { DraggableProps, MoveableGroupInterface, MoveableManagerInterface, Renderer } from \"../types\";\nimport { prefix } from \"../utils\";\nimport Draggable from \"./Draggable\";\nimport { makeAble } from \"./AbleManager\";\nimport { renderEdgeLines } from \"../renderDirections\";\n\nfunction getDraggableEvent(e: any) {\n    let datas = e.originalDatas.draggable;\n    if (!datas) {\n        e.originalDatas.draggable = {};\n        datas = e.originalDatas.draggable;\n    }\n    return { ...e, datas };\n}\nexport default makeAble(\"edgeDraggable\", {\n    css: [\n        `.edge.edgeDraggable.line {\ncursor: move;\n}`,\n    ],\n    render(moveable: MoveableManagerInterface<DraggableProps>, React: Renderer) {\n        const props = moveable.props;\n        const edge = props.edgeDraggable!;\n\n        if (!edge) {\n            return [];\n        }\n        return renderEdgeLines(\n            React,\n            \"edgeDraggable\",\n            edge,\n            moveable.getState().renderPoses,\n            props.zoom!,\n        );\n    },\n    dragCondition(moveable: MoveableManagerInterface<DraggableProps>, e: any) {\n        const props = moveable.props;\n        const target = e.inputEvent?.target;\n\n        if (!props.edgeDraggable || !target) {\n            return false;\n        }\n\n        return !props.draggable\n            && hasClass(target, prefix(\"direction\"))\n            && hasClass(target, prefix(\"edge\"))\n            && hasClass(target, prefix(\"edgeDraggable\"));\n    },\n    dragStart(moveable: MoveableManagerInterface<DraggableProps>, e: any) {\n        return Draggable.dragStart(moveable, getDraggableEvent(e));\n    },\n    drag(moveable: MoveableManagerInterface<DraggableProps>, e: any) {\n        return Draggable.drag(moveable, getDraggableEvent(e));\n    },\n    dragEnd(moveable: MoveableManagerInterface<DraggableProps, any>, e: any) {\n        return Draggable.dragEnd(moveable, getDraggableEvent(e));\n    },\n    dragGroupCondition(moveable: MoveableGroupInterface<DraggableProps>, e: any) {\n        const props = moveable.props;\n        const target = e.inputEvent?.target;\n\n        if (!props.edgeDraggable || !target) {\n            return false;\n        }\n        return !props.draggable && hasClass(target, prefix(\"direction\")) && hasClass(target, prefix(\"line\"));\n    },\n    dragGroupStart(moveable: MoveableGroupInterface<DraggableProps>, e: any) {\n        return Draggable.dragGroupStart(moveable, getDraggableEvent(e));\n    },\n    dragGroup(moveable: MoveableGroupInterface<DraggableProps>, e: any) {\n        return Draggable.dragGroup(moveable, getDraggableEvent(e));\n    },\n    dragGroupEnd(moveable: MoveableGroupInterface<DraggableProps, any>, e: any) {\n        return Draggable.dragGroupEnd(moveable, getDraggableEvent(e));\n    },\n    unset(moveable: any) {\n        return Draggable.unset(moveable);\n    },\n});\n\n/**\n * Whether to move by dragging the edge line (default: false)\n * @name Moveable.Draggable#edgeDraggable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *  draggable: true,\n *  edgeDraggable: false,\n * });\n *\n * moveable.edgeDraggable = true;\n */\n", "export default {\n    name: \"individualGroupable\",\n    props: [\n        \"individualGroupable\",\n        \"individualGroupableProps\",\n    ] as const,\n    events: [] as const,\n} as const;\n", "import Pinchable from \"./Pinchable\";\nimport Rotatable from \"./Rotatable\";\nimport Draggable from \"./Draggable\";\nimport Resizable from \"./Resizable\";\nimport Scalable from \"./Scalable\";\nimport Warpable from \"./Warpable\";\nimport Snappable from \"./Snappable\";\nimport DragArea from \"./DragArea\";\nimport Origin from \"./Origin\";\nimport Scrollable from \"./Scrollable\";\nimport Default from \"./Default\";\nimport Padding from \"./Padding\";\nimport Clippable from \"./Clippable\";\nimport OriginDraggable from \"./OriginDraggable\";\nimport Roundable from \"./Roundable\";\nimport Groupable from \"./Groupable\";\nimport BeforeRenderable from \"./BeforeRenderable\";\nimport Renderable from \"./Renderable\";\nimport Clickable from \"./Clickable\";\nimport edgeDraggable from \"./edgeDraggable\";\nimport IndividualGroupable from \"./IndividualGroupable\";\nimport { camelize, pushSet } from \"@daybrush/utils\";\nimport { Able } from \"../types\";\n\nexport const MOVEABLE_ABLES = /*#__PURE__*/[\n    BeforeRenderable,\n    Default, Snappable, Pinchable,\n    Draggable, edgeDraggable,\n    Resizable, Scalable, Warpable, Rotatable,\n    Scrollable, Padding, Origin,\n    OriginDraggable,\n    Clippable, Roundable, Groupable, IndividualGroupable,\n    Clickable,\n    DragArea,\n    Renderable,\n] as const;\n\n\nexport const MOVEABLE_EVENTS = /*#__PURE__*/(MOVEABLE_ABLES as readonly Able[]).reduce((current, able) => {\n    (able.events || []).forEach(name => {\n        pushSet(current, name);\n    });\n    return current;\n}, [] as any[]) as Array<typeof MOVEABLE_ABLES[number][\"events\"][number]>;\n\nexport const MOVEABLE_PROPS = /*#__PURE__*/(MOVEABLE_ABLES as readonly Able[]).reduce((current, able) => {\n    (able.props || []).forEach(name => {\n        pushSet(current, name);\n    });\n    return current;\n}, [] as any[]) as Array<typeof MOVEABLE_ABLES[number][\"props\"][number]>;\n\n\nexport const MOVEABLE_REACT_EVENTS = /*#__PURE__*/MOVEABLE_EVENTS.map(name => {\n    return camelize(`on ${name}`);\n}) as Array<`on${Capitalize<typeof MOVEABLE_ABLES[number][\"events\"][number]>}`>;\n\n", "export function solveConstantsDistance(\n    [a, b, c]: [number, number, number],\n    pos: number[],\n) {\n    return (a * pos[0] + b * pos[1] + c) / Math.sqrt(a * a + b * b);\n}\n\nexport function solveC(\n    [a, b]: [number, number],\n    pos: number[],\n) {\n    // ax + by + c = 0\n    // -ax -by;\n    return -a * pos[0] - b * pos[1];\n}\n", "import MoveableManager from \"./MoveableManager\";\nimport { GroupableProps, GroupRect, MoveableManagerInterface, MoveableTargetGroupsType, RectInfo } from \"./types\";\nimport ChildrenDiffer from \"@egjs/children-differ\";\nimport { getAbleGesto, getTargetAbleGesto } from \"./gesto/getAbleGesto\";\nimport Groupable from \"./ables/Groupable\";\nimport { MIN_NUM, MAX_NUM, TINY_NUM } from \"./consts\";\nimport {\n    getAbsolutePosesByState, equals, unsetGesto, rotatePosesInfo,\n    convertTransformOriginArray,\n    isDeepArrayEquals,\n    sign,\n    getRefTarget,\n} from \"./utils\";\nimport { minus, plus } from \"@scena/matrix\";\nimport { getIntersectionPointsByConstants, getMinMaxs } from \"overlap-area\";\nimport { find, isArray, throttle } from \"@daybrush/utils\";\nimport { getMoveableTargetInfo } from \"./utils/getMoveableTargetInfo\";\nimport { solveC, solveConstantsDistance } from \"./Snappable/utils\";\nimport { setStoreCache } from \"./store/Store\";\n\nfunction getMaxPos(poses: number[][][], index: number) {\n    return Math.max(...poses.map(([pos1, pos2, pos3, pos4]) => {\n        return Math.max(pos1[index], pos2[index], pos3[index], pos4[index]);\n    }));\n}\nfunction getMinPos(poses: number[][][], index: number) {\n    return Math.min(...poses.map(([pos1, pos2, pos3, pos4]) => {\n        return Math.min(pos1[index], pos2[index], pos3[index], pos4[index]);\n    }));\n}\n\n\nfunction getGroupRect(parentPoses: number[][][], rotation: number): GroupRect {\n    let pos1 = [0, 0];\n    let pos2 = [0, 0];\n    let pos3 = [0, 0];\n    let pos4 = [0, 0];\n    let width = 0;\n    let height = 0;\n\n    if (!parentPoses.length) {\n        return {\n            pos1,\n            pos2,\n            pos3,\n            pos4,\n            minX: 0,\n            minY: 0,\n            maxX: 0,\n            maxY: 0,\n            width,\n            height,\n            rotation,\n        };\n    }\n    const fixedRotation = throttle(rotation, TINY_NUM);\n\n    if (fixedRotation % 90) {\n        const rad = fixedRotation / 180 * Math.PI;\n        const a1 = Math.tan(rad);\n        const a2 = -1 / a1;\n        // ax = y  // -ax + y = 0 // 0 => 1\n        // -ax = y // ax + y = 0  // 0 => 3\n        const a1MinMax = [MAX_NUM, MIN_NUM];\n        const a1MinMaxPos = [[0, 0], [0, 0]];\n        const a2MinMax = [MAX_NUM, MIN_NUM];\n        const a2MinMaxPos = [[0, 0], [0, 0]];\n\n        parentPoses.forEach(poses => {\n            poses.forEach(pos => {\n\n                // const b1 = pos[1] - a1 * pos[0];\n                // const b2 = pos[1] - a2 * pos[0];\n\n                const a1Dist = solveConstantsDistance([-a1, 1, 0], pos);\n                const a2Dist = solveConstantsDistance([-a2, 1, 0], pos);\n\n                if (a1MinMax[0] > a1Dist) {\n                    a1MinMaxPos[0] = pos;\n                    a1MinMax[0] = a1Dist;\n                }\n                if (a1MinMax[1] < a1Dist) {\n                    a1MinMaxPos[1] = pos;\n                    a1MinMax[1] = a1Dist;\n                }\n                if (a2MinMax[0] > a2Dist) {\n                    a2MinMaxPos[0] = pos;\n                    a2MinMax[0] = a2Dist;\n                }\n                if (a2MinMax[1] < a2Dist) {\n                    a2MinMaxPos[1] = pos;\n                    a2MinMax[1] = a2Dist;\n                }\n            });\n        });\n\n        const [a1MinPos, a1MaxPos] = a1MinMaxPos;\n        const [a2MinPos, a2MaxPos] = a2MinMaxPos;\n\n        const minHorizontalLine = [-a1, 1, solveC([-a1, 1], a1MinPos)];\n        const maxHorizontalLine = [-a1, 1, solveC([-a1, 1], a1MaxPos)];\n\n        const minVerticalLine = [-a2, 1, solveC([-a2, 1], a2MinPos)];\n        const maxVerticalLine = [-a2, 1, solveC([-a2, 1], a2MaxPos)];\n\n        [pos1, pos2, pos3, pos4] = [\n            [minHorizontalLine, minVerticalLine],\n            [minHorizontalLine, maxVerticalLine],\n            [maxHorizontalLine, minVerticalLine],\n            [maxHorizontalLine, maxVerticalLine],\n        ].map(([line1, line2]) => getIntersectionPointsByConstants(line1, line2)[0]);\n\n        width = a2MinMax[1] - a2MinMax[0];\n        height = a1MinMax[1] - a1MinMax[0];\n    } else {\n        const minX = getMinPos(parentPoses, 0);\n        const minY = getMinPos(parentPoses, 1);\n        const maxX = getMaxPos(parentPoses, 0);\n        const maxY = getMaxPos(parentPoses, 1);\n\n        pos1 = [minX, minY];\n        pos2 = [maxX, minY];\n        pos3 = [minX, maxY];\n        pos4 = [maxX, maxY];\n        width = maxX - minX;\n        height = maxY - minY;\n        if (fixedRotation % 180) {\n            // 0\n            // 1 2\n            // 3 4\n            // 90\n            // 3 1\n            // 4 2\n            // 180\n            // 4 3\n            // 2 1\n            // 270\n            // 2 4\n            // 1 3\n            // 1, 2, 3,4 = 3 1 4 2\n            const changedX = [pos3, pos1, pos4, pos2];\n\n            [pos1, pos2, pos3, pos4] = changedX;\n            width = maxY - minY;\n            height = maxX - minX;\n        }\n\n    }\n    if (fixedRotation % 360 > 180) {\n        // 1 2   4 3\n        // 3 4   2 1\n        const changedX = [pos4, pos3, pos2, pos1];\n\n        [pos1, pos2, pos3, pos4] = changedX;\n    }\n    const { minX, minY, maxX, maxY } = getMinMaxs([pos1, pos2, pos3, pos4]);\n\n    return {\n        pos1,\n        pos2,\n        pos3,\n        pos4,\n        width,\n        height,\n        minX,\n        minY,\n        maxX,\n        maxY,\n        rotation,\n    };\n}\ntype SelfGroup = Array<MoveableManager | null | SelfGroup>;\ntype CheckedMoveableManager = { finded: boolean; manager: MoveableManager };\n\nfunction findMoveableGroups(\n    moveables: CheckedMoveableManager[],\n    childTargetGroups: MoveableTargetGroupsType,\n): SelfGroup {\n    const groups = childTargetGroups.map(targetGroup => {\n        if (isArray(targetGroup)) {\n            const childMoveableGroups = findMoveableGroups(moveables, targetGroup);\n            const length = childMoveableGroups.length;\n\n            if (length > 1) {\n                return childMoveableGroups;\n            } else if (length === 1) {\n                return childMoveableGroups[0];\n            } else {\n                return null;\n            }\n        } else {\n            const checked = find(moveables, ({ manager }) => manager.props.target === targetGroup)!;\n\n            if (checked) {\n                checked.finded = true;\n                return checked.manager;\n            }\n            return null;\n        }\n    }).filter(Boolean);\n\n    if (groups.length === 1 && isArray(groups[0])) {\n        return groups[0];\n    }\n    return groups;\n}\n\n/**\n * @namespace Moveable.Group\n * @description You can make targets moveable.\n */\nclass MoveableGroup extends MoveableManager<GroupableProps> {\n    public static defaultProps = {\n        ...MoveableManager.defaultProps,\n        transformOrigin: [\"50%\", \"50%\"],\n        groupable: true,\n        dragArea: true,\n        keepRatio: true,\n        targets: [],\n        defaultGroupRotate: 0,\n        defaultGroupOrigin: \"50% 50%\",\n    };\n    public differ: ChildrenDiffer<HTMLElement | SVGElement> = new ChildrenDiffer();\n    public moveables: MoveableManager[] = [];\n    public transformOrigin = \"50% 50%\";\n    public renderGroupRects: GroupRect[] = [];\n    private _targetGroups: MoveableTargetGroupsType = [];\n    private _hasFirstTargets = false;\n\n    public componentDidMount() {\n        super.componentDidMount();\n    }\n    public checkUpdate() {\n        this._isPropTargetChanged = false;\n        this.updateAbles();\n    }\n    public getTargets() {\n        return this.props.targets!;\n    }\n    public updateRect(type?: \"Start\" | \"\" | \"End\", isTarget?: boolean, isSetState = true) {\n        const state = this.state;\n\n        if (!this.controlBox || state.isPersisted) {\n            return;\n        }\n        setStoreCache(true);\n        this.moveables.forEach(moveable => {\n            moveable.updateRect(type, false, false);\n        });\n\n        const props = this.props;\n        const moveables = this.moveables;\n        const target = state.target! || props.target!;\n        const checkeds = moveables.map(moveable => ({ finded: false, manager: moveable }));\n        const targetGroups = this.props.targetGroups || [];\n        const moveableGroups = findMoveableGroups(\n            checkeds,\n            targetGroups,\n        );\n        const useDefaultGroupRotate = props.useDefaultGroupRotate;\n\n        moveableGroups.push(...checkeds.filter(({ finded }) => !finded).map(({ manager }) => manager));\n\n        const renderGroupRects: GroupRect[] = [];\n        const isReset = !isTarget || (type !== \"\" && props.updateGroup);\n        let defaultGroupRotate = props.defaultGroupRotate || 0;\n\n        if (!this._hasFirstTargets) {\n            const persistedRoatation = props.persistData?.rotation;\n\n            if (persistedRoatation != null) {\n                defaultGroupRotate = persistedRoatation;\n            }\n        }\n\n        function getMoveableGroupRect(group: SelfGroup, parentRotation: number, isRoot?: boolean): GroupRect {\n            const posesRotations = group.map(moveable => {\n                if (isArray(moveable)) {\n                    const rect = getMoveableGroupRect(moveable, parentRotation);\n                    const poses = [rect.pos1, rect.pos2, rect.pos3, rect.pos4];\n\n                    renderGroupRects.push(rect);\n                    return { poses, rotation: rect.rotation };\n                } else {\n                    return {\n                        poses: getAbsolutePosesByState(moveable!.state),\n                        rotation: moveable!.getRotation(),\n                    };\n                }\n            });\n            const rotations = posesRotations.map(({ rotation }) => rotation);\n\n            let groupRotation = 0;\n            const firstRotation = rotations[0];\n            const isSameRotation = rotations.every(nextRotation => {\n                return Math.abs(firstRotation - nextRotation) < 0.1;\n            });\n\n            if (isReset) {\n                groupRotation = !useDefaultGroupRotate && isSameRotation ? firstRotation : defaultGroupRotate;\n            } else {\n                groupRotation = !useDefaultGroupRotate && !isRoot && isSameRotation ? firstRotation : parentRotation;\n            }\n            const groupPoses = posesRotations.map(({ poses }) => poses);\n            const groupRect = getGroupRect(\n                groupPoses,\n                groupRotation,\n            );\n\n            return groupRect;\n        }\n        const rootGroupRect = getMoveableGroupRect(moveableGroups, this.rotation, true);\n\n        if (isReset) {\n            // reset rotataion\n            this.rotation = rootGroupRect.rotation;\n            this.transformOrigin = props.defaultGroupOrigin || \"50% 50%\";\n            this.scale = [1, 1];\n        }\n\n\n        this._targetGroups = targetGroups;\n        this.renderGroupRects = renderGroupRects;\n        const transformOrigin = this.transformOrigin;\n        const rotation = this.rotation;\n        const scale = this.scale;\n        const { width, height, minX, minY } = rootGroupRect;\n        const posesInfo = rotatePosesInfo(\n            [\n                [0, 0],\n                [width, 0],\n                [0, height],\n                [width, height],\n            ],\n            convertTransformOriginArray(transformOrigin, width, height),\n            this.rotation / 180 * Math.PI,\n        );\n\n        const { minX: deltaX, minY: deltaY } = getMinMaxs(posesInfo.result);\n        const rotateScale = ` rotate(${rotation}deg)`\n            + ` scale(${sign(scale[0])}, ${sign(scale[1])})`;\n        const transform = `translate(${-deltaX}px, ${-deltaY}px)${rotateScale}`;\n\n        this.controlBox.style.transform\n            = `translate3d(${minX}px, ${minY}px, ${this.props.translateZ || 0})`;\n\n        target.style.cssText += `left:0px;top:0px;`\n            + `transform-origin:${transformOrigin};`\n            + `width:${width}px;height:${height}px;`\n            + `transform: ${transform}`;\n        state.width = width;\n        state.height = height;\n\n        const container = this.getContainer();\n        const info = getMoveableTargetInfo(\n            this.controlBox,\n            target,\n            this.controlBox,\n            this.getContainer(),\n            this._rootContainer || container,\n            [],\n        );\n        const pos = [info.left!, info.top!];\n        const [\n            pos1,\n            pos2,\n            pos3,\n            pos4,\n        ] = getAbsolutePosesByState(info); // info.left + info.pos(1 ~ 4)\n\n        const minPos = getMinMaxs([pos1, pos2, pos3, pos4]);\n        const delta = [minPos.minX, minPos.minY];\n        const direction = sign(scale[0] * scale[1]);\n\n        info.pos1 = minus(pos1, delta);\n        info.pos2 = minus(pos2, delta);\n        info.pos3 = minus(pos3, delta);\n        info.pos4 = minus(pos4, delta);\n        // info.left = info.left + delta[0];\n        // info.top = info.top + delta[1];\n        info.left = minX - info.left! + delta[0];\n        info.top = minY - info.top! + delta[1];\n        info.origin = minus(plus(pos, info.origin!), delta);\n        info.beforeOrigin = minus(plus(pos, info.beforeOrigin!), delta);\n        info.originalBeforeOrigin = plus(pos, info.originalBeforeOrigin!);\n        info.transformOrigin = minus(plus(pos, info.transformOrigin!), delta);\n        target.style.transform\n            = `translate(${-deltaX - delta[0]}px, ${-deltaY - delta[1]}px)`\n            + rotateScale;\n\n        setStoreCache();\n        this.updateState(\n            {\n                ...info,\n                posDelta: delta,\n                direction,\n                beforeDirection: direction,\n            },\n            isSetState,\n        );\n    }\n    public getRect(): RectInfo {\n        return {\n            ...super.getRect(),\n            children: this.moveables.map(child => child.getRect()),\n        };\n    }\n    public triggerEvent(name: string, e: any, isManager?: boolean): any {\n        if (isManager || name.indexOf(\"Group\") > -1) {\n            return super.triggerEvent(name as any, e);\n        } else {\n            this._emitter.trigger(name, e);\n        }\n    }\n    public getRequestChildStyles() {\n        const styleNames = this.getEnabledAbles().reduce((names, able) => {\n            const ableStyleNames = (able.requestChildStyle?.() ?? []) as Array<keyof CSSStyleDeclaration>;\n\n            return [...names, ...ableStyleNames];\n        }, [] as Array<keyof CSSStyleDeclaration>);\n\n\n        return styleNames;\n    }\n\n    public getMoveables(): MoveableManagerInterface[] {\n        return [...this.moveables];\n    }\n    protected updateAbles() {\n        super.updateAbles([...this.props.ables!, Groupable], \"Group\");\n    }\n    protected _updateTargets() {\n        super._updateTargets();\n        this._originalDragTarget = this.props.dragTarget || this.areaElement;\n        this._dragTarget = getRefTarget(this._originalDragTarget, true);\n    }\n    protected _updateEvents() {\n        const state = this.state;\n        const props = this.props;\n\n\n        const prevTarget = this._prevDragTarget;\n        const nextTarget = props.dragTarget || this.areaElement;\n        const targets = props.targets!;\n        const { added, changed, removed } = this.differ.update(targets);\n        const isTargetChanged = added.length || removed.length;\n\n        if (isTargetChanged || this._prevOriginalDragTarget !== this._originalDragTarget) {\n            unsetGesto(this, false);\n            unsetGesto(this, true);\n            this.updateState({ gestos: {} });\n        }\n        if (prevTarget !== nextTarget) {\n            state.target = null;\n        }\n        if (!state.target) {\n            state.target = this.areaElement;\n            this.controlBox.style.display = \"block\";\n        }\n        if (state.target) {\n            if (!this.targetGesto) {\n                this.targetGesto = getTargetAbleGesto(this, this._dragTarget!, \"Group\");\n            }\n            if (!this.controlGesto) {\n                this.controlGesto = getAbleGesto(this, this.controlBox, \"controlAbles\", \"GroupControl\");\n            }\n        }\n        const isContainerChanged = !equals(state.container, props.container);\n\n        if (isContainerChanged) {\n            state.container = props.container;\n        }\n\n\n        if (\n            isContainerChanged\n            || isTargetChanged\n            || this.transformOrigin !== (props.defaultGroupOrigin || \"50% 50%\")\n            || changed.length\n            || targets.length && !isDeepArrayEquals(this._targetGroups, props.targetGroups || [])\n        ) {\n            this.updateRect();\n            this._hasFirstTargets = true;\n        }\n        this._isPropTargetChanged = !!isTargetChanged;\n    }\n    protected _updateObserver() { }\n}\n\n/**\n * Sets the initial rotation of the group.\n * @name Moveable.Group#defaultGroupRotate\n * @default 0\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   target: [].slice.call(document.querySelectorAll(\".target\")),\n *   defaultGroupRotate: 0,\n * });\n *\n * moveable.defaultGroupRotate = 40;\n */\n\n/**\n * Sets the initial origin of the group.\n * @name Moveable.Group#defaultGroupOrigin\n * @default 0\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   target: [].slice.call(document.querySelectorAll(\".target\")),\n *   defaultGroupOrigin: \"50% 50%\",\n * });\n *\n * moveable.defaultGroupOrigin = \"20% 40%\";\n */\n\n\n/**\n * Whether to hide the line in child moveable for group corresponding to the rect of the target.\n * @name Moveable.Group#hideChildMoveableDefaultLines\n * @default false\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   target: [].slice.call(document.querySelectorAll(\".target\")),\n *   hideChildMoveableDefaultLines: false,\n * });\n *\n * moveable.hideChildMoveableDefaultLines = true;\n */\nexport default MoveableGroup;\n", "import { ref, refs } from \"framework-utils\";\nimport * as React from \"react\";\nimport MoveableManager from \"./MoveableManager\";\nimport { GroupableProps, IndividualGroupableProps, MoveableManagerInterface, RectInfo, Requester } from \"./types\";\nimport { prefix } from \"./utils\";\nimport { setStoreCache } from \"./store/Store\";\nimport { find } from \"@daybrush/utils\";\n\n/**\n * @namespace Moveable.IndividualGroup\n * @description Create targets individually, not as a group.Create targets individually, not as a group.\n */\nclass MoveableIndividualGroup extends MoveableManager<GroupableProps & IndividualGroupableProps> {\n    public moveables: MoveableManager[] = [];\n    public render() {\n        const props = this.props;\n        const {\n            cspNonce,\n            cssStyled: ControlBoxElement,\n            persistData,\n        } = props;\n\n        let targets: Array<HTMLElement | SVGElement | null | undefined> = props.targets || [];\n        const length = targets.length;\n        const canPersist = this.isUnmounted || !length;\n        let persistDatChildren = persistData?.children ?? [];\n\n        if (canPersist && !length && persistDatChildren.length) {\n            targets = persistDatChildren.map(() => null);\n        } else if (!canPersist) {\n            persistDatChildren = [];\n        }\n\n        return <ControlBoxElement\n            cspNonce={cspNonce}\n            ref={ref(this, \"controlBox\")}\n            className={prefix(\"control-box\")}>\n            {targets!.map((target, i) => {\n                const individualProps = props.individualGroupableProps?.(target, i) ?? {};\n                return <MoveableManager\n                    key={\"moveable\" + i}\n                    ref={refs(this, \"moveables\", i)}\n                    {...props}\n                    {...individualProps}\n                    target={target}\n                    wrapperMoveable={this}\n                    isWrapperMounted={this.isMoveableMounted}\n                    persistData={persistDatChildren[i]}\n\n                />;\n            })}\n        </ControlBoxElement>;\n    }\n    public componentDidMount() {}\n    public componentDidUpdate() {}\n    public getTargets() {\n        return this.props.targets!;\n    }\n    public updateRect(type?: \"Start\" | \"\" | \"End\", isTarget?: boolean, isSetState: boolean = true) {\n        setStoreCache(true);\n        this.moveables.forEach(moveable => {\n            moveable.updateRect(type, isTarget, isSetState);\n        });\n        setStoreCache();\n    }\n    public getRect(): RectInfo {\n        return {\n            ...super.getRect(),\n            children: this.moveables.map(child => child.getRect()),\n        };\n    }\n    public request(\n        ableName: string,\n        param: Record<string, any> = {},\n        isInstant?: boolean,\n    ): Requester {\n        const results = this.moveables.map(m => m.request(ableName, {...param, isInstant: false }, false));\n        const requestInstant = isInstant || param.isInstant;\n        const requester: Requester = {\n            request(ableParam: Record<string, any>) {\n                results.forEach(r => r.request(ableParam));\n                return this;\n            },\n            requestEnd() {\n                results.forEach(r => r.requestEnd());\n                return this;\n            },\n        };\n        return requestInstant ? requester.request(param).requestEnd() : requester;\n    }\n    public dragStart(e: MouseEvent | TouchEvent) {\n        const inputTarget = e.target as HTMLElement;\n        const childMoveable = find(this.moveables, child => {\n            const target = child.getTargets()[0];\n            const controlBoxElement = child.getControlBoxElement();\n            const dragElement = child.getDragElement();\n\n            if (!target || !dragElement) {\n                return false;\n            }\n            return dragElement === inputTarget || dragElement.contains(inputTarget)\n                || (dragElement !== target && target === inputTarget || target.contains(inputTarget))\n                || controlBoxElement === inputTarget || controlBoxElement.contains(inputTarget);\n        });\n\n        if (childMoveable) {\n            childMoveable.dragStart(e);\n        }\n        return this;\n    }\n    public hitTest() {\n        return 0;\n    }\n    public isInside() {\n        return false;\n    }\n    public isDragging() {\n        return false;\n    }\n    public getDragElement() {\n        return null;\n    }\n    public getMoveables(): MoveableManagerInterface[] {\n        return [...this.moveables];\n    }\n    public updateRenderPoses() { }\n    public checkUpdate() { }\n    public triggerEvent() { }\n    protected updateAbles() { }\n    protected _updateEvents() { }\n    protected _updateObserver() {}\n}\n\n/**\n * Create targets individually, not as a group.\n * @name Moveable.IndividualGroup#individualGroupable\n * @example\n * import Moveable from \"moveable\";\n *\n * const moveable = new Moveable(document.body, {\n *   target: [].slice.call(document.querySelectorAll(\".target\")),\n *   individualGroupable: true,\n * });\n */\nexport default MoveableIndividualGroup;\n", "import * as React from \"react\";\nimport {\n    Able, MoveableInterface, GroupableProps, MoveableDefaultProps,\n    IndividualGroupableProps, MoveableManagerInterface, MoveableRefTargetsResultType,\n    MoveableTargetGroupsType, BeforeRenderableProps, RenderableProps, MoveableManagerState,\n} from \"./types\";\nimport MoveableManager from \"./MoveableManager\";\nimport MoveableGroup from \"./MoveableGroup\";\nimport { ref, withMethods, prefixCSS } from \"framework-utils\";\nimport { find, getKeys, IObject, isArray, isString } from \"@daybrush/utils\";\nimport { MOVEABLE_METHODS, PREFIX, MOVEABLE_CSS } from \"./consts\";\nimport Default from \"./ables/Default\";\nimport Groupable from \"./ables/Groupable\";\nimport DragArea from \"./ables/DragArea\";\nimport { styled } from \"react-css-styled\";\nimport { getRefTargets } from \"./utils\";\nimport IndividualGroupable from \"./ables/IndividualGroupable\";\nimport MoveableIndividualGroup from \"./MoveableIndividualGroup\";\nimport ChildrenDiffer from \"@egjs/children-differ\";\n\nfunction getElementTargets(\n    refTargets: MoveableRefTargetsResultType,\n    selectorMap: IObject<Array<HTMLElement | SVGElement>>,\n): Array<SVGElement | HTMLElement> {\n    const elementTargets: Array<SVGElement | HTMLElement> = [];\n\n    refTargets.forEach(target => {\n        if (!target) {\n            return;\n        }\n        if (isString(target)) {\n            if (selectorMap[target]) {\n                elementTargets.push(...selectorMap[target]);\n            }\n            return;\n        }\n        if (isArray(target)) {\n            elementTargets.push(...getElementTargets(target, selectorMap));\n        } else {\n            elementTargets.push(target);\n        }\n    });\n\n    return elementTargets;\n}\n\nfunction getTargetGroups(\n    refTargets: MoveableRefTargetsResultType,\n    selectorMap: IObject<Array<HTMLElement | SVGElement>>,\n) {\n    const targetGroups: MoveableTargetGroupsType = [];\n\n    refTargets.forEach(target => {\n        if (!target) {\n            return;\n        }\n        if (isString(target)) {\n            if (selectorMap[target]) {\n                targetGroups.push(...selectorMap[target]);\n            }\n            return;\n        }\n        if (isArray(target)) {\n            targetGroups.push(getTargetGroups(target, selectorMap));\n        } else {\n            targetGroups.push(target);\n        }\n    });\n\n    return targetGroups;\n}\n\nfunction compareRefTargets(\n    prevRefTargets: MoveableRefTargetsResultType,\n    nextRefTargets: MoveableRefTargetsResultType,\n): boolean {\n    return (prevRefTargets.length !== nextRefTargets.length) || prevRefTargets.some((target, i) => {\n        const nextTarget = nextRefTargets[i];\n\n        if (!target && !nextTarget) {\n            return false;\n        } else if (target != nextTarget) {\n            if (isArray(target) && isArray(nextTarget)) {\n                return compareRefTargets(target, nextTarget);\n            }\n            return true;\n        }\n        return false;\n    });\n}\n\ntype DefaultAbles = GroupableProps & IndividualGroupableProps & BeforeRenderableProps & RenderableProps;\n\nexport class InitialMoveable<T = {}>\n    extends React.PureComponent<MoveableDefaultProps & DefaultAbles & T> {\n    public static defaultAbles: readonly Able<any>[] = [];\n    public static customStyledMap: Record<string, any> = {};\n    public static defaultStyled: any = null;\n    public static makeStyled() {\n        const cssMap: IObject<boolean> = {};\n\n        const ables = this.getTotalAbles();\n        ables.forEach(({ css }: Able) => {\n            if (!css) {\n                return;\n            }\n            css.forEach(text => {\n                cssMap[text] = true;\n            });\n        });\n        const style = getKeys(cssMap).join(\"\\n\");\n\n        this.defaultStyled = styled(\"div\", prefixCSS(PREFIX, MOVEABLE_CSS + style));\n    }\n    public static getTotalAbles(): Able[] {\n        return [Default, Groupable, IndividualGroupable, DragArea, ...this.defaultAbles];\n    }\n    @withMethods(MOVEABLE_METHODS)\n    public moveable!: MoveableManager | MoveableGroup | MoveableIndividualGroup;\n    public refTargets: MoveableRefTargetsResultType = [];\n    public selectorMap: IObject<Array<HTMLElement | SVGElement>> = {};\n    private _differ: ChildrenDiffer<HTMLElement | SVGElement> = new ChildrenDiffer();\n    private _elementTargets: Array<HTMLElement | SVGElement> = [];\n    private _tmpRefTargets: MoveableRefTargetsResultType = [];\n    private _tmpSelectorMap: IObject<Array<HTMLElement | SVGElement>> = {};\n    private _onChangeTargets: (() => void) | null = null;\n    public render() {\n        const moveableContructor = (this.constructor as typeof InitialMoveable);\n\n        if (!moveableContructor.defaultStyled) {\n            moveableContructor.makeStyled();\n        }\n        const {\n            ables: userAbles,\n            props: userProps,\n            ...props\n        } = this.props;\n        const [\n            refTargets,\n            nextSelectorMap,\n        ] = this._updateRefs(true);\n        const elementTargets = getElementTargets(refTargets, nextSelectorMap);\n\n        let isGroup = elementTargets.length > 1;\n        const totalAbles = moveableContructor.getTotalAbles();\n        const ables = [\n            ...totalAbles,\n            ...(userAbles as any || []),\n        ];\n        const nextProps = {\n            ...props,\n            ...(userProps || {}),\n            ables,\n            cssStyled: moveableContructor.defaultStyled,\n            customStyledMap: moveableContructor.customStyledMap,\n        };\n\n        this._elementTargets = elementTargets;\n\n        let firstRenderState: MoveableManagerState | null = null;\n        const prevMoveable = this.moveable;\n\n\n        const persistData = props.persistData;\n\n        if (persistData?.children) {\n            isGroup = true;\n        }\n        // Even one child is treated as a group if individualGroupable is enabled. #867\n        if (props.individualGroupable) {\n            return <MoveableIndividualGroup key=\"individual-group\" ref={ref(this, \"moveable\")}\n                {...nextProps}\n                target={null}\n                targets={elementTargets}\n            />;\n        }\n        if (isGroup) {\n            const targetGroups = getTargetGroups(refTargets, nextSelectorMap);\n\n            // manager\n            if (prevMoveable && !prevMoveable.props.groupable && !(prevMoveable.props as any).individualGroupable) {\n                const target = prevMoveable.props.target!;\n\n                if (target && elementTargets.indexOf(target) > -1) {\n                    firstRenderState = { ...prevMoveable.state };\n                }\n            }\n\n            return <MoveableGroup key=\"group\" ref={ref(this, \"moveable\")}\n                {...nextProps}\n                {...props.groupableProps ?? {}}\n                target={null}\n                targets={elementTargets}\n                targetGroups={targetGroups}\n                firstRenderState={firstRenderState}\n            />;\n        } else {\n            const target = elementTargets[0];\n            // manager\n            if (prevMoveable && (prevMoveable.props.groupable || (prevMoveable.props as any).individualGroupable)) {\n                const moveables = (prevMoveable as MoveableGroup | MoveableIndividualGroup).moveables || [];\n                const prevTargetMoveable = find(moveables, mv => mv.props.target === target);\n\n                if (prevTargetMoveable) {\n                    firstRenderState = { ...prevTargetMoveable.state };\n                }\n            }\n\n            return <MoveableManager<any> key=\"single\" ref={ref(this, \"moveable\")}\n                {...nextProps}\n                target={target}\n                firstRenderState={firstRenderState} />;\n        }\n    }\n    public componentDidMount() {\n        this._checkChangeTargets();\n    }\n    public componentDidUpdate() {\n        this._checkChangeTargets();\n    }\n    public componentWillUnmount() {\n        this.selectorMap = {};\n        this.refTargets = [];\n    }\n    /**\n     * Get targets set in moveable through target or targets of props.\n     * @method Moveable#getTargets\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body, {\n     *    target: [targetRef, \".target\", document.querySelectorAll(\".target\")],\n     * });\n     *\n     * console.log(moveable.getTargets());\n     */\n    public getTargets() {\n        return this.moveable?.getTargets() ?? [];\n    }\n    /**\n     * If the element list corresponding to the selector among the targets is changed, it is updated.\n     * @method Moveable#updateSelectors\n     * @example\n     * import Moveable from \"moveable\";\n     *\n     * const moveable = new Moveable(document.body, {\n     *    target: \".target\",\n     * });\n     *\n     * moveable.updateSelectors();\n     */\n    public updateSelectors() {\n        this.selectorMap = {};\n        this._updateRefs();\n    }\n    /**\n     * User changes target and waits for target to change.\n     * @method Moveable#waitToChangeTarget\n     * @story combination-with-other-components--components-selecto\n     * @example\n     * document.querySelector(\".target\").addEventListener(\"mousedown\", e => {\n     *   moveable.waitToChangeTarget().then(() => {\n     *      moveable.dragStart(e.currentTarget);\n     *   });\n     *   moveable.target = e.currentTarget;\n     * });\n     */\n    public waitToChangeTarget(): Promise<void> {\n        // let resolvePromise: (e: OnChangeTarget) => void;\n\n        // this._onChangeTargets = () => {\n        //     this._onChangeTargets = null;\n        //     resolvePromise({\n        //         moveable: this.getManager(),\n        //         targets: this._elementTargets,\n        //     });\n        // };\n\n        // return new Promise<OnChangeTarget>(resolve => {\n        //     resolvePromise = resolve;\n        // });\n        let resolvePromise: () => void;\n\n        this._onChangeTargets = () => {\n            this._onChangeTargets = null;\n            resolvePromise();\n        };\n\n        return new Promise(resolve => {\n            resolvePromise = resolve;\n        });\n    }\n    public waitToChangeTargets(): Promise<void> {\n        return this.waitToChangeTarget();\n    }\n    public getManager(): MoveableManagerInterface<any, any> {\n        return this.moveable;\n    }\n    public getMoveables(): MoveableManagerInterface[] {\n        return this.moveable.getMoveables();\n    }\n    public getDragElement(): HTMLElement | SVGElement | null | undefined {\n        return this.moveable.getDragElement();\n    }\n    private _updateRefs(isRender?: boolean) {\n        const prevRefTargets = this.refTargets;\n        const nextRefTargets = getRefTargets((this.props.target || this.props.targets) as any);\n        const isBrowser = typeof document !== \"undefined\";\n\n        let isUpdate = compareRefTargets(prevRefTargets, nextRefTargets);\n        const selectorMap = this.selectorMap;\n        const nextSelectorMap: IObject<Array<HTMLElement | SVGElement>> = {};\n\n        this.refTargets.forEach(function updateSelectorMap(target) {\n            if (isString(target)) {\n                const selectorTarget = selectorMap[target];\n\n                if (selectorTarget) {\n                    nextSelectorMap[target] = selectorMap[target];\n                } else if (isBrowser) {\n                    isUpdate = true;\n                    nextSelectorMap[target] = [].slice.call(document.querySelectorAll(target));\n                }\n            } else if (isArray(target)) {\n                target.forEach(updateSelectorMap);\n            }\n        });\n\n        this._tmpRefTargets = nextRefTargets;\n        this._tmpSelectorMap = nextSelectorMap;\n\n        return [\n            nextRefTargets,\n            nextSelectorMap,\n            !isRender && isUpdate,\n        ] as const;\n    }\n    private _checkChangeTargets() {\n        this.refTargets = this._tmpRefTargets;\n        this.selectorMap = this._tmpSelectorMap;\n\n        const { added, removed } = this._differ.update(this._elementTargets);\n        const isTargetChanged = added.length || removed.length;\n\n        if (isTargetChanged) {\n            this.props.onChangeTargets?.({\n                moveable: this.moveable,\n                targets: this._elementTargets,\n            });\n            this._onChangeTargets?.();\n        }\n        const [\n            refTargets,\n            selectorMap,\n            isUpdate,\n        ] = this._updateRefs();\n\n        this.refTargets = refTargets;\n        this.selectorMap = selectorMap;\n\n        if (isUpdate) {\n            this.forceUpdate();\n        }\n    }\n}\nexport interface InitialMoveable<T = {}>\n    extends React.PureComponent<MoveableDefaultProps & DefaultAbles & T>,\n    MoveableInterface {\n    setState(state: any, callback?: () => any): any;\n    forceUpdate(callback?: () => any): any;\n}\n", "import { MoveableProps, Able } from \"./types\";\nimport { MOVEABLE_ABLES } from \"./ables/consts\";\nimport { InitialMoveable } from \"./InitialMoveable\";\n\nexport default class Moveable<T = {}> extends InitialMoveable<MoveableProps & T> {\n    public static defaultAbles: Able[] = MOVEABLE_ABLES as any;\n}\n", "import { Able } from \"./types\";\nimport { InitialMoveable } from \"./InitialMoveable\";\n\nexport function makeMoveable<T extends Record<string, any> = {}>(\n    ables: Array<Able<T>>,\n): typeof InitialMoveable & (new (...args: any[]) => InitialMoveable<T>) {\n    return class Moveable extends InitialMoveable<T> {\n        public static defaultAbles = ables;\n    };\n}\n"],
  "mappings": "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",
  "names": ["some", "arr", "callback", "length", "i", "find", "getUserAgentString", "agent", "userAgent", "navigator", "toLowerCase", "execRegExp", "pattern", "text", "RegExp", "exec", "e", "hasUserAgentData", "userAgentData", "brands", "uaList", "findVersion", "versionTest", "result", "convertVersion", "replace", "findPreset", "presets", "userPreset", "version", "preset", "test", "brand", "versionAlias", "findPresetBrand", "brandInfo", "findBrand", "id", "_a", "BROWSER_PRESETS", "CHROMIUM_PRESETS", "WEBKIT_PRESETS", "WEBVIEW_PRESETS", "OS_PRESETS", "isWebView", "getLegacyAgent", "nextAgent", "isMobile", "browser", "name", "majorVersion", "webview", "chromium", "chromiumVersion", "webkit", "webkitVersion", "os", "browserPreset", "browserVersion", "_b", "osPreset", "osVersion", "chromiumPreset", "webkitPreset", "parseInt", "isHints", "getClientHintsAgent", "osData", "fullVersionList", "mobile", "firstBrand", "platform", "chromiumBrand", "webkitBrand", "platfomResult", "platformVersion", "browserBrandByFullVersionList", "browserBrand", "uaFullVersion", "agent", "userAgent", "hasUserAgentData", "getClientHintsAgent", "getLegacyAgent", "__extends", "StyledElement", "_this", "__proto", "prototype", "_a", "props", "_b", "className", "cspNonce", "portalContainer", "attributes", "cssId", "injector", "Tag", "tag", "portalAttributes", "version", "indexOf", "createElement", "ref", "injectResult", "inject", "element", "nonce", "destroy", "Component", "styled", "Tag", "css", "injector", "cssStyled", "cssId", "className", "forwardRef", "props", "ref", "_a", "cspNonce", "attributes", "targetRef", "useRef", "useImperativeHandle", "current", "useEffect", "injectResult", "inject", "nonce", "destroy", "createElement", "__assign", "agent", "TINY_NUM", "CustomGesto", "getDist", "rotate", "React", "_a", "isBoundRotate", "sign", "dot", "_b", "_c", "_d", "directionCondition", "result", "nextWidth", "nextHeight", "checkSnap", "direction", "rotateMatrix", "type", "flat", "pos", "diff", "rotatableDragControlCondtion", "i", "scaleMatrix", "ratio", "xPos", "yPos", "rad", "dist", "nextParams", "EventManager", "eventName", "moveable", "__extends", "MoveableManager", "css", "manager", "MoveableGroup", "rotation", "MoveableIndividualGroup", "InitialMoveable", "__rest", "Moveable"]
}
